package com.tcv.controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnErrorListener;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.text.Editable;
import android.text.Html;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.format.DateFormat;
import android.text.method.LinkMovementMethod;
import android.text.style.ForegroundColorSpan;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.webkit.WebView;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnGroupClickListener;
import android.widget.ExpandableListView.OnGroupExpandListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ProgressBar;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TableLayout;
import android.widget.TextView;
import android.widget.TextView.BufferType;
import android.widget.Toast;
import android.widget.VideoView;

import com.datacolor.spyder.sdk.SpyderSDK;
import com.paypal.android.MEP.CheckoutButton;
import com.paypal.android.MEP.PayPal;
import com.paypal.android.MEP.PayPalActivity;
import com.paypal.android.MEP.PayPalPayment;
import com.tcv.controller.adapter.TestListExpandAdapter;
import com.tcv.controller.adapter.TestListExpandAdapterUnpaid;
import com.tcv.model.Exception.DiagnosisdetailsException;
import com.tcv.model.Exception.GetallcountryException;
import com.tcv.model.Exception.GetallplanException;
import com.tcv.model.Exception.GetallstateException;
import com.tcv.model.Exception.GetalltestException;
import com.tcv.model.Exception.GetalltestgroupException;
import com.tcv.model.Exception.GettestanswersException;
import com.tcv.model.Exception.GettestquestionException;
import com.tcv.model.Exception.GetuserplanException;
import com.tcv.model.Exception.TestAnswersException;
import com.tcv.model.Exception.TestInfoException;
import com.tcv.model.Exception.TestResultException;
import com.tcv.model.XMLHandler.CompressTestHandler;
import com.tcv.model.XMLHandler.ContentXMLHandler;
import com.tcv.model.XMLHandler.GetallcountryXMLHandler;
import com.tcv.model.XMLHandler.GetallplanXMLHandler;
import com.tcv.model.XMLHandler.GetallstateXMLHandler;
import com.tcv.model.XMLHandler.GetalltestXMLHandler;
import com.tcv.model.XMLHandler.GetalltestgroupXMLHandler;
import com.tcv.model.XMLHandler.GetfaqsXMLHandler;
import com.tcv.model.XMLHandler.GettestanswersXMLHandler;
import com.tcv.model.XMLHandler.GettestquestionXMLHandler;
import com.tcv.model.XMLHandler.InsertCreditInfoXMLHandler;
import com.tcv.model.XMLHandler.InsertSinglePaymentInfoXMLHandler;
import com.tcv.model.XMLHandler.paypalIndividualXMLHandler;
import com.tcv.model.XMLHandler.redeemCodeXMLHandler;
import com.tcv.model.manager.ContentManager;
import com.tcv.model.manager.DiagnosisdetailsManager;
import com.tcv.model.manager.GetAppVersionManager;
import com.tcv.model.manager.GetallcountryManager;
import com.tcv.model.manager.GetallplanManager;
import com.tcv.model.manager.GetallstateManager;
import com.tcv.model.manager.GetalltestManager;
import com.tcv.model.manager.GetalltestgroupManager;
import com.tcv.model.manager.GetfaqsManager;
import com.tcv.model.manager.GettestanswersManager;
import com.tcv.model.manager.GettestquestionManager;
import com.tcv.model.manager.GetuserplanManager;
import com.tcv.model.manager.TestAnswersManager;
import com.tcv.model.manager.TestInfoManager;
import com.tcv.model.manager.TestResultManager;
import com.tcv.model.pojo.CompressInfo;
import com.tcv.model.pojo.CompressTest;
import com.tcv.model.pojo.Content;
import com.tcv.model.pojo.Diagnosisdetails;
import com.tcv.model.pojo.Getallplan;
import com.tcv.model.pojo.Getalltest;
import com.tcv.model.pojo.Getalltestgroup;
import com.tcv.model.pojo.Getfaqs;
import com.tcv.model.pojo.Gettestanswers;
import com.tcv.model.pojo.Gettestquestion;
import com.tcv.model.pojo.Getuserplan;
import com.tcv.model.pojo.ServerSyncItem;
import com.tcv.model.pojo.TestAnswers;
import com.tcv.model.pojo.TestInfo;
import com.tcv.model.pojo.TestResult;
import com.tcv.model.pojo.Testsummary;
import com.tcv.util.AndroidUtility;
import com.tcv.util.AppConstants;
import com.tcv.util.AppUtils;
import com.tcv.util.BaseUrl;
import com.tcv.util.DevConfig;

public class TakeATestActivity extends Activity {

	GetuserplanManager mUserPlanManager;
	GetalltestgroupManager mtestGroupManager;
	GetalltestManager mGetAllTestManager;
	GettestquestionManager mGetTestQuestionManager;
	GettestanswersManager mGetOptionsManager;
	TestInfoManager mTestInfoManager;
	TestResultManager mtestResultManager;
	TestAnswersManager answersManager_ids;
	DiagnosisdetailsManager diagnosisDetailsManager;

	ArrayList<Getuserplan> getUserPlanArrayList;
	ArrayList<Getalltest> mGetAllTest;
	ArrayList<Getalltest> mParentTests = null;
	ArrayList<Getalltest> mParentTestsUnpaid = null;
	ArrayList<Gettestquestion> mGetTestQuestion;
	ArrayList<Gettestanswers> mGetTestOptions;
	ArrayList<String> mTestNamesPaid;
	ArrayList<String> mTestNamesUnPaid;
	ArrayList<String> mTestDescPaid;
	ArrayList<String> mTestDescUnPaid;
	ArrayList<Integer> mTestAnswerIds;
	ArrayList<Integer> mCorrectAnsCountArr;
	ArrayList<Integer> mNoOfQuestionsArr;
	ArrayList<String> mResultArr;

	LinearLayout LoadingLinLayout, webVwLinLayout;
	ExpandableListView TestexpListview, TestexpListviewUnpaid;
	WebView webvw, instructionsWebVw;
	Button mButtonTakeATest, nxtBtn, startTestBtn, beginTestBtn, closeBtn,
			closeTestBtn, redeemBtn, beginTestSectionBtn,
			launchColorArrangement;
	RelativeLayout.LayoutParams takeTestpayNowParams;
	RelativeLayout.LayoutParams payNowParams;
	TableLayout optionsTab;
	TextView diagnosisTxt, resultStatusTxt;
	TextView versionTxt;
	// TextView titleDescTxt;
	public static TakeATestActivity takeTestActivity;

	public int mCorrectAnsCount, mWrongAnswers;
	String mTestTakenDate, mStatus, mEmail, mTestType, unLimitedCredit;

	// number of rows in the table
	int rowCount = 3, row;
	// number of columns in the table
	int columnCount = 32, column;

	TableLayout resultTable;

	Getuserplan getUserPlan;
	Getalltest mSelectedTest = null, mMainSelectedTest = null;
	TestInfo testinfo;
	TestAnswers testAnswers;
	Testsummary testSummary;
	Getalltestgroup mtestGroup;
	Diagnosisdetails diagnosisDetails;

	int mQuestionNumber;
	public int flagForBackPress = 0;
	AlertDialog.Builder alert, alertMustSync;
	TextView frstnameTxt, lastnameTxt, birthdayTxt, identifierTxt,
			empAddressTxt, usernameTxt, testTakenTxt, DateTimeTxt, scoreTxt,
			testplatesTxt;
	TextView testNameTxt, timer_textview, timer_textview1;
	EditText frstnameEdt, lastnameEdt, birthdayEdt, identifierEdt,
			empAddressEdt;
	TextView tv1, tv2, tv3, tv4, tv5, tv6, tv7, tv8, tv9, optionsInfo, timeTxt,
			creditsTxt, testplateInfoTxt, cardTypeTxt, CardNoTxt, expMonthTxt,
			expYearTxt, cvvTxt;
	ImageView iv1, iv2, iv3, iv4, iv5, iv6, iv7, iv8, iv9, optionImage;

	int mCurrentDeficiencyTest = 0, mSelectedOption = -1, mTestInfoId,
			mAnswerId, DefTestCount;
	HashMap<String, TestResult> mTestResultSections = new HashMap<String, TestResult>(
			4);
	Button emailcertificateBtn, mtakeAnotherTestBtn, datePickBtn, toolTipBtn,
			savePageBtn, downloadCertificate, takeNextTestBtn, SynchDataBtn;
	String mTestResult;

	boolean isTestInProgress = false, addDeficiencyResult = false;
	String mresponseFromserver;

	int mResultId = 0, mainTestResultId = 0;
	boolean isMainTestAdded = false;
	String mServerTestId, mUsertestId_D, mDiagnosisId;
	String mScoreMessage, mDiagnosisMessage;

	String mMainAnswersCount, mMainNoOfQues, mMainResult, mDefCorrectAnsCount,
			mDefNoOfQues, mDefResult;
	static final int DATE_DIALOG_ID = 0;
	double DiscountPercent = 0.0;
	Dialog progresDialog;
	View vwResultDetails, vwResultDetails_Normal;
	String sdCardLocation;
	String resultSuccessMsg = " ", resultFailureMsg = " ", alerMessge = " ";
	Typeface typefaceHelvetica;
	Typeface typefaceHelveticaBold;
	Typeface typefaceKaiti;
	CountDownTimer sixtySecTimer;
	CountDownTimer imageCountDownTimer;
	View mCommonView;
	String mDiscountCode = null;

	// Progress Dialog
	private ProgressDialog pDialog;
	private ProgressBar testProgressBar;
	private Handler progressBarHandler = new Handler();
	private int progressBarStatus = 0;
	private long fileSize = 0;
	private long fileDownloadStatus = 0;
	// Progress dialog type (0 - for Horizontal progress bar)
	public static final int progress_bar_type = 1;

	private CompressTestHandler compressTestContentHandler;
	private ArrayList<CompressTest> compressFailTestList;
	private ArrayList<CompressTest> compressPassTestList;
	// Ajay:
	TextView testConditionTxt;
	RadioGroup testConditionRadioGroup, genderRadioGroup, eyeTestedRadioGroup;
	RadioButton lowLightRadioBtn, otherRadioBtn, maleRadioBtn, femaleRadioBtn,
			odRadioBtn, osRadioBtn, ouRadioBtn, glareRadioBtn;
	EditText testconditionEdt;
	private Boolean otherEditEnable = false;

	// Vishal Added
	private TestContentManager contentManager;
	private Context mContext;
	private int deviceHeight;
	int count = 0;
	PackageInfo pinfo;
	SharedPreferences pref;
	String answerString = "";
	SpyderSDK spdrSDK;
	private long mStartRX = 0;
	private long mStartTX = 0;
	public int current = 0;
	public int total = 7;
	boolean isTestSyncNeeded = false;
	boolean isTestQuestionsSyncNeeded = false;
	boolean isTestAnswerSyncNeeded = false;
	boolean isFirstSync = true;
	boolean isFirstDeficiencyTest = true;
	private int totalNoOfQuestion = 0;
	private int attemptedNoOfQquestion = 0;
	// Ritesh: code for mutiple selection
	private Boolean selectedAnswerCircle = false;
	private Boolean selectedAnswerSquare = false;
	private Boolean selectedAnswerStar = false;
	private final Handler handler = new Handler();

	private void initButtonsParams(boolean isPayNow, String text) {
		Log.d(" Btn  Text", "" + text);
		if (takeTestpayNowParams == null) {
			takeTestpayNowParams = (android.widget.RelativeLayout.LayoutParams) mButtonTakeATest
					.getLayoutParams();
		}
		if (isPayNow) {
			takeTestpayNowParams.height = (int) mContext.getResources()
					.getDimension(R.dimen.pay_bow_button_height);
			takeTestpayNowParams.width = (int) mContext.getResources()
					.getDimension(R.dimen.pay_now_button_width);
			mButtonTakeATest.setText(text);
			mButtonTakeATest.setTextSize(20);
			mButtonTakeATest.setTextColor(Color.WHITE);
			mButtonTakeATest.setBackgroundResource(R.drawable.blue_button);
			mButtonTakeATest.setTag("pay_now_btn");
		} else {
			takeTestpayNowParams.height = (int) mContext.getResources()
					.getDimension(R.dimen.next_btn_height);
			takeTestpayNowParams.width = (int) mContext.getResources()
					.getDimension(R.dimen.next_btn_width);
			mButtonTakeATest.setText(text);
			mButtonTakeATest.setBackgroundResource(R.drawable.next_arrow_btn);
			mButtonTakeATest.setTag("take_test_btn");
		}
		mButtonTakeATest.setLayoutParams(takeTestpayNowParams);
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		try {

			String isversionUpgraded = getIntent().getStringExtra("E");
			Log.e("TakeAtest", "Args" + isversionUpgraded);
			try {
				pinfo = getPackageManager().getPackageInfo(getPackageName(), 0);
			} catch (NameNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			if (isversionUpgraded != null) {
				// Show the dialog and sycn
				if (AndroidUtility.isConnected(TakeATestActivity.this)) {
					alertMustSync = new AlertDialog.Builder(
							TakeATestActivity.this);
					alertMustSync
							.setCancelable(false)
							.setMessage(
									"You Must Sync this Application. It may take few moments, but you will get the most up-to-date tests and information.");

					alertMustSync.setPositiveButton("Ok",
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									dialog.cancel();
									new SynchronizeDataASync(
											TakeATestActivity.this).execute();
									// need to set in sahredpref too.
									pref = getSharedPreferences("pref_ver",
											MODE_PRIVATE);
									Editor edit = pref.edit();
									edit.putString("appVersion",
											pinfo.versionName);
									edit.commit();
								}
							});
					alertMustSync.show();

				} else {
					alertMustSync = new AlertDialog.Builder(
							TakeATestActivity.this);
					alertMustSync.setCancelable(false).setMessage(
							"No internet connectivity");
					alertMustSync.setNegativeButton(
							getString(R.string.ok_text),
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									dialog.cancel();
								}
							});

					alertMustSync.show();
				}

			}
			mContext = TakeATestActivity.this;

			syncReceiver = new SyncActionReceiver();
			AppUtils.registerActionListener(TakeATestActivity.this,
					syncReceiver);
			deviceHeight = AppUtils.getDeviceHeight(mContext);
			contentManager = TestContentManager.getInstance();
			mExecutorService = Executors.newFixedThreadPool(10);
			vwResultDetails = LayoutInflater.from(TakeATestActivity.this)
					.inflate(R.layout.downloadcertificate, null);
			vwResultDetails.setDrawingCacheEnabled(true);
			vwResultDetails.measure(
					MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED),
					MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
			vwResultDetails.layout(0, 0, vwResultDetails.getMeasuredWidth(),
					vwResultDetails.getMeasuredHeight());
			vwResultDetails.buildDrawingCache(true);

			vwResultDetails_Normal = LayoutInflater
					.from(TakeATestActivity.this).inflate(
							R.layout.downloadcertificate_normal, null);
			vwResultDetails_Normal.setDrawingCacheEnabled(true);
			vwResultDetails_Normal.measure(
					MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED),
					MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
			vwResultDetails_Normal.layout(0, 0,
					vwResultDetails.getMeasuredWidth(),
					vwResultDetails.getMeasuredHeight());
			vwResultDetails_Normal.buildDrawingCache(true);

			takeTestActivity = this;
			mtestGroupManager = new GetalltestgroupManager(this);
			mGetAllTestManager = new GetalltestManager(this);
			mGetTestQuestionManager = new GettestquestionManager(this);
			mGetOptionsManager = new GettestanswersManager(this);
			mtestResultManager = new TestResultManager(this);
			diagnosisDetailsManager = new DiagnosisdetailsManager(this);
			mGetAllTestManager = new GetalltestManager(this);
			answersManager_ids = new TestAnswersManager(TakeATestActivity.this);
			typefaceHelvetica = Typeface.createFromAsset(getAssets(),
					"fonts/Helvetica.ttf");
			typefaceHelveticaBold = Typeface.createFromAsset(getAssets(),
					"fonts/Helvetica Bold.ttf");
			progresDialog = new Dialog(TakeATestActivity.this,
					R.style.Theme_Levels);

			setTakeATestDetails();

			spdrSDK = SpyderSDK.sharedInstance();
			spdrSDK.setContext(TakeATestActivity.this);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private CompressInfo compressTestInfo;
	private boolean needToAdd;

	private void getCompressTestData() {
		contentManager.setSelectedTest(mSelectedTest);
		// contentManager.setSelectedTestId( mSelectedTest.testId);
		// contentManager.parseCompressXml(mContext);
		// parseCompressXml();
		// compressTestInfo = compressTestContentHandler.getCompressTestInfo();
		compressTestInfo = contentManager.getCompressedTestInfo(mContext,
				mSelectedTest.testId);

		Log.d("TEST", "compressTestInfo :" + compressTestInfo);

		if (compressTestInfo == null) {
			compressTestInfo = contentManager.getCompressedTestInfo(mContext,
					mSelectedTest.testId);
		}
		if (compressTestInfo != null && mGetAllTestManager != null) {
			compressFailTestList = AppUtils.getNewList(compressTestInfo
					.getCompressItemsList());
			compressPassTestList = AppUtils.getNewList(compressFailTestList);

			needToAdd = mGetAllTestManager
					.isDescedentTestNeeded(mSelectedTest.testId);
			if (needToAdd && compressFailTestList != null
					&& compressFailTestList.size() <= AppConstants.TEST_SIZE) {
				addRemainingTest();
			}
		}
	}

	private void addRemainingTest() {
		boolean protanNeedToAdd = true;
		boolean duetanNeedToAdd = true;
		boolean tritanNeedToAdd = true;
		if (compressFailTestList != null && compressFailTestList.size() > 0) {
			for (CompressTest test : compressFailTestList) {
				if (test.getName().equals(AppConstants.PROTAN_TEST)) {
					protanNeedToAdd = false;
				}
				if (test.getName().equals(AppConstants.DEUTAN_TEST)) {
					duetanNeedToAdd = false;
				}
				if (test.getName().equals(AppConstants.TRITAN_TEST)) {
					// Ajay
					if (totalNoOfQuestion == 0)
						totalNoOfQuestion = mSelectedTest.noOfQuestions;
					totalNoOfQuestion = totalNoOfQuestion
							+ mGetAllTest.get(3).noOfQuestions;
					tritanNeedToAdd = false;
				}
			}
		} else {
			compressFailTestList = new ArrayList<CompressTest>();
		}
		if (protanNeedToAdd) {

			CompressTest remainingCompressTest = new CompressTest();
			remainingCompressTest.setName(AppConstants.PROTAN_TEST);
			remainingCompressTest.setExecuted(false);
			compressFailTestList.add(remainingCompressTest);
			// Ajay : add the no of Question of respective test
			// totalNoOfQuestion=totalNoOfQuestion+mSelectedTest.noOfQuestions;
			DevConfig.writeLog(" creation list for remaining test ",
					"protanNeedToAdd added");
		}
		if (duetanNeedToAdd) {
			CompressTest remainingCompressTest = new CompressTest();
			remainingCompressTest.setExecuted(false);
			remainingCompressTest.setName(AppConstants.DEUTAN_TEST);
			compressFailTestList.add(remainingCompressTest);
			// Ajay : add the no of Question of respective test
			// totalNoOfQuestion=totalNoOfQuestion+mSelectedTest.noOfQuestions;
			DevConfig.writeLog(" creation list for remaining test ",
					"duetanNeedToAdd added");
		}
		if (tritanNeedToAdd) {
			CompressTest remainingCompressTest = new CompressTest();
			remainingCompressTest.setExecuted(false);
			remainingCompressTest.setName(AppConstants.TRITAN_TEST);
			compressFailTestList.add(remainingCompressTest);
			// Ajay : add the no of Question of respective test
			// totalNoOfQuestion=totalNoOfQuestion+mGetAllTest.get(2).noOfQuestions;
			DevConfig.writeLog(" creation list for remaining test ",
					"tritanNeedToAdd added");
		}
	}

	private SyncActionReceiver syncReceiver;

	class SyncActionReceiver extends ActionUpdateListener {
		@Override
		public void onImagesSyncComplete() {
			refreshViews();
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		View focussedView = ((ViewGroup) findViewById(android.R.id.content))
				.getChildAt(0);
		if (focussedView.getId() == R.layout.takeatest) {
			refreshViews();
		}
		resumeVideo();
	}

	private void refreshViews() {
		try {
			setTakeATestDetails();
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (AndroidUtility.isConnected(TakeATestActivity.this)) {
			TestResultManager testResultManager = new TestResultManager(
					TakeATestActivity.this);
			// try {
			// testResultManager.synchronizeAllTestsWithServer();
			// } catch (TestResultException e2) {
			// e2.printStackTrace();
			// }
		}
		// mTestResultSections.put("Section1", null);
		// mTestResultSections.put("Section2", null);
		// mTestResultSections.put("Section3", null);
		// mTestResultSections.put("Section4", null);
		TestSummaryActivity.testsumaryactivity.tTabWidget
				.setVisibility(View.VISIBLE);
	}

	/**
	 * Fetches all the test details and lists them in the interface
	 */
	public void setTakeATestDetails() {
		try {
			setContentView(R.layout.takeatest);
			versionTxt = (TextView) findViewById(R.id.testdesc_txt_version);
			// titleDescTxt = (TextView) findViewById(R.id.testdesc_txt_title);
			creditsTxt = (TextView) findViewById(R.id.creditsTxt);
			mButtonTakeATest = (Button) findViewById(R.id.takeaTestBtn);
			launchColorArrangement = (Button) findViewById(R.id.colorArrangementBtn);
			if (DevConfig.D15_Enabled) {
				launchColorArrangement
						.setOnClickListener(new OnClickListener() {

							@Override
							public void onClick(View v) {
								Intent intent = new Intent(mContext,
										ColorArrangementActivity.class);
								startActivity(intent);
								finish();
							}
						});
			} else {
				launchColorArrangement.setVisibility(View.GONE);
			}
			SynchDataBtn = (Button) findViewById(R.id.syncBtn);
			SynchDataBtn.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					if (AndroidUtility.isConnected(TakeATestActivity.this)) {
						alert = new AlertDialog.Builder(TakeATestActivity.this);
						alert.setCancelable(false)
								.setMessage(
										"Do you want to synchronize the application? It may take few moments, but you will get the most up-to-date tests and information.");
						alert.setNegativeButton("No",
								new DialogInterface.OnClickListener() {
									@Override
									public void onClick(DialogInterface dialog,
											int which) {
										dialog.cancel();
									}
								});
						alert.setPositiveButton("Yes",
								new DialogInterface.OnClickListener() {

									@Override
									public void onClick(DialogInterface dialog,
											int which) {
										dialog.cancel();
										new SynchronizeDataASync(
												TakeATestActivity.this)
												.execute();
										Log.e("mnualSync", "Clicked");
									}
								});
						alert.show();

					} else {
						alert = new AlertDialog.Builder(TakeATestActivity.this);
						alert.setCancelable(false).setMessage(
								"No internet connectivity");
						alert.setNegativeButton(getString(R.string.ok_text),
								new DialogInterface.OnClickListener() {
									@Override
									public void onClick(DialogInterface dialog,
											int which) {
										dialog.cancel();
									}
								});

						alert.show();
					}
				}
			});
			// titleTxt.setTypeface(typefaceHelveticaBold);
			// titleDescTxt.setTypeface(typefaceHelveticaBold);

			// get Version from local storage.
			SharedPreferences verSharedPre = getApplicationContext()
					.getSharedPreferences("ver_pref", Context.MODE_PRIVATE);

			String verString = verSharedPre.getString("versi", "");
			if (verString != null) {
				if (!verString.equalsIgnoreCase("No Records Found")) {
					versionTxt.setText("2."+verString);
				} else {
					versionTxt.setVisibility(View.GONE);
				}
			} else {
				versionTxt.setVisibility(View.GONE);
			}
			/*
			 * if(verString!=null &&
			 * !verString.equalsIgnoreCase("No Records Found")){
			 * versionTxt.setText("V"+verString); }else{
			 * versionTxt.setVisibility(View.GONE); }
			 */
			TestSummaryActivity.testsumaryactivity.tTabWidget
					.setVisibility(View.VISIBLE);
			try {
				getUserPlanArrayList = new ArrayList<Getuserplan>();
				mUserPlanManager = new GetuserplanManager(
						TakeATestActivity.this);
				try {
					unLimitedCredit = "N";
					getUserPlan = mUserPlanManager
							.getSingleGetuserplanWithOutASync(Integer
									.parseInt(BaseUrl.LoginId));
					if (getUserPlan != null) {
						unLimitedCredit = getUserPlan.unlimitedCredit;
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

				if (unLimitedCredit.equalsIgnoreCase("N")) {
					if (getUserPlan != null && getUserPlan.totalCredit > 0)
						creditsTxt.setText(getUserPlan.totalCredit
								+ " Test(s) Credit(s) Remaining ");
					else {
						creditsTxt.setVisibility(View.INVISIBLE);
						// mButtonTakeATest
						// .setBackgroundResource(R.drawable.pay_now_btn);
						initButtonsParams(true, "Pay Now");

						mButtonTakeATest
								.setOnClickListener(new OnClickListener() {
									@Override
									public void onClick(View v) {
										if (AndroidUtility
												.isConnected(TakeATestActivity.this)) {
											TestSummaryActivity.testsumaryactivity.tTabHost
													.setCurrentTab(5);
										} else {
											alert = new AlertDialog.Builder(
													TakeATestActivity.this);
											alert.setCancelable(false)
													.setMessage(
															"No internet connectivity");
											alert.setNegativeButton(
													getString(R.string.ok_text),
													new DialogInterface.OnClickListener() {
														@Override
														public void onClick(
																DialogInterface dialog,
																int which) {
															dialog.cancel();
														}
													});

											alert.show();
										}
									}
								});
					}
				} else if (unLimitedCredit.equalsIgnoreCase("Y"))
				/** means user has unlimited credits. */
				{
					creditsTxt.setVisibility(View.INVISIBLE);
				}

				mGetAllTestManager = new GetalltestManager(
						TakeATestActivity.this) {
					@SuppressWarnings("unchecked")
					@Override
					public void handleMessage(Message msg) {
						if (msg.getData()
								.getString("Operation")
								.equals(EOperation.GET_ALL_GETALLTESTS
										.toString())) {
							mGetAllTest = new ArrayList<Getalltest>();
							mGetAllTest.addAll((ArrayList<Getalltest>) msg.obj);
							if (mGetAllTest.size() != 0) {
								try {
									setExpandableListViewPaid();
								} catch (Exception e) {
									e.printStackTrace();
								}
							}
						}
					}
				};
				mGetAllTestManager.getAllGetalltest();
			} catch (GetalltestException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void showNoNetworkDialog() {
		alert = new AlertDialog.Builder(TakeATestActivity.this);
		alert.setCancelable(false).setMessage("No internet connectivity");
		alert.setNegativeButton(getString(R.string.ok_text),
				new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.cancel();
						setTakeATestDetails();
					}
				});

		alert.show();
	}

	/**
	 * Event to handle take a test
	 * 
	 * @param v
	 */
	@SuppressLint("ShowToast")
	public void onTakeATestClicked(View v) {
		try {
			// Count initialized for next test
			mCorrectAnsCount = 0;
			mWrongAnswers = 0;
			addDeficiencyResult = false;
			if (getUserPlan != null && mButtonTakeATest.getTag() != null
					&& getUserPlan.unlimitedCredit.equalsIgnoreCase("Y")
					&& mButtonTakeATest.getTag().equals("pay_now_btn")) {
				flagForBackPress = 1;
				showRedeemDiscountDialog();
			} else {
				View vwDetails = LayoutInflater.from(TakeATestActivity.this)
						.inflate(R.layout.taketestimmediatly, null);
				setContentView(vwDetails);
				flagForBackPress = 1;
				testNameTxt = (TextView) vwDetails
						.findViewById(R.id.TestNameTxt);
				frstnameTxt = (TextView) vwDetails
						.findViewById(R.id.frstNameTxt);
				lastnameTxt = (TextView) vwDetails
						.findViewById(R.id.lastNameTxt);
				birthdayTxt = (TextView) vwDetails
						.findViewById(R.id.birthdateTxt);
				identifierTxt = (TextView) vwDetails
						.findViewById(R.id.identifierTxt);
				empAddressTxt = (TextView) vwDetails
						.findViewById(R.id.emailTxt);
				frstnameEdt = (EditText) vwDetails
						.findViewById(R.id.frstName_edit);
				lastnameEdt = (EditText) vwDetails
						.findViewById(R.id.las5tName_edit);
				birthdayEdt = (EditText) vwDetails
						.findViewById(R.id.birthDate_edit);
				identifierEdt = (EditText) vwDetails
						.findViewById(R.id.identifier_edit);
				empAddressEdt = (EditText) vwDetails
						.findViewById(R.id.email_edit);
				datePickBtn = (Button) vwDetails
						.findViewById(R.id.datePickEdit);

				// Ajay
				testConditionTxt = (TextView) findViewById(R.id.testConditionRadioGroupTxt);
				testConditionRadioGroup = (RadioGroup) findViewById(R.id.testConditionsRadiogroup);
				genderRadioGroup = (RadioGroup) findViewById(R.id.genderRadiogroup);
				eyeTestedRadioGroup = (RadioGroup) findViewById(R.id.eyeTestedRadiogroup);
				lowLightRadioBtn = (RadioButton) findViewById(R.id.lowLightRadiobutton);
				glareRadioBtn = (RadioButton) findViewById(R.id.glareRadiobutton);

				otherRadioBtn = (RadioButton) findViewById(R.id.otherRadiobutton);
				maleRadioBtn = (RadioButton) findViewById(R.id.maleRadioButton);
				femaleRadioBtn = (RadioButton) findViewById(R.id.femaleradioButton);
				osRadioBtn = (RadioButton) findViewById(R.id.osRadiobutton);
				odRadioBtn = (RadioButton) findViewById(R.id.odRadiobutton);
				ouRadioBtn = (RadioButton) findViewById(R.id.ouRadiobutton);
				testconditionEdt = (EditText) findViewById(R.id.test_condition_edit);

				toolTipBtn = (Button) vwDetails.findViewById(R.id.tooltipBtn);
				toolTipBtn.setVisibility(View.INVISIBLE);

				if (DevConfig.HARDCODED_USER_TEST_INFO_ENABLED) {
					frstnameEdt.setText("Sam");
					lastnameEdt.setText("Kesavan");
					birthdayEdt.setText("34");
				}

				SpannableString text1 = new SpannableString("First Name *");
				SpannableString text2 = new SpannableString("Last Name *");
				SpannableString text3 = new SpannableString("Age  ");
				SpannableString text6 = new SpannableString("Test Condition *");
				// SpannableString text3 = new SpannableString(
				// "BirthDay ( MM/DD/YYYY ) ( Optional )");
				// SpannableString text3 = new
				// SpannableString("Age (Optional)");
				// SpannableString text4 = new SpannableString(
				// "Optional Identifier");
				// SpannableString text5 = new SpannableString(
				// "Email for results report");

				String text4 = "Patient ID";
				String text5 = "Email for results report";

				text1.setSpan(
						new ForegroundColorSpan(Color.parseColor("#FF0000")),
						11, 12, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
				text2.setSpan(
						new ForegroundColorSpan(Color.parseColor("#FF0000")),
						10, 11, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
				text3.setSpan(
						new ForegroundColorSpan(Color.parseColor("#FF0000")),
						4, 5, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
				text6.setSpan(
						new ForegroundColorSpan(Color.parseColor("#FF0000")),
						15, 16, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
				alert = new AlertDialog.Builder(TakeATestActivity.this);
				final Toast toast = Toast.makeText(TakeATestActivity.this,
						"Enter Email Address", Toast.LENGTH_LONG);

				// Ajay
				testConditionRadioGroup
						.setOnCheckedChangeListener(new OnCheckedChangeListener() {
							public void onCheckedChanged(RadioGroup group,
									int checkedId) {
								// TODO Auto-generated method stub
								if (lowLightRadioBtn.isChecked()) {
									otherEditEnable = false;
									testconditionEdt
											.setVisibility(View.INVISIBLE);
								} else if (glareRadioBtn.isChecked()) {
									otherEditEnable = false;
									testconditionEdt
											.setVisibility(View.INVISIBLE);
								} else if (otherRadioBtn.isChecked()) {
									otherEditEnable = true;
									testconditionEdt
											.setVisibility(View.VISIBLE);
									testconditionEdt.requestFocus();
								}
							}
						});
				toolTipBtn.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View vws) {
						if (vws == toolTipBtn) {
							toast.show();
						} else {
							toast.cancel();
						}
					}
				});

				testNameTxt.setText("" + mSelectedTest.title);
				TestContentManager.getInstance().setTestName(
						"" + mSelectedTest.title);
				frstnameTxt.setText(text1, BufferType.SPANNABLE);
				lastnameTxt.setText(text2, BufferType.SPANNABLE);
				birthdayTxt.setText(text3, BufferType.SPANNABLE);
				identifierTxt.setText(text4);
				empAddressTxt.setText(text5);
				testConditionTxt.setText(text6, BufferType.SPANNABLE);

				Button continueButton = (Button) vwDetails
						.findViewById(R.id.next_button_view);
				Button CancelBtn = (Button) vwDetails
						.findViewById(R.id.cross_view);
				CancelBtn.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View v) {
						try {
							InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
							imm.hideSoftInputFromWindow(
									frstnameEdt.getWindowToken(), 0);
							setTakeATestDetails();
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				});

				mTestInfoManager = new TestInfoManager(TakeATestActivity.this) {
					@Override
					public void handleMessage(Message msg) {
						if (msg.getData()
								.getString("Operation")
								.equals(TestInfoManager.EOperation.ADD_TEST_INFO
										.toString())) {
							mTestInfoId = Integer.parseInt(msg.obj.toString());
						}
					};
				};

				continueButton.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View v) {
						if (otherEditEnable) {
							testSectionCount = 0;
							if (!frstnameEdt.getText().toString().equals("")
									&& !lastnameEdt.getText().toString()
											.equals("")
									&& !birthdayEdt.getText().toString()
											.equals("0")
									&& !testconditionEdt.getText().toString()
											.equals("")) {
								if (!empAddressEdt.getText().toString()
										.equals("")) {
									if (!AndroidUtility
											.isEmailValid(empAddressEdt
													.getText().toString())) {
										String str = "Please Enter Valid Email Id";
										alert.setCancelable(false).setMessage(
												str);
										alert.setNegativeButton(
												getString(R.string.ok_text),
												new DialogInterface.OnClickListener() {
													@Override
													public void onClick(
															DialogInterface dialog,
															int which) {
														dialog.cancel();
													}
												});

										alert.show();
										return;

									}
								}
								if (TestContentManager.getInstance()
										.isD15DirectStarted()) {
									collectAndAddTestDetailsInfo();
									contentManager
											.setSelectedTest(mSelectedTest);
									Intent intent = new Intent(
											TakeATestActivity.this,
											ColorArrangementActivity.class);
									startActivity(intent);
									isColorArrangementLaunched = true;
									finish();
								} else {
									showBeginTest();
								}
							} else {
								alerMessge = "First name missing.";
								if (frstnameEdt.getText().toString()
										.equalsIgnoreCase("")) {
									alerMessge = "First name missing.";
								} else if (lastnameEdt.getText().toString()
										.equalsIgnoreCase("")) {
									alerMessge = "Last name missing.";
								} else if (birthdayEdt.getText().toString()
										.equalsIgnoreCase("0")) {
									alerMessge = "Age Can Not Be Zero.";
								} else if (testconditionEdt.getText()
										.toString().equalsIgnoreCase("")
										&& otherEditEnable) {
									alerMessge = "Please Enter the Other test Condition.";
								} else if (testconditionEdt.getText()
										.toString().equalsIgnoreCase("")) {
									alerMessge = "Please Enter the Other test Condition.";
								}

								alert.setCancelable(false).setMessage(
										alerMessge);
								alert.setNegativeButton(
										getString(R.string.ok_text),
										new DialogInterface.OnClickListener() {
											@Override
											public void onClick(
													DialogInterface dialog,
													int which) {
												dialog.cancel();
											}
										});

								alert.show();
							}
						} else {

							testSectionCount = 0;
							if (!frstnameEdt.getText().toString().equals("")
									&& !lastnameEdt.getText().toString()
											.equals("")
									&& !birthdayEdt.getText().toString()
											.equals("0")) {
								if (!empAddressEdt.getText().toString()
										.equals("")) {
									if (!AndroidUtility
											.isEmailValid(empAddressEdt
													.getText().toString())) {
										String str = "Please Enter Valid Email Id";
										alert.setCancelable(false).setMessage(
												str);
										alert.setNegativeButton(
												getString(R.string.ok_text),
												new DialogInterface.OnClickListener() {
													@Override
													public void onClick(
															DialogInterface dialog,
															int which) {
														dialog.cancel();
													}
												});

										alert.show();
										return;

									}
								}
								if (TestContentManager.getInstance()
										.isD15DirectStarted()) {
									collectAndAddTestDetailsInfo();
									contentManager
											.setSelectedTest(mSelectedTest);
									Intent intent = new Intent(
											TakeATestActivity.this,
											ColorArrangementActivity.class);
									startActivity(intent);
									isColorArrangementLaunched = true;
									finish();
								} else {
									showBeginTest();
								}
							} else {
								alerMessge = "First name missing.";
								if (frstnameEdt.getText().toString()
										.equalsIgnoreCase("")) {
									alerMessge = "First name missing.";
								} else if (lastnameEdt.getText().toString()
										.equalsIgnoreCase("")) {
									alerMessge = "Last name missing.";
								} else if (birthdayEdt.getText().toString()
										.equalsIgnoreCase("0")) {
									alerMessge = "Age Can Not Be Zero.";
								}

								alert.setCancelable(false).setMessage(
										alerMessge);
								alert.setNegativeButton(
										getString(R.string.ok_text),
										new DialogInterface.OnClickListener() {
											@Override
											public void onClick(
													DialogInterface dialog,
													int which) {
												dialog.cancel();
											}
										});

								alert.show();
							}

						}
					}
				});

				frstnameEdt.setFocusable(true);
				frstnameEdt.requestFocus();
				InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
				imm.showSoftInput(frstnameEdt, InputMethodManager.SHOW_IMPLICIT);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void showBeginTest() {
		isCompressTestStarted = false;
		testSectionCount = 0;
		try {
			getCompressTestListFromDB();
		} catch (GetalltestException e3) {
			e3.printStackTrace();
			Log.e("TEST", "Exception in getting compress test from DB");
		}
		getCompressTestData();
		resultSuccessMsg = mSelectedTest.messagePass;
		resultFailureMsg = mSelectedTest.messageFail;
		mMainSelectedTest = mSelectedTest;

		View SectionDetails = LayoutInflater.from(TakeATestActivity.this)
				.inflate(R.layout.begintest, null);
		setContentView(SectionDetails);
		// Ajay : video View is removed
		// mVideoView = (VideoView) SectionDetails.findViewById(R.id.videoview);
		// playVideo();

		// Ajay:Changes for Instructions Layout
		if (mSelectedTest.testType.equalsIgnoreCase("F")) {
			aboutus_linLay = SectionDetails.findViewById(R.id.aboutus_linLay);
			beginTestBtn = (Button) SectionDetails.findViewById(R.id.beginBtn);
			closeTestBtn = (Button) SectionDetails.findViewById(R.id.CloseBtn);
			timer_textview = (TextView) SectionDetails
					.findViewById(R.id.timer_textview);
			timer_textview1 = (TextView) SectionDetails
					.findViewById(R.id.timer_textview1);
		} else {
			aboutus_linLay = SectionDetails
					.findViewById(R.id.adultaboutus_linLay);
			beginTestBtn = (Button) SectionDetails.findViewById(R.id.beginBtn1);
			closeTestBtn = (Button) SectionDetails.findViewById(R.id.CloseBtn1);
			timer_textview = (TextView) SectionDetails
					.findViewById(R.id.timer_textview2);
			timer_textview1 = (TextView) SectionDetails
					.findViewById(R.id.timer_textview3);
		}

		aboutus_linLay.setVisibility(View.VISIBLE);
		timerCountSeconds = AppConstants.TEST_STARTED_TIME;
		isTimerStarted = false;
		timer_root_layout = SectionDetails.findViewById(R.id.timer_root_layout);
		timer_root_layout.setVisibility(View.GONE);

		closeTestBtn.setVisibility(View.VISIBLE);
		closeTestBtn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				setTakeATestDetails();
			}
		});

		String timerString = "";

		if (!TextUtils.isEmpty(mSelectedTest.plateDurations + "")) {
			if (mSelectedTest.plateDurations > 9) {
				timerString = timerString + mSelectedTest.plateDurations;
			} else {
				timerString = timerString + mSelectedTest.plateDurations;
			}
		}
		timer_textview.setText(timerString);
		timer_textview1.setText(timerString);
		/*
		 * TextView timer_textview1 = (TextView) SectionDetails
		 * .findViewById(R.id.instr_textview5);
		 * timer_textview1.setText(String.format(
		 * getString(R.string.begin_instr_text5),
		 * mSelectedTest.plateDurations));
		 */

		beginTestBtn.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				stopVideo();
				isDeficiencyTestStarted = false;
				processBeginButton();
			}
		});
	}

	private VideoView mVideoView;
	private void playVideo() {
		try {
			if (mVideoView != null) {
				final Uri uri = Uri.parse("android.resource://"
						+ mContext.getPackageName() + "/"
						+ R.raw.test_instruction_video);
				mVideoView.setVideoURI(uri);
				mVideoView.setMediaController(null);

				mVideoView
						.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
							@Override
							public void onPrepared(MediaPlayer mp) {
								mp.setLooping(true);
								mVideoView.requestFocus();
								mVideoView.start();
								mp.setVolume(0, 0);
							}
						});

				mVideoView.setOnErrorListener(new OnErrorListener() {

					@Override
					public boolean onError(MediaPlayer mp, int what, int extra) {
						alert = new AlertDialog.Builder(TakeATestActivity.this);
						alert.setCancelable(false).setMessage(
								getString(R.string.video_error_message));
						alert.setNegativeButton(getString(R.string.ok_text),
								new DialogInterface.OnClickListener() {
									@Override
									public void onClick(DialogInterface dialog,
											int which) {
										dialog.cancel();
										stopVideo();
									}
								});
						alert.show();
						return true;
					}
				});

				mVideoView.setOnCompletionListener(new OnCompletionListener() {

					@Override
					public void onCompletion(MediaPlayer mp) {
						if (mp != null) {
							mp.reset();
							mVideoView.setVideoURI(uri);
							mVideoView.start();
						}
					}
				});
			}
		} catch (Exception e) {

		}
	}

	@Override
	protected void onPause() {
		super.onPause();
		pauseVideo();
	}

	private void resumeVideo() {
		if (mVideoView != null && isVideoPlying) {
			mVideoView.resume();
		}
	}

	private boolean isVideoPlying = false;

	private void pauseVideo() {
		if (mVideoView != null && mVideoView.isPlaying()) {
			mVideoView.pause();
			isVideoPlying = true;
		}
	}

	private void stopVideo() {
		if (mVideoView != null) {
			mVideoView.stopPlayback();
			isVideoPlying = false;
		}
	}

	private void processBeginButton() {
		isTimerNeeded = true;
		isTimerStarted = true;
		if (isDeficiencyTestStarted) {
			processBeginDeficiencyTest(isGeneral);
		} else {
			processBeginTestMethod();
		}
	}

	int timerCountSeconds = AppConstants.TEST_STARTED_TIME;
	private View timer_root_layout;
	private View timerCircleLayout;
	private View aboutus_linLay;
	private boolean isTimerStarted;
	private boolean isDeficiencyTestStarted = false;
	private boolean isGeneral = false;
	private boolean isTimerNeeded = false;

	private void updateTimerContents() {
		handler.post(new Runnable() {
			public void run() {
				TextView timerTextview = (TextView) timer_root_layout
						.findViewById(R.id.timer_count_textview);
				TextView secondTextview = (TextView) timer_root_layout
						.findViewById(R.id.seconds_textview1);
				timerTextview.setText(String.valueOf(timerCountSeconds));
				Log.d("test", "counter : " + String.valueOf(timerCountSeconds));
				if (timerCountSeconds > 1) {
					secondTextview.setText("seconds");
				} else {
					secondTextview.setText("second");
				}
			}
		});
	}

	private void processBeginTestMethod() {
		mUserPlanManager = new GetuserplanManager(TakeATestActivity.this);
		if (getUserPlan.unlimitedCredit.equalsIgnoreCase("N")) {
			if (getUserPlan.totalCredit != 0) {
				try {
					mUserPlanManager.updateGetuserplanTotalCredits(
							getUserPlan.planId, getUserPlan.totalCredit - 1);
				} catch (GetuserplanException e2) {
					e2.printStackTrace();
				}
			}

			InsertUserPlanIntoServer(null);
		}
		// initialize these
		// parameters for
		// next test
		mCurrentDeficiencyTest = 0;
		mSelectedOption = -1;
		mTestResultSections.clear();
		mTestAnswerIds = new ArrayList<Integer>();
		collectAndAddTestDetailsInfo();
		mGetTestQuestionManager = new GettestquestionManager(
				TakeATestActivity.this) {
			@SuppressWarnings("unchecked")
			@Override
			public void handleMessage(Message msg) {

				mGetTestQuestion = new ArrayList<Gettestquestion>();
				if (msg.getData().getString("Operation")
						.equals(EOperation.GET_ALL_GETTESTQUESTIONS.toString())) {
					mGetTestQuestion
							.addAll((ArrayList<Gettestquestion>) msg.obj);
					if (contentManager
							.getResultSection(AppConstants.GENERAL_TEST) == null) {
						contentManager
								.setTestStarted(TestContentManager.GENERAL_TEST);
						contentManager.setTestQusetionsList(
								AppConstants.GENERAL_TEST, mGetTestQuestion);
					}

					// Check
					// if
					// the
					// random
					// questions
					// is
					// Yes.
					if (mSelectedTest.randomQuesOrder.equals("Y")) {
						ArrayList<Gettestquestion> temp = new ArrayList<Gettestquestion>();
						for (int i = mGetTestQuestion.size() - 1; i >= 0; i--) {
							if (mGetTestQuestion.get(i).status.equals("A"))
								temp.add(mGetTestQuestion.remove(i));
							else
								break;
						}
						Collections.shuffle(mGetTestQuestion);
						for (int i = temp.size() - 1; i >= 0; i--) {
							mGetTestQuestion.add(temp.get(i));
						}
					}
					if (mGetTestQuestion.size() != 0) {
						isTestInProgress = true;
						showQuestion(mGetTestQuestion.size() - 1);
					} else {
						Toast.makeText(TakeATestActivity.this, "No Questions.",
								Toast.LENGTH_SHORT).show();
					}
				}
			}
		};
		try {
			mGetTestQuestionManager.getAllGettestquestion(mSelectedTest.testId);
		} catch (GettestquestionException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 
	 */
	private void collectAndAddTestDetailsInfo() {
		testinfo = new TestInfo();
		testinfo.user_id = Integer.parseInt(BaseUrl.LoginId);
		testinfo.test_id = mSelectedTest.testId;
		testinfo.birthday = birthdayEdt.getText().toString();
		testinfo.identifier = identifierEdt.getText().toString();
		testinfo.fname = frstnameEdt.getText().toString();
		testinfo.lname = lastnameEdt.getText().toString();
		testinfo.employee_email = empAddressEdt.getText().toString();
		testinfo.isDeleted = "F";
		mEmail = testinfo.employee_email;
		testinfo.lname = lastnameEdt.getText().toString();
		testinfo.employee_email = empAddressEdt.getText().toString();
		mTestTakenDate = BaseUrl.getCurrentDatetime();

		testinfo.created_date = mTestTakenDate;
		// Ajay:changes
		if (lowLightRadioBtn.isChecked() == true) {
			testinfo.testcondition = "Low Light";
		}
		if (glareRadioBtn.isChecked() == true) {
			testinfo.testcondition = "Bright Light";
		}
		if (otherRadioBtn.isChecked() == true) {
			testinfo.testcondition = testconditionEdt.getText().toString();
		}
		if (maleRadioBtn.isChecked() == true) {
			testinfo.gender = "Male";
		} else if (femaleRadioBtn.isChecked() == true) {
			testinfo.gender = "Female";
		} else {
			testinfo.gender = "";
		}
		if (odRadioBtn.isChecked() == true) {
			testinfo.eyetested = "OD";
		} else if (osRadioBtn.isChecked() == true) {
			testinfo.eyetested = "OS";
		} else if (ouRadioBtn.isChecked() == true) {
			testinfo.eyetested = "OU";
		} else {
			testinfo.eyetested = "";
		}

		try {
			mTestInfoManager.addTestInfo(testinfo);
		} catch (TestInfoException e1) {
			e1.printStackTrace();
		}
	}

	/**
	 * 
	 */
	EditText discountCodeEdit;
	String discountCode;

	/**
	 * 
	 */
	private void showRedeemDiscountDialog() {
		try {
			if (AndroidUtility.isConnected(getApplicationContext())) {
				final Dialog discountDialog = new Dialog(
						TakeATestActivity.this, R.style.Theme_Levels_Redeem);
				WindowManager.LayoutParams params = progresDialog.getWindow()
						.getAttributes();
				params.width = WindowManager.LayoutParams.WRAP_CONTENT;
				params.height = WindowManager.LayoutParams.WRAP_CONTENT;
				params.dimAmount = 0.9f;
				progresDialog.getWindow().addFlags(
						WindowManager.LayoutParams.FLAG_DIM_BEHIND);
				progresDialog.getWindow().setAttributes(params);
				discountDialog.getWindow().setBackgroundDrawable(
						new ColorDrawable(android.graphics.Color.TRANSPARENT));
				discountDialog.getWindow().setGravity(Gravity.CENTER_VERTICAL);
				View dialogLayout = TakeATestActivity.this.getLayoutInflater()
						.inflate(R.layout.redeemdiscount, null);
				discountDialog.setContentView(dialogLayout);
				discountDialog.show();

				InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
				imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);

				discountDialog.getWindow().setSoftInputMode(
						WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);

				discountCodeEdit = (EditText) dialogLayout
						.findViewById(R.id.discountEdit);
				discountCodeEdit.setText("");
				Button makePayBtn = (Button) dialogLayout
						.findViewById(R.id.continueBtn);
				closeBtn = (Button) dialogLayout.findViewById(R.id.CloseBtn);
				closeBtn.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
						imm.hideSoftInputFromWindow(
								discountCodeEdit.getWindowToken(), 0);
						discountDialog
								.getWindow()
								.setSoftInputMode(
										WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
						discountDialog.dismiss();
					}
				});
				redeemBtn = (Button) dialogLayout.findViewById(R.id.redeemBtn);
				redeemBtn.setOnClickListener(new OnClickListener() {
					@SuppressLint("NewApi")
					@Override
					public void onClick(View v) {
						discountCode = discountCodeEdit.getText().toString()
								.trim();
						if (!discountCode.equalsIgnoreCase(" ")
								&& !discountCode.isEmpty()
								&& !discountCode.trim().isEmpty()) {
							redeemBtn.setEnabled(false);
							redeemCodeXMLHandler.discount = null;
							redeemCodeXMLHandler.result = null;
							RedeemDiscountFromWeb(discountCodeEdit.getText()
									.toString());
							InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
							imm.hideSoftInputFromWindow(
									discountCodeEdit.getWindowToken(), 0);
							discountDialog
									.getWindow()
									.setSoftInputMode(
											WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
							alert = new AlertDialog.Builder(
									TakeATestActivity.this);
							String str = redeemCodeXMLHandler.result;
							if (str.equalsIgnoreCase("Success")) {
								str = "Your Discount  is "
										+ redeemCodeXMLHandler.discount;
							}
							alert.setCancelable(false).setMessage(str);
							alert.setNegativeButton(
									getString(R.string.ok_text),
									new DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {
											dialog.cancel();

											if (redeemCodeXMLHandler.discount != null) {
												redeemBtn.setEnabled(true);
												discountDialog.cancel();
												if (redeemCodeXMLHandler.discount
														.equalsIgnoreCase("100.00%")) {
													InsertUserPlanIntoServer(discountCode);
													InsertSingleTestPaymentInfo(
															mSelectedTest.testPrice,
															discountCode,
															mSelectedTest.testId);
													if (InsertSinglePaymentInfoXMLHandler.result
															.equalsIgnoreCase("Success")) {
														getalltestMngr
																.updateGetAllTestWhere(
																		"buy",
																		"N",
																		Integer.toString(mSelectedTest.testId));
														setTakeATestDetails();
														TestSummaryActivity.testsumaryactivity.tTabHost
																.setCurrentTab(0);
													}

													else {
														alert = new AlertDialog.Builder(
																TakeATestActivity.this);
														alert.setCancelable(false);
														if (!AndroidUtility
																.isConnected(TakeATestActivity.this)) {
															alert.setMessage("No internet connectivity.");
														} else {
															alert.setMessage(InsertSinglePaymentInfoXMLHandler.result);
														}
														alert.setNegativeButton(
																getString(R.string.ok_text),
																new DialogInterface.OnClickListener() {
																	@Override
																	public void onClick(
																			DialogInterface dialog,
																			int which) {
																		dialog.cancel();
																	}
																});

														alert.show();
													}
												} else {
													String discount = redeemCodeXMLHandler.discount;
													if (discount.contains("%")) {
														discount = discount
																.replace("%",
																		"");
														DiscountPercent = Double
																.parseDouble(mSelectedTest.testPrice)
																- ((Double
																		.parseDouble(discount) * Double
																		.parseDouble(mSelectedTest.testPrice)) / 100);
														InsertPaymentDetails();
													} else if (Double
															.parseDouble(discount) > Double
															.parseDouble(mSelectedTest.testPrice)) {
														InsertUserPlanIntoServer(discountCode);
														InsertSingleTestPaymentInfo(
																mSelectedTest.testPrice,
																discountCode,
																mSelectedTest.testId);
														if (InsertSinglePaymentInfoXMLHandler.result
																.equalsIgnoreCase("Success")) {
															getalltestMngr
																	.updateGetAllTestWhere(
																			"buy",
																			"N",
																			Integer.toString(mSelectedTest.testId));
															setTakeATestDetails();
															TestSummaryActivity.testsumaryactivity.tTabHost
																	.setCurrentTab(1);
														}

														else {
															alert = new AlertDialog.Builder(
																	TakeATestActivity.this);
															alert.setCancelable(false);
															if (!AndroidUtility
																	.isConnected(TakeATestActivity.this)) {
																alert.setMessage("No internet connectivity.");
															} else {
																alert.setMessage(InsertSinglePaymentInfoXMLHandler.result);
															}
															alert.setNegativeButton(
																	getString(R.string.ok_text),
																	new DialogInterface.OnClickListener() {
																		@Override
																		public void onClick(
																				DialogInterface dialog,
																				int which) {
																			dialog.cancel();
																		}
																	});

															alert.show();
														}
													} else {
														discount = discount
																.replace("$",
																		"");
														DiscountPercent = Double
																.parseDouble(mSelectedTest.testPrice)
																- (Double
																		.parseDouble(discount));
														InsertPaymentDetails();
													}

												}
											} else {
												redeemBtn.setEnabled(true);
												discountCodeEdit.setText("");
											}
										}
									});

							alert.show();
						} else {
							redeemBtn.setEnabled(true);
							alert = new AlertDialog.Builder(
									TakeATestActivity.this);
							alert.setCancelable(false).setMessage(
									"Enter Discount Code");
							alert.setNegativeButton(
									getString(R.string.ok_text),
									new DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {
											dialog.cancel();
										}
									});
							alert.show();
						}
					}

				});
				makePayBtn.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View v) {
						discountCode = discountCodeEdit.getText().toString()
								.trim();
						DiscountPercent = Double
								.parseDouble(mSelectedTest.testPrice);

						discountDialog.cancel();
						InsertPaymentDetails();

					}
				});
			} else {
				AlertDialog.Builder alert = new AlertDialog.Builder(
						TakeATestActivity.this);
				alert.setCancelable(false).setMessage(
						"No internet connectivity.");
				alert.setNegativeButton(getString(R.string.ok_text),
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.cancel();
							}
						});
				alert.show();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * @param discountCode
	 */
	private void RedeemDiscountFromWeb(String discountCode) {
		URL sourceUrl;
		try {
			sourceUrl = new URL(BaseUrl.baseurl
					+ "redeemCode.php?redeemCode.phpuser_id=" + BaseUrl.LoginId
					+ "&discount_code=" + discountCode);
			SAXParserFactory mSAXParserFactory = SAXParserFactory.newInstance();
			SAXParser mSAXParser = mSAXParserFactory.newSAXParser();
			XMLReader mXMLReader = mSAXParser.getXMLReader();

			redeemCodeXMLHandler xmlHandler = new redeemCodeXMLHandler();
			mXMLReader.setContentHandler(xmlHandler);
			mXMLReader.parse(new InputSource(sourceUrl.openStream()));
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 
	 */
	private void InsertUserPlanIntoServer(final String DiscountCode) {
		GetuserplanManager muserPlanManager = new GetuserplanManager(
				TakeATestActivity.this) {
			public void handleMessage(Message msg) {
				if (msg.getData().getString("Operation")
						.equals(EOperation.GET_SINGLE_GETUSERPLAN.toString())) {
					getUserPlan = (Getuserplan) msg.obj;
					if (getUserPlan != null) {
						InsertCreditInfoInServer(getUserPlan.planId,
								String.valueOf(getUserPlan.totalCredit),
								getUserPlan.unlimitedCredit,
								getUserPlan.expiryDate, DiscountCode);
					}
				}
			};
		};
		try {
			muserPlanManager.getSingleGetuserplan(Integer
					.parseInt(BaseUrl.LoginId));
		} catch (NumberFormatException e) {
			e.printStackTrace();
		} catch (GetuserplanException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * @param mtestPrice
	 * @param mdiscountCode
	 * @param mtestId
	 */
	public void InsertSingleTestPaymentInfo(String mtestPrice,
			String mdiscountCode, int mtestId) {
		URL sourceUrl;
		try {
			sourceUrl = new URL(BaseUrl.baseurl
					+ "insertSingleTestPaymentInfo.php?amount=" + mtestPrice
					+ "&user_id=" + BaseUrl.LoginId + "&discount_code="
					+ mdiscountCode + "&test_id=" + mtestId);
			SAXParserFactory mSAXParserFactory = SAXParserFactory.newInstance();
			SAXParser mSAXParser = mSAXParserFactory.newSAXParser();
			XMLReader mXMLReader = mSAXParser.getXMLReader();

			InsertSinglePaymentInfoXMLHandler xmlHandler = new InsertSinglePaymentInfoXMLHandler();
			mXMLReader.setContentHandler(xmlHandler);
			mXMLReader.parse(new InputSource(sourceUrl.openStream()));
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * @param mplanid
	 * @param totalcredits
	 * @param unLimitedcredits
	 * @param expirydate
	 * @param discountCode
	 */
	public void InsertCreditInfoInServer(int mplanid, String totalcredits,
			String unLimitedcredits, String expirydate, String discountCode) {
		URL sourceUrl;
		try {
			sourceUrl = new URL(BaseUrl.baseurl
					+ "insertCreditInfo.php?user_id=" + BaseUrl.LoginId
					+ "&plan_id=" + mplanid + "&total_credit=" + totalcredits
					+ "&unlimited_credit=" + unLimitedcredits + "&dis_code_id="
					+ discountCode + "&create_date=" + expirydate);
			SAXParserFactory mSAXParserFactory = SAXParserFactory.newInstance();
			SAXParser mSAXParser = mSAXParserFactory.newSAXParser();
			XMLReader mXMLReader = mSAXParser.getXMLReader();

			InsertCreditInfoXMLHandler xmlHandler = new InsertCreditInfoXMLHandler();
			mXMLReader.setContentHandler(xmlHandler);
			mXMLReader.parse(new InputSource(sourceUrl.openStream()));
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		}

	}
	Button payNowBtn;
	Spinner cardTypeSpinner, expMonthSpinner, expYearSpinner;
	EditText cardNumber, cvvCode;
	RadioGroup paymentModeRadioGroup;
	RadioButton creditCardBtn, payPalBtn;
	TextView planStatusTxt, chooseInfoTxt, makePayTitleTxt;
	LinearLayout creditCardLinLay, paypalLinLay;
	String cardTypestr, expMonthStr, expYearstr, cardNoStr, CvvCodeStr,
			planTitle, CreditsTxt, serverResponse;
	ArrayList<String> cardType = new ArrayList<String>();
	ArrayList<String> expirMonth = new ArrayList<String>();
	ArrayList<String> expirYear = new ArrayList<String>();
	CheckoutButton mLaunchPayPalButton;
	Getuserplan mGetuserplan;
	GetuserplanManager userPlanmanager, muserPlanManager;
	LinearLayout mContentLinearLayout, mLoadingLinearLayout;
	GetalltestManager getalltestMngr = new GetalltestManager(this, 0);

	/**
	 * 
	 */
	/*
	 * public void onViewClickHandler(View view){ switch (view.getId()) { case
	 * R.id.cross_view_makepay:
	 * Toast.makeText(TakeATestActivity.this,"Cross Clicked", 1000).show();
	 * Log.e("Cross","Clicked"); break;
	 * 
	 * default : break; }
	 * 
	 * }
	 */
	private void InsertPaymentDetails() {
		try {
			GetallplanManager getallplanManager = new GetallplanManager(
					getApplicationContext());
			Getallplan getallplan = new Getallplan();
			try {
				getallplan = getallplanManager.getSinglePlan(String
						.valueOf(getUserPlan.planId));
				planTitle = getallplan.title;
				CreditsTxt = getallplan.creditLimit;
			} catch (GetallplanException e) {
				e.printStackTrace();
			}

			cardType.add("Select Card Type");
			cardType.add("American Express");
			cardType.add("Discover");
			cardType.add("Master Card");
			cardType.add("VISA");

			expirMonth = new ArrayList<String>(Arrays.asList(getResources()
					.getStringArray(R.array.Month)));
			expirYear = new ArrayList<String>(Arrays.asList(getResources()
					.getStringArray(R.array.Year)));

			View vw = LayoutInflater.from(TakeATestActivity.this).inflate(
					R.layout.makeapay, null);
			setContentView(vw);

			payNowBtn = (Button) vw.findViewById(R.id.payNowBtn);
			cardTypeSpinner = (Spinner) vw.findViewById(R.id.cardType_spin);
			expMonthSpinner = (Spinner) vw.findViewById(R.id.expMonth_spin);
			expYearSpinner = (Spinner) vw.findViewById(R.id.expYear_spin);
			cardNumber = (EditText) vw.findViewById(R.id.cardNo_edit);

			cardNumber.addTextChangedListener(new TextWatcher() {

				@Override
				public void onTextChanged(CharSequence s, int start,
						int before, int count) {
					if ((cardNumber.getText().toString().length() == 4
							|| cardNumber.getText().toString().length() == 9 || cardNumber
							.getText().toString().length() == 14)
							&& (cardNumber.getText().toString().length() > start)) {
						cardNumber.setText(s.toString() + "-");
						cardNumber.setSelection(cardNumber.getText().length());
					}
				}

				@Override
				public void beforeTextChanged(CharSequence s, int start,
						int count, int after) {

				}

				@Override
				public void afterTextChanged(Editable s) {

				}
			});

			cvvCode = (EditText) vw.findViewById(R.id.cvv_edit);
			cardTypeTxt = (TextView) vw.findViewById(R.id.cardTypeTxt);
			CardNoTxt = (TextView) vw.findViewById(R.id.CardNoTxt);
			expMonthTxt = (TextView) vw.findViewById(R.id.expMonthTxt);
			expYearTxt = (TextView) vw.findViewById(R.id.expYearTxt);
			cvvTxt = (TextView) vw.findViewById(R.id.cvvTxt);
			cardTypeTxt.setText(Html
					.fromHtml("Card Type<font color='#FF0000'>*</font>"));
			CardNoTxt.setText(Html
					.fromHtml("Card Number<font color='#FF0000'>*</font>"));
			expMonthTxt
					.setText(Html
							.fromHtml("Expiration Month<font color='#FF0000'>*</font>"));
			expYearTxt.setText(Html
					.fromHtml("Expiration Year<font color='#FF0000'>*</font>"));
			cvvTxt.setText(Html
					.fromHtml("CVV Code<font color='#FF0000'>*</font>"));
			paymentModeRadioGroup = (RadioGroup) vw
					.findViewById(R.id.pay_radioGroup);
			creditCardBtn = (RadioButton) vw.findViewById(R.id.creditCard);
			payPalBtn = (RadioButton) vw.findViewById(R.id.paypalAcc);
			planStatusTxt = (TextView) vw.findViewById(R.id.pay_info);
			chooseInfoTxt = (TextView) vw.findViewById(R.id.choose_info);
			// makePayTitleTxt = (TextView) vw.findViewById(R.id.pay_title);
			creditCardLinLay = (LinearLayout) vw
					.findViewById(R.id.creditCardDetailsLinLay);
			paypalLinLay = (LinearLayout) vw.findViewById(R.id.paypal_layout);
			// makePayTitleTxt.setTypeface(typefaceHelveticaBold);

			planStatusTxt.setTypeface(typefaceHelvetica);
			chooseInfoTxt.setTypeface(typefaceHelveticaBold);
			planStatusTxt.setVisibility(View.INVISIBLE);
			cardTypeSpinner.setAdapter(AndroidUtility.spinner_Adapter(
					TakeATestActivity.this, cardType));
			expMonthSpinner.setAdapter(AndroidUtility.spinner_Adapter(
					TakeATestActivity.this, expirMonth));
			expYearSpinner.setAdapter(AndroidUtility.spinner_Adapter(
					TakeATestActivity.this, expirYear));
			cardTypeSpinner.setSelection(0);
			expYearSpinner.setSelection(0);
			expMonthSpinner.setSelection(0);
			cardTypeSpinner
					.setOnItemSelectedListener(new OnItemSelectedListener() {
						@Override
						public void onItemSelected(AdapterView<?> arg0,
								View arg1, int position, long arg3) {
							cardTypestr = cardType.get(position);
						}

						@Override
						public void onNothingSelected(AdapterView<?> arg0) {

						}
					});
			expMonthSpinner
					.setOnItemSelectedListener(new OnItemSelectedListener() {
						@Override
						public void onItemSelected(AdapterView<?> arg0,
								View arg1, int position, long arg3) {
							expMonthStr = expirMonth.get(position);
						}

						@Override
						public void onNothingSelected(AdapterView<?> arg0) {

						}
					});

			expYearSpinner
					.setOnItemSelectedListener(new OnItemSelectedListener() {

						@Override
						public void onItemSelected(AdapterView<?> arg0,
								View arg1, int position, long arg3) {
							expYearstr = expirYear.get(position);
							if (position == 1) {
								for (int i = Calendar.getInstance().get(
										Calendar.MONTH); i > 0; i--) {
									expirMonth.remove(i);
								}
								expMonthSpinner.setAdapter(AndroidUtility
										.spinner_Adapter(
												TakeATestActivity.this,
												expirMonth));
							} else {
								expirMonth = new ArrayList<String>(Arrays
										.asList(getResources().getStringArray(
												R.array.Month)));
								expMonthSpinner.setAdapter(AndroidUtility
										.spinner_Adapter(
												TakeATestActivity.this,
												expirMonth));
							}
						}

						@Override
						public void onNothingSelected(AdapterView<?> arg0) {
						}
					});

			if (creditCardBtn.isChecked()) {
				paypalLinLay.setVisibility(View.GONE);
				creditCardLinLay.setVisibility(View.VISIBLE);

				payNowBtn.setOnClickListener(new OnClickListener() {
					@SuppressLint("NewApi")
					@Override
					public void onClick(View v) {
						cardNoStr = cardNumber.getText().toString();
						CvvCodeStr = cvvCode.getText().toString();
						if (AndroidUtility.isConnected(TakeATestActivity.this)
								&& !cardTypestr
										.equalsIgnoreCase("Select Card Type")
								&& !cardNoStr.equalsIgnoreCase(" ")
								&& !expMonthStr.equalsIgnoreCase("Month")
								&& !expYearstr.equalsIgnoreCase("Year")
								&& !CvvCodeStr.equalsIgnoreCase(" ")
								&& !(CvvCodeStr.length() > 4)
								&& !(CvvCodeStr.length() < 3)
								&& (!CvvCodeStr.trim().isEmpty())) {
							new CreditCardASyncTask().execute();
						} else {
							AlertDialog.Builder alert = new AlertDialog.Builder(
									TakeATestActivity.this);
							alert.setCancelable(false);
							if (!AndroidUtility
									.isConnected(TakeATestActivity.this)) {
								alert.setMessage("No internet connectivity.");
							} else if (cardTypestr
									.equalsIgnoreCase("Select Card Type")) {
								alert.setMessage("Enter Card Type.");
							} else if (cardNoStr.equalsIgnoreCase("")) {
								alert.setMessage("Enter Card Number.");
							} else if (expMonthStr.equalsIgnoreCase("Month")) {
								alert.setMessage("Enter Expiration Month.");
							} else if (expYearstr.equalsIgnoreCase("Year")) {
								alert.setMessage("Enter Expiration Year.");
							} else if (CvvCodeStr.equalsIgnoreCase(" ")
									|| CvvCodeStr.trim().isEmpty()) {
								alert.setMessage("Enter CVV Code.");
							} else if ((CvvCodeStr.length() > 4)
									|| (CvvCodeStr.length() < 3)) {
								alert.setMessage(" CVV Code should be of min 3 characters and max 4 characters.");
							}
							alert.setNegativeButton(
									getString(R.string.ok_text),
									new DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {
											dialog.cancel();
										}
									});
							alert.show();
						}
					}
				});
			}
			paymentModeRadioGroup
					.setOnCheckedChangeListener(new OnCheckedChangeListener() {

						@SuppressLint("NewApi")
						@Override
						public void onCheckedChanged(RadioGroup group,
								int checkedId) {
							switch (checkedId) {
								case R.id.creditCard :
									paypalLinLay.setVisibility(View.GONE);
									creditCardLinLay
											.setVisibility(View.VISIBLE);
									cardNoStr = cardNumber.getText().toString();
									CvvCodeStr = cvvCode.getText().toString();
									payNowBtn
											.setOnClickListener(new OnClickListener() {
												@Override
												public void onClick(View v) {
													cardNoStr = cardNumber
															.getText()
															.toString();
													CvvCodeStr = cvvCode
															.getText()
															.toString();
													if (AndroidUtility
															.isConnected(TakeATestActivity.this)
															&& !cardTypestr
																	.equalsIgnoreCase("Select Card Type")
															&& !cardNoStr
																	.equalsIgnoreCase(" ")
															&& !cardNoStr
																	.trim()
																	.isEmpty()
															&& !cardNoStr
																	.isEmpty()
															&& !expMonthStr
																	.equalsIgnoreCase("Month")
															&& !expYearstr
																	.equalsIgnoreCase("Year")
															&& !CvvCodeStr
																	.equalsIgnoreCase(" ")
															&& !CvvCodeStr
																	.trim()
																	.isEmpty()
															&& !(CvvCodeStr
																	.length() > 4)
															&& !(CvvCodeStr
																	.length() < 3)
															&& (!CvvCodeStr
																	.trim()
																	.isEmpty())) {
														new CreditCardASyncTask()
																.execute();
													} else {
														AlertDialog.Builder alert = new AlertDialog.Builder(
																TakeATestActivity.this);
														alert.setCancelable(false);
														if (!AndroidUtility
																.isConnected(TakeATestActivity.this)) {
															alert.setMessage("No internet connectivity.");
														} else if (cardTypestr
																.equalsIgnoreCase("Select Card Type")) {
															alert.setMessage("Enter Card Type.");
														} else if (cardNoStr
																.equalsIgnoreCase("")
																&& cardNoStr
																		.trim()
																		.isEmpty()
																&& cardNoStr
																		.isEmpty()) {
															alert.setMessage("Enter Card Number.");
														} else if (expMonthStr
																.equalsIgnoreCase("Month")) {
															alert.setMessage("Enter Expiration Month.");
														} else if (expYearstr
																.equalsIgnoreCase("Year")) {
															alert.setMessage("Enter Expiration Year.");
														} else if (CvvCodeStr
																.equalsIgnoreCase(" ")
																|| CvvCodeStr
																		.trim()
																		.isEmpty()) {
															alert.setMessage("Enter CVV Code.");
														} else if ((CvvCodeStr
																.length() > 4)
																|| (CvvCodeStr
																		.length() < 3)) {
															alert.setMessage(" CVV Code should be of min 3 characters and max 4 characters.");
														}
														alert.setNegativeButton(
																getString(R.string.ok_text),
																new DialogInterface.OnClickListener() {
																	@Override
																	public void onClick(
																			DialogInterface dialog,
																			int which) {
																		dialog.cancel();
																	}
																});
														alert.show();
													}

												}
											});
									break;
								case R.id.paypalAcc :
									creditCardLinLay.setVisibility(View.GONE);
									paypalLinLay.setVisibility(View.VISIBLE);
									mContentLinearLayout = (LinearLayout) findViewById(R.id.content_layout);
									mContentLinearLayout
											.removeView(mLaunchPayPalButton);
									mLoadingLinearLayout = (LinearLayout) findViewById(R.id.loading_layout);
									if (AndroidUtility
											.isConnected(TakeATestActivity.this)
									/*
									 * && !cardTypestr
									 * .equalsIgnoreCase("Select Card Type") &&
									 * !cardNoStr.equalsIgnoreCase(" ") &&
									 * !cardNoStr.trim().isEmpty() &&
									 * !cardNoStr.isEmpty() && !expMonthStr
									 * .equalsIgnoreCase("Month") && !expYearstr
									 * .equalsIgnoreCase("Year") && !CvvCodeStr
									 * .equalsIgnoreCase(" ") &&
									 * !CvvCodeStr.trim().isEmpty() &&
									 * !(CvvCodeStr.length() > 4)
									 */) {
										new PayPalASyncTask().execute();
									} else {
										AlertDialog.Builder alert = new AlertDialog.Builder(
												TakeATestActivity.this);
										alert.setCancelable(false).setMessage(
												"No internet connectivity.");
										alert.setNegativeButton(
												getString(R.string.ok_text),
												new DialogInterface.OnClickListener() {
													@Override
													public void onClick(
															DialogInterface dialog,
															int which) {
														dialog.cancel();
													}
												});
										alert.show();
									}
									break;
							}
						}
					});
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * @author suryakumari
	 * 
	 */
	class CreditCardASyncTask extends AsyncTask<String, String, String> {
		Dialog progresDialog;

		@Override
		protected String doInBackground(String... params) {
			InsertUserPlanThroughWeb(cardTypestr, cardNoStr, expMonthStr,
					expYearstr, CvvCodeStr, getUserPlan.planId,
					BaseUrl.LoginId, discountCode);
			return null;
		}

		@Override
		protected void onPreExecute() {
			progresDialog = new Dialog(TakeATestActivity.this,
					R.style.Theme_Levels);
			// Display payNowdisp =
			// TakeATestActivity.this.getWindowManager().getDefaultDisplay();
			// progresDialog.getWindow().setLayout((payNowdisp.getWidth() / 3),
			// (payNowdisp.getHeight() / 4));
			WindowManager.LayoutParams params = progresDialog.getWindow()
					.getAttributes();
			params.width = WindowManager.LayoutParams.WRAP_CONTENT;
			params.height = WindowManager.LayoutParams.WRAP_CONTENT;
			params.dimAmount = 0.9f;
			progresDialog.getWindow().addFlags(
					WindowManager.LayoutParams.FLAG_DIM_BEHIND);
			progresDialog.getWindow().setAttributes(params);
			progresDialog.getWindow().setBackgroundDrawable(
					new ColorDrawable(android.graphics.Color.TRANSPARENT));
			progresDialog.getWindow().setGravity(Gravity.CENTER_VERTICAL);
			View dialogLayout2 = TakeATestActivity.this.getLayoutInflater()
					.inflate(R.layout.custom_progressbar, null);
			TextView progressTxt = (TextView) dialogLayout2
					.findViewById(R.id.progressTitle);
			progressTxt.setText("Credit Card Payment.");
			progresDialog.setContentView(dialogLayout2);
			progresDialog.show();
			progresDialog.setCancelable(false);
			super.onPreExecute();
		}

		@Override
		protected void onPostExecute(String result) {
			progresDialog.dismiss();
			try {
				if (serverResponse.equalsIgnoreCase("Success")) {
					showPlanStatus();
				} else {
					alert = new AlertDialog.Builder(TakeATestActivity.this);
					alert.setCancelable(false).setMessage(serverResponse);
					alert.setNegativeButton(getString(R.string.ok_text),
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									dialog.cancel();
								}
							});

					alert.show();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			super.onPostExecute(result);
		}
	}

	public void showPlanStatus() {
		try {
			final Dialog payNowDialog = new Dialog(TakeATestActivity.this,
					R.style.Theme_Levels);
			// Display payNowdisp =
			// TakeATestActivity.this.getWindowManager().getDefaultDisplay();
			// payNowDialog.getWindow().setLayout((payNowdisp.getWidth() / 2),
			// (payNowdisp.getHeight() / 3) - 40);
			WindowManager.LayoutParams params = payNowDialog.getWindow()
					.getAttributes();
			params.width = WindowManager.LayoutParams.WRAP_CONTENT;
			params.height = WindowManager.LayoutParams.WRAP_CONTENT;
			params.dimAmount = 0.9f;
			payNowDialog.getWindow().addFlags(
					WindowManager.LayoutParams.FLAG_DIM_BEHIND);
			payNowDialog.getWindow().setAttributes(params);
			payNowDialog.getWindow().setBackgroundDrawable(
					new ColorDrawable(android.graphics.Color.TRANSPARENT));
			payNowDialog.getWindow().setGravity(Gravity.CENTER_VERTICAL);
			View dialogLayout2 = TakeATestActivity.this.getLayoutInflater()
					.inflate(R.layout.paystatus, null);
			payNowDialog.setContentView(dialogLayout2);
			payNowDialog.show();
			TextView payStatusTitleTxt = (TextView) dialogLayout2
					.findViewById(R.id.payStatusTxt);
			TextView payStatusDescTxt = (TextView) dialogLayout2
					.findViewById(R.id.payStatusDescTxt);
			TextView payStatusDesc1Txt = (TextView) dialogLayout2
					.findViewById(R.id.payStatusDesc1Txt);

			payStatusTitleTxt.setTypeface(typefaceHelveticaBold);
			payStatusDescTxt.setTypeface(typefaceHelvetica);
			payStatusDesc1Txt.setTypeface(typefaceHelvetica);
			Button plansTakeTestBtn = (Button) dialogLayout2
					.findViewById(R.id.takeATstBtn);
			plansTakeTestBtn.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					payNowDialog.cancel();
					mParentTests = null;

					try {
						setTakeATestDetails();
					} catch (Exception e) {

					}
				}
			});
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * @param cardTypestr
	 * @param cardNumber
	 * @param expMonthStr
	 * @param expYearstr
	 * @param cvvCodeStr2
	 * @param planId
	 * @param loginId
	 * @param discountCode
	 */
	public void InsertUserPlanThroughWeb(String cardTypestr, String cardNumber,
			String expMonthStr, String expYearstr, String cvvCodeStr2,
			int planId, String loginId, String discountCode) {
		try {
			HttpClient httpclient = new DefaultHttpClient();
			HttpPost httppost = new HttpPost(BaseUrl.baseurl
					+ "insertUserTest.php");

			try {
				List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
				nameValuePairs.add(new BasicNameValuePair("card_type",
						cardTypestr));
				cardNumber = cardNumber.replace("-", "");
				nameValuePairs
						.add(new BasicNameValuePair("card_no", cardNumber));
				nameValuePairs.add(new BasicNameValuePair("exp_mon",
						expMonthStr));
				nameValuePairs.add(new BasicNameValuePair("exp_year",
						expYearstr));
				nameValuePairs.add(new BasicNameValuePair("plan_id", Integer
						.toString(planId)));
				nameValuePairs.add(new BasicNameValuePair("user_id", loginId));
				nameValuePairs.add(new BasicNameValuePair("discount_code",
						discountCode));
				nameValuePairs.add(new BasicNameValuePair("amount", Double
						.toString(DiscountPercent)));
				nameValuePairs.add(new BasicNameValuePair("test_id", Integer
						.toString(mSelectedTest.testId)));
				nameValuePairs.add(new BasicNameValuePair("actual_amount",
						mSelectedTest.testPrice));
				httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

				HttpResponse response = httpclient.execute(httppost);
				serverResponse = EntityUtils.toString(response.getEntity())
						.toString();

				if (serverResponse.contains("Success")) {
					serverResponse = "Success";
					getalltestMngr.updateGetAllTestWhere("buy", "N",
							Integer.toString(mSelectedTest.testId));
				} else {
					serverResponse = "Transaction Failed, try after some time";
				}
			} catch (ClientProtocolException e) {
			} catch (IOException e) {
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * @author suryakumari
	 * 
	 */
	class PayPalASyncTask extends AsyncTask<String, String, String> {
		boolean errorInInitialization = false;

		@Override
		protected String doInBackground(String... params) {
			try {
				PayPal pp = PayPal.getInstance();
				if (pp == null) {
					pp = PayPal.initWithAppID(TakeATestActivity.this,
							"APP-80W284485P519543T", PayPal.ENV_SANDBOX);
					pp.setLanguage("en_US"); // Sets the language for the
					// library.
					pp.setFeesPayer(PayPal.FEEPAYER_EACHRECEIVER);
					pp.setShippingEnabled(false);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPostExecute(String result) {
			PayPal pp = PayPal.getInstance();
			mLaunchPayPalButton = pp.getCheckoutButton(TakeATestActivity.this,
					PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
			RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(
					LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
			params.addRule(RelativeLayout.CENTER_IN_PARENT);
			params.bottomMargin = 5;
			params.leftMargin = 50;

			mLaunchPayPalButton.setLayoutParams(params);
			mLaunchPayPalButton.setId(100);
			mLaunchPayPalButton.setOnClickListener(new View.OnClickListener() {

				@Override
				public void onClick(View v) {
					onPaypalButtonClicked();
				}
			});
			mContentLinearLayout.addView(mLaunchPayPalButton);
			mContentLinearLayout.setVisibility(View.VISIBLE);
			mLoadingLinearLayout.setVisibility(View.GONE);
			super.onPostExecute(result);
		}
	}

	/**
	 * 
	 */
	private void onPaypalButtonClicked() {
		try {
			PayPalPayment newPayment = new PayPalPayment();
			// newPayment.setIpnUrl(BaseUrl.baseurl +
			// "result_paypal.php?user_id=4656&plan_id=32&discount_code=123456&txn_id=234234234&payment_status=Completed&payment_gross=100");
			newPayment.setSubtotal(new BigDecimal(DiscountPercent));
			newPayment.setCurrencyType("USD");
			newPayment
					.setRecipient("sumeet_1292244974_biz@benchmarkitsolutions.com");
			newPayment.setMerchantName("Testing Color Vision");

			Intent checkoutIntent = PayPal.getInstance().checkout(newPayment,
					TakeATestActivity.this);
			this.startActivityForResult(checkoutIntent, 2);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent intent) {
		AlertDialog alertDialog = new AlertDialog.Builder(this).create();
		if (resultCode == Activity.RESULT_OK) {
			if (requestCode == 2) {
				showPlanStatus();
				HttpClient httpclient = new DefaultHttpClient();
				HttpPost httppost = new HttpPost(BaseUrl.baseurl
						+ "insertUserTestPaypal.php");

				try {
					List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
					nameValuePairs.add(new BasicNameValuePair("user_id",
							BaseUrl.LoginId));
					nameValuePairs.add(new BasicNameValuePair("test_id",
							Integer.toString(mSelectedTest.testId)));
					nameValuePairs
							.add(new BasicNameValuePair(
									"transaction_id",
									intent.getStringExtra(PayPalActivity.EXTRA_PAY_KEY)));
					httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

					HttpResponse response = httpclient.execute(httppost);
					InputSource inStream = new InputSource();
					inStream.setCharacterStream(new StringReader(EntityUtils
							.toString(response.getEntity())));
					SAXParserFactory mSAXParserFactory = SAXParserFactory
							.newInstance();
					SAXParser mSAXParser = mSAXParserFactory.newSAXParser();
					XMLReader mXMLReader = mSAXParser.getXMLReader();

					paypalIndividualXMLHandler xmlHandler = new paypalIndividualXMLHandler();
					mXMLReader.setContentHandler(xmlHandler);
					mXMLReader.parse(inStream);
					if (paypalIndividualXMLHandler.paypalResponse
							.equalsIgnoreCase("Success")) {
						getalltestMngr.updateGetAllTestWhere("buy", "N",
								Integer.toString(mSelectedTest.testId));
					}
				} catch (ClientProtocolException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				} catch (SAXException e) {
					e.printStackTrace();
				} catch (ParserConfigurationException e) {
					e.printStackTrace();
				}
			} else if (AppConstants.COLOR_ARRANGEMENT_REQUEST_CODE == requestCode) {
				if (mContext != null) {
					if (intent != null) {
					}
					CloseTestASync();
				}
			}
		} else if (resultCode == PayPalActivity.RESULT_FAILURE) {
			alertDialog.setTitle("Failure to Connect Paypal Site..");
			alertDialog.setMessage("Please try after some time..");
			alertDialog.show();
			new PayPalASyncTask().execute();
		} else {
			super.onActivityResult(requestCode, resultCode, intent);
			new PayPalASyncTask().execute();
		}
		mContentLinearLayout.removeView(mLaunchPayPalButton);
	}

	/**
	 * 
	 * @param is
	 * @return
	 * @throws IOException
	 */
	private String convertStreamToString(InputStream is) throws IOException {
		Writer writer = new StringWriter();

		char[] buffer = new char[2048];
		try {
			Reader reader = new BufferedReader(new InputStreamReader(is,
					"UTF-8"));
			int n;
			while ((n = reader.read(buffer)) != -1) {
				writer.write(buffer, 0, n);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			is.close();
		}
		String text = writer.toString();
		return text;
	}

	private TestListExpandAdapter testListExpandAdapter;
	private TestListExpandAdapterUnpaid testListExpandAdapterUnpaid;

	/**
	 * initializes expandable list view
	 */
	@SuppressWarnings("unchecked")
	private void setExpandableListViewPaid() {
		try {
			TestContentManager.getInstance().setD15DirectStart(false);
			mTestNamesPaid = new ArrayList<String>();
			mTestNamesUnPaid = new ArrayList<String>();
			mParentTests = new ArrayList<Getalltest>();
			mParentTestsUnpaid = new ArrayList<Getalltest>();
			mTestDescPaid = new ArrayList<String>();
			mTestDescUnPaid = new ArrayList<String>();

			for (Getalltest getAllTestTemp : mGetAllTest) {
				if (getAllTestTemp.testType != null
						&& getAllTestTemp.Buy != null
						&& getAllTestTemp.isactivated != null) {
					if (!getAllTestTemp.testType.equalsIgnoreCase("D")
							&& getAllTestTemp.Buy.equalsIgnoreCase("N")
							&& getAllTestTemp.isactivated.equalsIgnoreCase("Y")) {
						mParentTests.add(getAllTestTemp);
						// Start showing test two line description along with
						// the test title
						mTestNamesPaid.add(getAllTestTemp.title);
						if (getAllTestTemp.two_line_desc == null) {
							getAllTestTemp.two_line_desc = "";
						} else {
							getAllTestTemp.two_line_desc = Html.fromHtml(
									getAllTestTemp.two_line_desc).toString();
						}

						mTestDescPaid.add(getAllTestTemp.two_line_desc);
					} else if (!getAllTestTemp.testType.equalsIgnoreCase("D")
							&& getAllTestTemp.Buy.equalsIgnoreCase("Y")
							&& getAllTestTemp.isactivated.equalsIgnoreCase("Y")) {
						mParentTestsUnpaid.add(getAllTestTemp);
						// Start showing test two line description along with
						// the test title
						mTestNamesUnPaid.add(getAllTestTemp.title);
						if (getAllTestTemp.two_line_desc == null) {
							getAllTestTemp.two_line_desc = "";
						} else {
							getAllTestTemp.two_line_desc = Html.fromHtml(
									getAllTestTemp.two_line_desc).toString();
						}
						mTestDescUnPaid.add(getAllTestTemp.two_line_desc);
					}
				}
			}

			// Add d15 test
			if (mTestNamesPaid != null && mTestNamesPaid.size() > 0) {
				mTestNamesPaid.add(AppConstants.TEST_D15);
				mTestDescPaid.add(AppConstants.TEST_D15_DESCRIPTION);
			} else {
				mTestNamesUnPaid.add(AppConstants.TEST_D15);
				mTestDescUnPaid.add(AppConstants.TEST_D15_DESCRIPTION);
			}

			ArrayList<TestItem> defaultList = new ArrayList<TestItem>();

			if (mTestNamesPaid != null && mTestDescPaid != null
					&& mTestNamesPaid.size() == mTestDescPaid.size()) {
				for (int i = 0; i < mTestNamesPaid.size(); i++) {
					TestItem item = new TestItem();
					item.setTestname(mTestNamesPaid.get(i));
					item.setTestsubname(mTestDescPaid.get(i));
					item.setPaid(true);
					defaultList.add(item);
				}
			}

			if (mTestNamesUnPaid != null && mTestDescUnPaid != null
					&& mTestNamesUnPaid.size() == mTestDescUnPaid.size()) {
				for (int i = 0; i < mTestNamesUnPaid.size(); i++) {
					TestItem item = new TestItem();
					item.setTestname(mTestNamesUnPaid.get(i));
					item.setTestsubname(mTestDescUnPaid.get(i));
					item.setPaid(false);
					defaultList.add(item);
				}
			}

			Collections.sort(defaultList,
					Comparator.getInstance().new TestNameSorter());

			if (defaultList != null && defaultList.size() > 0) {
				if (mTestNamesPaid != null) {
					mTestNamesPaid.clear();
					mTestDescPaid.clear();
				}
				if (mTestNamesUnPaid != null) {
					mTestNamesUnPaid.clear();
					mTestDescUnPaid.clear();
				}
				for (int i = 0; i < defaultList.size(); i++) {
					TestItem item = defaultList.get(i);
					if (item.isPaid()) {
						mTestNamesPaid.add(item.getTestname());
						if (!TextUtils.isEmpty(item.getTestsubname())) {
							mTestDescPaid.add(item.getTestsubname());
						} else {
							if (item.getTestname().equals(
									AppConstants.PEDIATRIC)) {
								mTestDescPaid
										.add("Color Vision Testing Made Easy");
							} else if (item.getTestname().equals(
									AppConstants.TEST_D15)) {
								mTestDescPaid
										.add(AppConstants.TEST_D15_DESCRIPTION);
							} else {
								mTestDescPaid
										.add("Short Description Goes Here.");
							}
						}
					} else {
						mTestNamesUnPaid.add(item.getTestname());
						if (!TextUtils.isEmpty(item.getTestsubname())) {
							mTestDescUnPaid.add(item.getTestsubname());
						} else {
							if (item.getTestname().equals(
									AppConstants.PEDIATRIC)) {
								mTestDescUnPaid
										.add("Color Vision Testing Made Easy");
							} else if (item.getTestname().equals(
									AppConstants.TEST_D15)) {
								mTestDescUnPaid
										.add(AppConstants.TEST_D15_DESCRIPTION);
							} else {
								mTestDescUnPaid
										.add("Short Description Goes Here.");
							}
						}
					}
				}
			}

			// arrange this as well
			Collections.sort(mParentTests,
					Comparator.getInstance().new TestModelSorter());
			Collections.sort(mParentTestsUnpaid,
					Comparator.getInstance().new TestModelSorter());

			TestexpListview = (ExpandableListView) findViewById(R.id.TestList_Expand);
			TestexpListviewUnpaid = (ExpandableListView) findViewById(R.id.TestList_Expand_unpaid);

			testListExpandAdapter = new TestListExpandAdapter(
					TakeATestActivity.this, mTestNamesPaid, mTestDescPaid);
			testListExpandAdapterUnpaid = new TestListExpandAdapterUnpaid(
					TakeATestActivity.this, mTestNamesUnPaid, mTestDescUnPaid);
			TestexpListview.setAdapter(testListExpandAdapter);
			testListExpandAdapter.notifyDataSetChanged();

			TestexpListviewUnpaid.setAdapter(testListExpandAdapterUnpaid);
			testListExpandAdapterUnpaid.notifyDataSetChanged();

			webvw = (WebView) findViewById(R.id.testDescWebView);
			if (mParentTests.size() != 0) {
				try {
					webvw.loadDataWithBaseURL("",
							mParentTests.get(0).description, "text/html",
							"UTF-8", "");
					TestexpListview.expandGroup(0);
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			} else {
				webvw.loadDataWithBaseURL("",
						mParentTestsUnpaid.get(0).description, "text/html",
						"UTF-8", "");
				TestexpListviewUnpaid.expandGroup(0);
			}

			if (TestexpListview.isGroupExpanded(0)) {
				mSelectedTest = mParentTests.get(0);
				webvw.loadDataWithBaseURL("", mParentTests.get(0).description,
						"text/html", "UTF-8", "");
				if (unLimitedCredit.equalsIgnoreCase("Y")) {
					// mButtonTakeATest
					// .setBackgroundResource(R.drawable.next_arrow_btn);
					// mButtonTakeATest.setTag("take_test_btn");
					// mButtonTakeATest.setText("");
					initButtonsParams(false, "");
				}

				mtestGroupManager = new GetalltestgroupManager(
						TakeATestActivity.this) {
					@Override
					public void handleMessage(Message msg) {
						super.handleMessage(msg);
						mtestGroup = (Getalltestgroup) msg.obj;
					}
				};
				try {
					mtestGroupManager
							.getSingleGetalltestgroup(mSelectedTest.groupId);
				} catch (GetalltestgroupException e) {
					e.printStackTrace();
				}

			}
			if (TestexpListviewUnpaid.isGroupExpanded(0)) {
				mSelectedTest = mParentTestsUnpaid.get(0);
				webvw.loadDataWithBaseURL("",
						mParentTestsUnpaid.get(0).description, "text/html",
						"UTF-8", "");
				if (unLimitedCredit.equalsIgnoreCase("Y")) {
					// mButtonTakeATest
					// .setBackgroundResource(R.drawable.next_arrow_btn);
					// mButtonTakeATest.setTag("take_test_btn");
					// mButtonTakeATest.setText("");
					initButtonsParams(false, "");
				}

				mtestGroupManager = new GetalltestgroupManager(
						TakeATestActivity.this) {
					@Override
					public void handleMessage(Message msg) {
						super.handleMessage(msg);
						mtestGroup = (Getalltestgroup) msg.obj;
					}
				};
				try {
					mtestGroupManager
							.getSingleGetalltestgroup(mSelectedTest.groupId);
				} catch (GetalltestgroupException e) {
					e.printStackTrace();
				}
			}

			if (mTestNamesPaid.size() > 0) {
				testListExpandAdapterUnpaid.setPaidSelected(true);
				testListExpandAdapter.setUnpaidSelected(false);
			} else {
				testListExpandAdapterUnpaid.setPaidSelected(false);
				testListExpandAdapter.setUnpaidSelected(true);
			}
			testListExpandAdapter.notifyDataSetChanged();
			testListExpandAdapterUnpaid.notifyDataSetChanged();

			TestexpListview.setIndicatorBounds(270, 280);
			TestexpListview.setChildIndicatorBounds(270, 280);

			TestexpListviewUnpaid.setIndicatorBounds(270, 280);
			TestexpListviewUnpaid.setChildIndicatorBounds(270, 280);

			TestexpListview
					.setOnGroupExpandListener(new OnGroupExpandListener() {
						public void onGroupExpand(int groupPosition) {
							for (int i = 0; i < mTestNamesPaid.size(); i++) {
								if (i != groupPosition)
									TestexpListview.collapseGroup(i);
							}
						}
					});

			TestexpListviewUnpaid
					.setOnGroupExpandListener(new OnGroupExpandListener() {
						public void onGroupExpand(int groupPosition) {
							for (int i = 0; i < mTestNamesUnPaid.size(); i++) {
								if (i != groupPosition)
									TestexpListviewUnpaid.collapseGroup(i);
							}
						}
					});

			TestexpListview.setOnGroupClickListener(new OnGroupClickListener() {
				@Override
				public boolean onGroupClick(ExpandableListView parent, View v,
						int groupPosition, long id) {
					testListExpandAdapter.setUnpaidSelected(false);
					testListExpandAdapterUnpaid.setPaidSelected(true);
					testListExpandAdapter.notifyDataSetChanged();
					testListExpandAdapterUnpaid.notifyDataSetChanged();
					for (int i = 0; i < TestexpListview.getAdapter().getCount(); i++)
						TestexpListview.collapseGroup(i);

					parent.expandGroup(groupPosition);
					String value = (String) TestexpListview.getAdapter()
							.getItem(groupPosition);

					if (AppConstants.TEST_D15.equals(value)) {
						// set test -- > mSelectedTest
						webvw.loadDataWithBaseURL("",
								AppConstants.TEST_D15_INSTRUCTIONS,
								"text/html", "UTF-8", "");
						initButtonsParams(false, "");
						TestContentManager.getInstance()
								.setD15DirectStart(true);
						mSelectedTest = new Getalltest();
						mSelectedTest.testId = (int) System.currentTimeMillis();
						mSelectedTest.title = AppConstants.TEST_D15;
						// to get total no of questions in a test
						totalNoOfQuestion = 0;
						attemptedNoOfQquestion = 0;
						isFirstDeficiencyTest = true;
						totalNoOfQuestion = totalNoOfQuestion
								+ mSelectedTest.noOfQuestions;
					} else {
						TestContentManager.getInstance().setD15DirectStart(
								false);
						// Ajay: Resetting values
						totalNoOfQuestion = 0;
						attemptedNoOfQquestion = 0;
						isFirstDeficiencyTest = true;
						for (int i = 0; i < mParentTests.size(); i++) {
							if (groupPosition == i
									|| value.equals(mParentTests.get(i).title)) {
								mSelectedTest = mParentTests.get(i);
								// Ajay: to get total no of questions in a test
								totalNoOfQuestion = totalNoOfQuestion
										+ mSelectedTest.noOfQuestions;
								webvw.loadDataWithBaseURL("",
										mParentTests.get(i).description,
										"text/html", "UTF-8", "");
								if (unLimitedCredit.equalsIgnoreCase("Y")) {
									if (mSelectedTest.Buy.equals("Y")) {
										initButtonsParams(true, "Pay Now  $"
												+ mParentTests.get(i).testPrice);
									} else {
										initButtonsParams(false, "");
									}
								}

								mtestGroupManager = new GetalltestgroupManager(
										TakeATestActivity.this) {
									@Override
									public void handleMessage(Message msg) {
										super.handleMessage(msg);
										mtestGroup = (Getalltestgroup) msg.obj;
									}
								};
								try {
									mtestGroupManager
											.getSingleGetalltestgroup(mSelectedTest.groupId);
								} catch (GetalltestgroupException e) {
									e.printStackTrace();
								}
								break;
							}
						}
					}
					return true;
				}
			});

			TestexpListviewUnpaid
					.setOnGroupClickListener(new OnGroupClickListener() {
						@Override
						public boolean onGroupClick(ExpandableListView parent,
								View v, int groupPosition, long id) {
							testListExpandAdapter.setUnpaidSelected(true);
							testListExpandAdapterUnpaid.setPaidSelected(false);
							testListExpandAdapter.notifyDataSetChanged();
							testListExpandAdapterUnpaid.notifyDataSetChanged();
							int count = TestexpListviewUnpaid.getAdapter()
									.getCount();
							for (int i = 0; i < count; i++)
								TestexpListviewUnpaid.collapseGroup(i);

							parent.expandGroup(groupPosition);

							String value = (String) TestexpListviewUnpaid
									.getAdapter().getItem(groupPosition);

							if (AppConstants.TEST_D15.equals(value)) {
								// set test -- > mSelectedTest
								webvw.loadDataWithBaseURL("",
										AppConstants.TEST_D15_INSTRUCTIONS,
										"text/html", "UTF-8", "");
								initButtonsParams(true, "Pay Now");
							} else {
								// Ajay: Resetting values
								totalNoOfQuestion = 0;
								attemptedNoOfQquestion = 0;
								isFirstDeficiencyTest = true;
								for (int i = 0; i < mParentTestsUnpaid.size(); i++) {
									if (groupPosition == i
											|| value.equals(mParentTestsUnpaid
													.get(i).title)) {
										mSelectedTest = mParentTestsUnpaid
												.get(i);
										// Ajay: to get total no of questions in
										// a test
										totalNoOfQuestion = totalNoOfQuestion
												+ mSelectedTest.noOfQuestions;
										webvw.loadDataWithBaseURL(
												"",
												mParentTestsUnpaid.get(i).description,
												"text/html", "UTF-8", "");
										if (unLimitedCredit
												.equalsIgnoreCase("Y")) {
											initButtonsParams(
													true,
													"Pay Now  $"
															+ mParentTestsUnpaid
																	.get(i).testPrice);
										}

										mtestGroupManager = new GetalltestgroupManager(
												TakeATestActivity.this) {
											@Override
											public void handleMessage(
													Message msg) {
												super.handleMessage(msg);
												mtestGroup = (Getalltestgroup) msg.obj;
											}
										};
										try {
											mtestGroupManager
													.getSingleGetalltestgroup(mSelectedTest.groupId);
										} catch (GetalltestgroupException e) {
											e.printStackTrace();
										}
										break;
									}
								}
							}
							return true;
						}
					});

			((LinearLayout) findViewById(R.id.linear_layout_loading))
					.setVisibility(View.GONE);
			TestexpListview.setVisibility(View.VISIBLE);
			TestexpListviewUnpaid.setVisibility(View.VISIBLE);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Starts with the question and answers
	 * 
	 * @param n
	 */
	public void showQuestion(int n) {
		mQuestionNumber = n;
		if (mQuestionNumber < 0) {
			return;
		}

		if (!mSelectedTest.testType.equalsIgnoreCase("D")
				&& mSelectedTest.calculateResult.equals("Y")) {
			if (mWrongAnswers > (mSelectedTest.noOfQuestions - mSelectedTest.minScore)) {
				// attemptedNoOfQquestion=attemptedNoOfQquestion+mSelectedTest.noOfQuestions;
				isTestInProgress = false;
				calculateResultForNextOperation();
				return;
			}
		}

		mStatus = mGetTestQuestion.get(mQuestionNumber).status;
		mGetTestOptions = new ArrayList<Gettestanswers>();
		mGetOptionsManager = new GettestanswersManager(TakeATestActivity.this);
		try {
			if (mQuestionNumber >= 0) {
				mGetTestOptions.addAll(mGetOptionsManager
						.getAllGettestanswersWithOutASync(mGetTestQuestion
								.get(mQuestionNumber).questionId));
				if (questionList == null) {
					questionList = new ArrayList<Gettestquestion>();
				}
				questionList.add(mGetTestQuestion.get(mQuestionNumber));
				displayQuestion();
			}
		} catch (GettestanswersException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return;
	}

	ExecutorService mExecutorService;

	private void initCountDownCounter() {
		imageCountDownTimer = new CountDownTimer(
				mSelectedTest.plateDurations * 1000, 1000) {
			@Override
			public void onTick(long millisUntilFinished) {
			}

			@Override
			public void onFinish() {
				ImageView nextArrowImageview;
				ImageView plateImageview;
				if (mCurrentViewShown == TEST_EXCHILD_OPTION_VIEW) {
					nextArrowImageview = mNextExChildImageview;
					plateImageview = mPlateExChildImageview;
				} else {
					nextArrowImageview = mNextChildImageview;
					plateImageview = mPlateChildImageview;
				}
				// Based on the test type - Child / Adult / D
				if (mMainSelectedTest.testType.equalsIgnoreCase("A")) {
					plateImageview.setVisibility(View.GONE);
					// testplateInfoTxt.setVisibility(View.GONE);
				} else {
					plateImageview.setVisibility(View.INVISIBLE);
					// testplateInfoTxt.setVisibility(View.GONE);
				}

				// mOptionsChildRootlayout.setVisibility(View.VISIBLE);
				// optionsInfo.setVisibility(View.VISIBLE);
				nextArrowImageview.setVisibility(View.VISIBLE);
				sixtySecTimer.start();
			}
		}.start();
	}

	private boolean isTaskStarted = false;
	private DownloadPlateTask mDownloadPlateTask;

	private void startDownloadPlateTask(String url) {
		if (mDownloadPlateTask != null) {
			mDownloadPlateTask.cancel(true);
			mDownloadPlateTask = null;
		}
		mDownloadPlateTask = new DownloadPlateTask(url);
		mDownloadPlateTask.execute();
	}

	class DownloadPlateTask extends AsyncTask<Void, Void, Boolean> {

		String mUrl;
		byte[] imag = null;
		ProgressDialog prDialog;
		DownloadPlateTask(String url) {
			mUrl = url;
		}

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			prDialog = ProgressDialog.show(TakeATestActivity.this, null,
					"Loading, please wait...");
			prDialog.setCancelable(false);
			if (mCurrentViewShown == TEST_OPTION_VIEW) {
				optionImage = mPlateImageview;
			} else if (mCurrentViewShown == TEST_EXCHILD_OPTION_VIEW) {
				optionImage = mPlateExChildImageview;
			} else {
				optionImage = mPlateChildImageview;
			}
			optionImage.setImageBitmap(null);
		}

		protected Boolean doInBackground(Void... params) {
			try {
				// Store image in sd card
				AndroidUtility.storeImageOnMemory(TakeATestActivity.this, mUrl);
				imag = AndroidUtility
						.getBytesFromFile(getFilesDir()
								+ "/test_images/"
								+ mUrl.subSequence(mUrl.lastIndexOf("/"),
										mUrl.length()));
				if (imag == null) {
					return false;
				}
				return true;
			} catch (Exception e) {
				e.printStackTrace();
				if (mContext != null && prDialog != null) {
					prDialog.dismiss();
				}
			}
			return false;
		}

		protected void onPostExecute(Boolean result) {
			if (mContext != null && prDialog != null) {
				prDialog.dismiss();
				if (isTaskStarted) {
					if (mCurrentViewShown == TEST_OPTION_VIEW) {
						optionImage = mPlateImageview;
					} else if (mCurrentViewShown == TEST_EXCHILD_OPTION_VIEW) {
						optionImage = mPlateExChildImageview;
					} else {
						optionImage = mPlateChildImageview;
					}
					if (result) {
						Drawable image = null;
						try {
							image = new BitmapDrawable(
									AndroidUtility
											.decodeSampledBitmapFromResource(
													imag, 620, 620));
							/*
							 * image = new BitmapDrawable(
							 * BitmapFactory.decodeByteArray(imag, 0,
							 * imag.length));
							 */
							optionImage.setImageDrawable(image);
						} catch (Exception e) {
							optionImage
									.setImageResource(R.drawable.defaultimage);
							e.printStackTrace();
						}
					} else {
						optionImage.setImageResource(R.drawable.defaultimage);
					}
					if (mCurrentViewShown == TEST_OPTION_VIEW) {
						initOptionTestCountDownCounter();
					} else {
						initCountDownCounter();
					}
					isTaskStarted = false;
				}
			}
		}
	}

	private void processChildNextButtonClick(String selectedAnswer) {
		if (mQuestionNumber > 0) {
			if (imageCountDownTimer != null) {
				imageCountDownTimer.cancel();
			}
			if (sixtySecTimer != null) {
				sixtySecTimer.cancel();
			}
			insertChildAnswer(selectedAnswer);
			showQuestion(mQuestionNumber - 1);
		} else {
			if (imageCountDownTimer != null) {
				imageCountDownTimer.cancel();
			}
			if (sixtySecTimer != null) {
				sixtySecTimer.cancel();
			}
			isTestInProgress = false;
			if (mSelectedOption != -1) {
				insertChildAnswer(selectedAnswer);
				mSelectedOption = -1;
			} else {
				mWrongAnswers++;
			}
			calculateResultForNextOperation();
		}
	}

	/**
	 * inserts the answer into the database
	 * 
	 * @param id
	 */
	private void insertChildAnswer(String selectedAnswers) {
		// answersManager_ids = new TestAnswersManager(TakeATestActivity.this);
		testAnswers = new TestAnswers();
		testAnswers.user_id = Integer.parseInt(BaseUrl.LoginId);
		testAnswers.test_id = mSelectedTest.testId;
		testAnswers.isDeleted = "F";
		testAnswers.question_id = mGetTestOptions.get(0).questionId;
		testAnswers.is_correct = mGetTestOptions.get(0).isCorrect;
		testAnswers.answer_id = mGetTestOptions.get(0).answersId;
		testAnswers.answer_value = mGetTestOptions.get(0).ansOption;
		testAnswers.is_demo_plate = (mStatus.equalsIgnoreCase("I") ? "I" : "A");
		testAnswers.answer = mGetTestOptions.get(0).answer;

		if (selectedAnswers.equals(mGetTestOptions.get(0).answer)
				&& testAnswers.is_demo_plate.equalsIgnoreCase("I"))
			mCorrectAnsCount++;
		else
			mWrongAnswers++;

		mTestAnswerIds.add(Integer.parseInt(answersManager_ids
				.addUpdateTestAnswers(testAnswers,
						TestAnswersManager.EOperation.ADD_TEST_ANSWERS)
				.toString()));
	}

	private void processNextButtonClick() {
		if (mQuestionNumber > 0) {
			if (mSelectedOption != -1) {
				if (mMainSelectedTest.testType.equalsIgnoreCase("C")
						|| mMainSelectedTest.testType
								.equalsIgnoreCase(AppConstants.E_CIRCULAR)
						|| mMainSelectedTest.testType
								.equalsIgnoreCase(AppConstants.F_RECTANGULAR))
					if (imageCountDownTimer != null) {
						imageCountDownTimer.cancel();
					}
				if (sixtySecTimer != null) {
					sixtySecTimer.cancel();
				}
				insertAnswer(mSelectedOption);
				showQuestion(mQuestionNumber - 1);
				mSelectedOption = -1;
			}
		} else {
			if (mMainSelectedTest.testType.equalsIgnoreCase("C")
					|| mMainSelectedTest.testType
							.equalsIgnoreCase(AppConstants.E_CIRCULAR)
					|| mMainSelectedTest.testType
							.equalsIgnoreCase(AppConstants.F_RECTANGULAR))
				if (imageCountDownTimer != null) {
					imageCountDownTimer.cancel();
				}
			if (sixtySecTimer != null) {
				sixtySecTimer.cancel();
			}
			isTestInProgress = false;
			if (mSelectedOption != -1) {
				insertAnswer(mSelectedOption);
				mSelectedOption = -1;
			} else {
				mWrongAnswers++;
			}
			calculateResultForNextOperation();
		}
	}

	private int answers_given;
	private ArrayList<Gettestquestion> questionList;
	private boolean isColorArrangementLaunched = false;
	/**
	 * Calculates result for the next test operation
	 */
	private void calculateResultForNextOperation() {
		try {
			mtestResultManager = new TestResultManager(TakeATestActivity.this) {
				@Override
				public void handleMessage(Message msg) {
					super.handleMessage(msg);
					if (msg.getData()
							.getString("Operation")
							.equals(TestResultManager.EOperation.ADD_TEST_RESULT
									.toString())) {
						if (isMainTestAdded)
							mResultId = Integer.parseInt(msg.obj.toString());

						TestAnswersManager answersManager = new TestAnswersManager(
								TakeATestActivity.this);
						try {
							answersManager.updateResultIdTestAnswers(
									mTestAnswerIds,
									Integer.parseInt(msg.obj.toString()));
							mTestAnswerIds.clear();
						} catch (TestAnswersException e) {
							e.printStackTrace();
						}
					}
				}
			};

			final TestResult testResult = new TestResult();
			testResult.answers_given = answers_given;
			testResult.question_list = questionList;
			if (questionList != null) {
				questionList = new ArrayList<Gettestquestion>();
			}
			answers_given = 0;
			testResult.test_info_id = mTestInfoId;
			testResult.user_id = Integer.parseInt(BaseUrl.LoginId);
			testResult.test_id = mSelectedTest.testId;
			if (!mSelectedTest.testType.equalsIgnoreCase("D")) {
				mMainAnswersCount = Integer.toString(mCorrectAnsCount);
				mMainNoOfQues = Integer.toString(mSelectedTest.noOfQuestions);
				testResult.parent_id = 0;
				isMainTestAdded = true;
			} else {
				testResult.parent_id = mResultId;
				isMainTestAdded = false;
			}
			testResult.no_of_questions = mSelectedTest.noOfQuestions;
			testResult.min_score = mSelectedTest.minScore;
			testResult.total_demo_plates_cnt = mSelectedTest.maxDemoPlate;
			testResult.correct_answers = mCorrectAnsCount;
			if (!mSelectedTest.testType.equalsIgnoreCase("D")) {
				mMainResult = mCorrectAnsCount < mSelectedTest.minScore
						? "Failed"
						: "Passed";
				if (!isTestInProgress) {
					testResult.passed = mCorrectAnsCount < mSelectedTest.minScore
							? "0"
							: "1";
				} else {
					testResult.passed = "2";
				}
			} else {
				if (!isTestInProgress) {
					if (mCorrectAnsCount >= mSelectedTest.minScore)
						testResult.passed = "Pass";
					else
						testResult.passed = ((mCorrectAnsCount >= mSelectedTest.mildScoreMin)
								&& (mCorrectAnsCount <= mSelectedTest.mildScoreMax)
								? "Mild"
								: ((mCorrectAnsCount >= mSelectedTest.modScoreMin)
										&& (mCorrectAnsCount <= mSelectedTest.modScoreMax)
										? "Moderate"
										: (mCorrectAnsCount >= mSelectedTest.sevScoreMin)
												&& (mCorrectAnsCount <= mSelectedTest.sevScoreMax)
												? "Severe"
												: ""));
				} else {
					testResult.passed = "2";
				}
			}

			testResult.test_taken_date = mTestTakenDate;
			// testResult.test_taken = mSelectedOption == -1 ? "0" : "1";
			testResult.test_taken = "1";
			testResult.is_deleted = "F";
			testResult.server_testId = "0";
			testResult.mild_score_min = mSelectedTest.mildScoreMin;
			testResult.mild_score_max = mSelectedTest.mildScoreMax;
			testResult.mod_score_min = mSelectedTest.modScoreMin;
			testResult.mod_score_max = mSelectedTest.modScoreMax;
			testResult.sev_score_min = mSelectedTest.sevScoreMin;
			testResult.sev_score_max = mSelectedTest.sevScoreMax;
			mtestResultManager.addTestResult(testResult);
			if (contentManager.getTestStarted(TestContentManager.GENERAL_TEST)) {
				contentManager.setTestEnded(TestContentManager.GENERAL_TEST);
				contentManager.putResultSection(AppConstants.GENERAL_TEST,
						testResult);
			} else if (contentManager
					.getTestStarted(TestContentManager.PROTAN_TEST)) {
				contentManager.setTestEnded(TestContentManager.PROTAN_TEST);
				contentManager.putResultSection(AppConstants.PROTAN_TEST,
						testResult);
			} else if (contentManager
					.getTestStarted(TestContentManager.DEUTAN_TEST)) {
				contentManager.setTestEnded(TestContentManager.DEUTAN_TEST);
				contentManager.putResultSection(AppConstants.DEUTAN_TEST,
						testResult);
			} else if (contentManager
					.getTestStarted(TestContentManager.TRITAN_TEST)) {
				contentManager.setTestEnded(TestContentManager.TRITAN_TEST);
				contentManager.putResultSection(AppConstants.TRITAN_TEST,
						testResult);
			}
			processFlow();
		} catch (TestResultException e) {
			e.printStackTrace();
		}
	}

	public static final int GENERAL_PASSED = 1;
	public static final int GENERAL_FAILED = 2;

	private void processFlow() {
		boolean status = false;
		boolean needCountIncrement = true;

		if (!isTestInProgress) {
			if (!isCompressTestStarted
					&& !TextUtils.isEmpty(compressTestInfo.getResponseCode())
					&& compressTestInfo.getResponseCode().equals("0")) {
				needCountIncrement = false;
				boolean isGeneralTestPassed = contentManager
						.isTestPassed(contentManager.getGeneralTestResult());
				if (isGeneralTestPassed) {
					status = false;
					isTestInProgress = false;
					startNextScreen();
				} else {
					if (!needToAdd) {
						status = false;
						isTestInProgress = false;
						startNextScreen();
					} else {
						addRemainingTest();
						status = true;
					}
				}
			} else {
				status = true;
			}
			if (status) {
				if (needCountIncrement) {
					testSectionCount = testSectionCount + 1;
				}
				if (!isCompressTestStarted
						&& !contentManager.isTestPassed(contentManager
								.getResultSection(AppConstants.GENERAL_TEST))) {
					// General test failed
					if (compressFailTestList != null
							&& compressFailTestList.size() > 0) {
						int index = contentManager
								.getNextTestIndex(compressFailTestList);
						if (index != -1) {
							mCurrentDeficiencyTest = index + 1;
						}
						if (index == 0) {
							contentManager
									.setTestStarted(TestContentManager.PROTAN_TEST);
						} else if (index == 1) {
							contentManager
									.setTestStarted(TestContentManager.DEUTAN_TEST);
						} else if (index == 2) {
							contentManager
									.setTestStarted(TestContentManager.TRITAN_TEST);
						}
						if (index == -1) {
							index = 0;
						}
						// Ajay
						// int
						// a=mGetAllTest.get(0).noOfQuestions+mGetAllTest.get(1).noOfQuestions;
						// System.out.println("No of questions"+a);
						startDeficiencyTest(mGetAllTest.get(index), false);
					} else {
						isTestInProgress = false;
						Log.d("TEST",
								"lauched from // General test failed els part ");
						startNextScreen();
					}
				} else {
					// General test passed
					if (contentManager.isTestPassed(contentManager
							.getResultSection(AppConstants.GENERAL_TEST))) {
						if (compressPassTestList != null
								&& compressPassTestList.size() > 0) {
							int index = contentManager
									.getNextTestIndex(compressPassTestList);
							if (index == 0) {
								contentManager
										.setTestStarted(TestContentManager.PROTAN_TEST);
							} else if (index == 1) {
								contentManager
										.setTestStarted(TestContentManager.DEUTAN_TEST);
							} else if (index == 2) {
								contentManager
										.setTestStarted(TestContentManager.TRITAN_TEST);
							}
							if (index != -1) {
								mCurrentDeficiencyTest = index + 1;
							}
							if (index == -1) {
								DevConfig
										.writeLog(
												"General test passed and compress test executed completely so showTestResultView called ",
												"");
								isTestInProgress = false;
								startNextScreen();
							} else {
								DevConfig
										.writeLog(
												"General test passed and compress test started with index: ",
												"" + index);
								startDeficiencyTest(mGetAllTest.get(index),
										false);
							}
						} else {
							// compress test from server is 0 means no test
							// required now. only show the result.
							DevConfig
									.writeLog(
											"compress test is not passed from server so showTestResultView called ",
											"");

							isTestInProgress = false;
							startNextScreen();
						}
					} else {
						// general test failed
						if (compressFailTestList != null
								&& compressFailTestList.size() > 0) {
							int index = contentManager
									.getNextTestIndex(compressFailTestList);
							if (index == 0) {
								contentManager
										.setTestStarted(TestContentManager.PROTAN_TEST);
							} else if (index == 1) {
								contentManager
										.setTestStarted(TestContentManager.DEUTAN_TEST);
							} else if (index == 2) {
								contentManager
										.setTestStarted(TestContentManager.TRITAN_TEST);
							}
							if (index != -1) {
								mCurrentDeficiencyTest = index + 1;
							}
							if (index == -1) {
								DevConfig
										.writeLog(
												"General test failed and compress test executed completely so showTestResultView called ",
												"");
								isTestInProgress = false;
								startNextScreen();
							} else {
								DevConfig
										.writeLog(
												"General test failed and compress test started with index: ",
												"" + index);
								startDeficiencyTest(mGetAllTest.get(index),
										false);
							}
						}
					}
				}
			}
		}
	}

	private void getCompressTestListFromDB() throws GetalltestException {
		mGetAllTestManager = new GetalltestManager(TakeATestActivity.this) {
			@SuppressWarnings("unchecked")
			@Override
			public void handleMessage(Message msg) {
				if (msg.getData()
						.getString("Operation")
						.equals(EOperation.GET_ALL_GETALLTESTS_PARENT_ID
								.toString())) {
					mGetAllTest.clear();
					tempGetAllTest = (ArrayList<Getalltest>) msg.obj;
					if (tempGetAllTest.size() > 0) {
						mGetAllTest.addAll(tempGetAllTest);
						contentManager.setTestsList(mGetAllTest);
					}
				}
			}
		};
		if (mSelectedTest != null && mSelectedTest.testId > 0) {
			mGetAllTestManager.getAllGetalltest(mSelectedTest.testId);
		}
	}

	private TestResult generalTestResult;
	private boolean isCompressTestStarted;

	private int testSectionCount;

	private ArrayList<Getalltest> tempGetAllTest;

	private boolean checkGeneralTestResult(TestResult testResult) {
		boolean result = false;
		if (testResult != null) {
			generalTestResult = testResult;
			if (!TextUtils.isEmpty(testResult.passed)
					&& testResult.passed.equalsIgnoreCase("1")) {
				result = true;
			}
		}
		return result;
	}

	/**
	 * Starts the deficiency test related to the parent test
	 * 
	 * @param getAllTest
	 */
	private void startDeficiencyTest(Getalltest getAllTest,
			final boolean general) {
		try {
			isGeneral = general;
			// Count initialized for next test
			mCorrectAnsCount = 0;
			mWrongAnswers = 0;
			isCompressTestStarted = true;
			mSelectedTest = getAllTest;
			// Ajay : Attempted question should be equal to total no of previous
			// test question plus no of questions of current test
			// attemptedNoOfQquestion=totalNoOfQuestion;
			// Ajay :Add total no of Questions of new test to the previous total
			if (isFirstDeficiencyTest
					&& !contentManager.isTestPassed(contentManager
							.getResultSection(AppConstants.GENERAL_TEST))) {
				attemptedNoOfQquestion = totalNoOfQuestion
						- mGetAllTest.get(2).noOfQuestions;
				totalNoOfQuestion = totalNoOfQuestion
						+ mGetAllTest.get(0).noOfQuestions
						+ mGetAllTest.get(1).noOfQuestions;
				isFirstDeficiencyTest = false;
			}
			if (isGeneral) {
				View SectionDetails = LayoutInflater.from(
						TakeATestActivity.this).inflate(R.layout.begintest,
						null);
				setContentView(SectionDetails);
				// Ajay : video View is removed
				// mVideoView = (VideoView)
				// SectionDetails.findViewById(R.id.videoview);
				// playVideo();

				// Ajay:Changes for Instructions Layout
				if (mSelectedTest.testType.equalsIgnoreCase("F")) {
					aboutus_linLay = SectionDetails
							.findViewById(R.id.aboutus_linLay);
					beginTestBtn = (Button) SectionDetails
							.findViewById(R.id.beginBtn);
					closeTestBtn = (Button) SectionDetails
							.findViewById(R.id.CloseBtn);
					timer_textview = (TextView) SectionDetails
							.findViewById(R.id.timer_textview);
					timer_textview1 = (TextView) SectionDetails
							.findViewById(R.id.timer_textview1);
				} else {
					aboutus_linLay = SectionDetails
							.findViewById(R.id.adultaboutus_linLay);
					beginTestBtn = (Button) SectionDetails
							.findViewById(R.id.beginBtn1);
					closeTestBtn = (Button) SectionDetails
							.findViewById(R.id.CloseBtn1);
					timer_textview = (TextView) SectionDetails
							.findViewById(R.id.timer_textview2);
					timer_textview1 = (TextView) SectionDetails
							.findViewById(R.id.timer_textview3);
				}

				aboutus_linLay = SectionDetails
						.findViewById(R.id.aboutus_linLay);
				aboutus_linLay.setVisibility(View.VISIBLE);
				timerCountSeconds = AppConstants.TEST_STARTED_TIME;
				isTimerStarted = false;
				timer_root_layout = SectionDetails
						.findViewById(R.id.timer_root_layout);
				timer_root_layout.setVisibility(View.GONE);

				closeTestBtn = (Button) SectionDetails
						.findViewById(R.id.CloseBtn);
				closeTestBtn.setVisibility(View.VISIBLE);

				closeTestBtn.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View v) {
						if (mCurrentDeficiencyTest == 0) {
							TestSummaryActivity.testsumaryactivity.tTabWidget
									.setVisibility(View.VISIBLE);
							setTakeATestDetails();
						} else if (mCurrentDeficiencyTest > 0) {
							if (addDeficiencyResult) {
								CloseTestASync();
							} else {
								TestSummaryActivity.testsumaryactivity.tTabWidget
										.setVisibility(View.VISIBLE);
								setTakeATestDetails();
							}

						}

					}
				});

				String timerString = "";
				if (!TextUtils.isEmpty(mSelectedTest.plateDurations + "")) {
					if (mSelectedTest.plateDurations > 9) {
						timerString = timerString
								+ mSelectedTest.plateDurations;
					} else {
						timerString = timerString
								+ mSelectedTest.plateDurations;
					}
				}
				timer_textview.setText(timerString);
				timer_textview1.setText(timerString);

				/*
				 * TextView timer_textview1 = (TextView) SectionDetails
				 * .findViewById(R.id.instr_textview5);
				 * timer_textview1.setText(String.format(
				 * getString(R.string.begin_instr_text5),
				 * mSelectedTest.plateDurations));
				 */

				beginTestBtn = (Button) SectionDetails
						.findViewById(R.id.beginBtn);
				beginTestBtn.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						processBeginButton();
					}
				});
			} else {
				View SectionDetails = LayoutInflater.from(
						TakeATestActivity.this).inflate(R.layout.section_info,
						null);
				setContentView(SectionDetails);
				TextView timeTxt = (TextView) SectionDetails
						.findViewById(R.id.timeTxt);
				TextView SectionTxt = (TextView) SectionDetails
						.findViewById(R.id.sectionTxt);
				SectionTxt.setText("Test Section " + (testSectionCount + 1));
				ImageView sectionImage = (ImageView) SectionDetails
						.findViewById(R.id.sectionImg);

				if (1 == testSectionCount)
					sectionImage
							.setBackgroundResource(R.drawable.section_two_img);

				if (2 == testSectionCount)
					sectionImage
							.setBackgroundResource(R.drawable.section_three_img);

				if (3 == testSectionCount)
					sectionImage
							.setBackgroundResource(R.drawable.section_four_img);

				beginTestSectionBtn = (Button) SectionDetails
						.findViewById(R.id.beginTestSectionBtn);

				SpannableString timeTextSpan = new SpannableString(
						"Each question plate will be displayed  for "
								+ mSelectedTest.plateDurations + " Second(s).");
				timeTextSpan.setSpan(
						new ForegroundColorSpan(Color.parseColor("#000000")),
						0, 42, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
				timeTxt.setText(timeTextSpan, BufferType.SPANNABLE);
				testplatesTxt = (TextView) SectionDetails
						.findViewById(R.id.demoplatesTxt);
				testplatesTxt.setText("Total " + (mSelectedTest.noOfQuestions)
						+ " Test Plate(s) with " + mSelectedTest.maxDemoPlate
						+ " Demo Plate(s).");
				beginTestSectionBtn.setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						processBeginDeficiencyTest(isGeneral);
					}
				});

				isTestInProgress = true;

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void processBeginDeficiencyTest(final boolean isGeneral) {
		addDeficiencyResult = true;
		mGetTestQuestionManager = new GettestquestionManager(
				TakeATestActivity.this) {
			@SuppressWarnings("unchecked")
			@Override
			public void handleMessage(Message msg) {
				mGetTestQuestion = new ArrayList<Gettestquestion>();
				if (msg.getData().getString("Operation")
						.equals(EOperation.GET_ALL_GETTESTQUESTIONS.toString())) {
					mGetTestQuestion.clear();
					mGetTestQuestion
							.addAll((ArrayList<Gettestquestion>) msg.obj);

					Collections.sort(mGetTestQuestion,
							Comparator.getInstance().new TestOrderSorter());
					// Check if the random questions is Yes.
					if (mSelectedTest.randomQuesOrder.equals("Y")) {
						ArrayList<Gettestquestion> temp = new ArrayList<Gettestquestion>();
						for (int i = mGetTestQuestion.size() - 1; i >= 0; i--) {
							if (mGetTestQuestion.get(i).status.equals("A"))
								temp.add(mGetTestQuestion.get(i));
							else
								break; // Since all the demo plates
							// are
							// at the end of the list.
						}

						Collections.shuffle(mGetTestQuestion);
						for (int i = temp.size() - 1; i >= 0; i--) {
							mGetTestQuestion.add(temp.get(i));
						}
					}
					if (mGetTestQuestion.size() != 0) {
						if (isGeneral) {
							contentManager
									.setTestStarted(TestContentManager.GENERAL_TEST);
							contentManager
									.setTestQusetionsList(
											AppConstants.GENERAL_TEST,
											mGetTestQuestion);
						} else {
							if (contentManager
									.getTestStarted(TestContentManager.GENERAL_TEST)) {
								contentManager.setTestQusetionsList(
										AppConstants.GENERAL_TEST,
										mGetTestQuestion);
							} else if (contentManager
									.getTestStarted(TestContentManager.PROTAN_TEST)) {
								contentManager.setTestQusetionsList(
										AppConstants.PROTAN_TEST,
										mGetTestQuestion);
							} else if (contentManager
									.getTestStarted(TestContentManager.DEUTAN_TEST)) {
								contentManager.setTestQusetionsList(
										AppConstants.DEUTAN_TEST,
										mGetTestQuestion);
							} else if (contentManager
									.getTestStarted(TestContentManager.TRITAN_TEST)) {
								contentManager.setTestQusetionsList(
										AppConstants.TRITAN_TEST,
										mGetTestQuestion);
							}
						}
						showQuestion(mGetTestQuestion.size() - 1);
					}
				}
			}
		};
		try {
			mGetTestQuestionManager.getAllGettestquestion(mSelectedTest.testId);
		} catch (GettestquestionException e) {
			e.printStackTrace();
		}
	}
	private void startNextScreen() {
		if (!isColorArrangementLaunched) {
			Intent intent = null;
			if (DevConfig.PDF_TESTING_ENABLED) {
				if (true) {
					contentManager.setTestAnswersList(answersManager_ids
							.getAllTestAnswersList());
					intent = new Intent(TakeATestActivity.this,
							ColorArrangementActivity.class);
				} else {
					intent = new Intent(mContext, ResultActivity.class);
				}
				startActivity(intent);
				isColorArrangementLaunched = true;
				finish();
			} else {
				if (mSelectedTest.d15.equals("Y")) {
					contentManager.isD15onServer = true;
				} else {
					contentManager.isD15onServer = false;
				}
				// Ritesh : Change to keep the D-15 server dependent
				if (contentManager.isColorArrangementRequired()
						&& !contentManager.isPlateVerticalRequired()
						&& mSelectedTest.d15.equals("Y")) { // &&
															// mSelectedTest.d15.equals("Y")
															// //To be
															// uncommented once
															// changes from puja
															// done.
					// D-15 popup - By Parag & Ritesh
					AlertDialog.Builder d15dialogbox = new AlertDialog.Builder(
							TakeATestActivity.this);
					d15dialogbox.setCancelable(true).setMessage(
							"Do you want to continue with D-15 test?");
					d15dialogbox.setPositiveButton("Yes",
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									dialog.cancel();
									contentManager
											.setTestAnswersList(answersManager_ids
													.getAllTestAnswersList());
									final Intent intent = new Intent(
											TakeATestActivity.this,
											ColorArrangementActivity.class);
									startActivity(intent);
									isColorArrangementLaunched = true;
									finish();
								}
							});
					d15dialogbox.setNegativeButton("No",
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									dialog.cancel();
									contentManager.isD15onServer = false;
									final Intent intent = new Intent(mContext,
											ResultActivity.class);
									startActivity(intent);
									isColorArrangementLaunched = true;
									finish();
								}
							});
					d15dialogbox.show();

				} else {
					intent = new Intent(mContext, ResultActivity.class);
					startActivity(intent);
					isColorArrangementLaunched = true;
					finish();
				}
				// startActivity(intent);
				// isColorArrangementLaunched = true;
				// finish();
			}
		}

	}

	/**
	 * Shows the result for the test
	 * 
	 * @param isDeficiencyTestAllowed
	 */
	private void showTestResultView(final boolean isDeficiencyTestAllowed,
			final TestResult testResult) {
		TestSummaryActivity.testsumaryactivity.tTabWidget
				.setVisibility(View.VISIBLE);
		mCorrectAnsCountArr = new ArrayList<Integer>();
		mNoOfQuestionsArr = new ArrayList<Integer>();
		mResultArr = new ArrayList<String>();
		try {
			ArrayList<Getalltest> defTestsArr = new ArrayList<Getalltest>();
			defTestsArr.addAll(mGetAllTestManager
					.getAllGetalltestWithoutAsync(Integer
							.toString(mMainSelectedTest.testId)));
			DefTestCount = defTestsArr.size();
		} catch (GetalltestException e3) {
			e3.printStackTrace();
		}

		if (AndroidUtility.isConnected(TakeATestActivity.this) /*
																 * && BaseUrl.
																 * IS_SYNC_ALLOWED
																 */) {
			BaseUrl.IS_SYNC_ALLOWED = false;
			TestResultManager testResultManager = new TestResultManager(
					TakeATestActivity.this);
			// try {
			// testResultManager.synchronizeAllTestsWithServer();
			// } catch (TestResultException e2) {
			// e2.printStackTrace();
			// }
		}

		mCorrectAnsCountArr = new ArrayList<Integer>();
		mNoOfQuestionsArr = new ArrayList<Integer>();
		mResultArr = new ArrayList<String>();
		if (isDeficiencyTestAllowed == false
				&& mTestResultSections.get("Section2") != null
				&& mTestResultSections.get("Section3") != null
				&& mTestResultSections.get("Section4") != null) {
			mCorrectAnsCountArr.clear();
			mCorrectAnsCountArr
					.add(mTestResultSections.get("Section2").correct_answers);
			mCorrectAnsCountArr
					.add(mTestResultSections.get("Section3").correct_answers);
			mCorrectAnsCountArr
					.add(mTestResultSections.get("Section4").correct_answers);
			mNoOfQuestionsArr
					.add(mTestResultSections.get("Section2").no_of_questions
							- mTestResultSections.get("Section2").total_demo_plates_cnt);
			mNoOfQuestionsArr
					.add(mTestResultSections.get("Section3").no_of_questions
							- mTestResultSections.get("Section3").total_demo_plates_cnt);
			mNoOfQuestionsArr
					.add(mTestResultSections.get("Section4").no_of_questions
							- mTestResultSections.get("Section4").total_demo_plates_cnt);
			mResultArr.add(mTestResultSections.get("Section2").passed);
			mResultArr.add(mTestResultSections.get("Section3").passed);
			mResultArr.add(mTestResultSections.get("Section4").passed);

			mDefCorrectAnsCount = TextUtils.join(",", mCorrectAnsCountArr);
			mDefNoOfQues = TextUtils.join(",", mNoOfQuestionsArr);
			mDefResult = TextUtils.join(",", mResultArr);
		}
		isTestInProgress = false;
		diagnosisDetails = new Diagnosisdetails();
		mScoreMessage = getScoreMessage();
		mDiagnosisMessage = getDiagosisMessage();
		if (mDiagnosisMessage.equalsIgnoreCase("Normal Color Vision.")) {
			mCommonView = vwResultDetails_Normal;
		} else {
			mCommonView = vwResultDetails;
		}
		setContentView(mCommonView);

		usernameTxt = (TextView) mCommonView.findViewById(R.id.userNameTxt2);
		testTakenTxt = (TextView) mCommonView.findViewById(R.id.testTakenTxt2);
		DateTimeTxt = (TextView) mCommonView.findViewById(R.id.dateTimeTxt2);
		scoreTxt = (TextView) mCommonView.findViewById(R.id.scoreTxt2);
		diagnosisTxt = (TextView) mCommonView.findViewById(R.id.diagnosisTxt2);
		resultStatusTxt = (TextView) mCommonView.findViewById(R.id.statusTxt);
		resultStatusTxt.setMovementMethod(LinkMovementMethod.getInstance());
		mtakeAnotherTestBtn = (Button) mCommonView
				.findViewById(R.id.takAnothTestBtn);
		emailcertificateBtn = (Button) mCommonView
				.findViewById(R.id.emailCertificateBtn);
		downloadCertificate = (Button) mCommonView
				.findViewById(R.id.dwnLoadBtn);
		savePageBtn = (Button) mCommonView.findViewById(R.id.savePageBtn);
		takeNextTestBtn = (Button) mCommonView
				.findViewById(R.id.button_take_next_test);
		sdCardLocation = Environment.getExternalStorageDirectory().toString();
		savePageBtn.setVisibility(View.VISIBLE);
		mtakeAnotherTestBtn.setVisibility(View.VISIBLE);
		if (!mSelectedTest.testType.equalsIgnoreCase("D")
				&& testResult.passed.equals("0")) {
			emailcertificateBtn.setVisibility(View.GONE);
			downloadCertificate.setVisibility(View.GONE);
		} else if (!mSelectedTest.testType.equalsIgnoreCase("D")
				&& testResult.passed.equals("1")) {
			emailcertificateBtn.setVisibility(View.VISIBLE);
			downloadCertificate.setVisibility(View.VISIBLE);
		}
		boolean result = false;
		result = isUserPassed();
		if (result) {
			emailcertificateBtn.setVisibility(View.VISIBLE);
			downloadCertificate.setVisibility(View.VISIBLE);
		} else {
			emailcertificateBtn.setVisibility(View.GONE);
			downloadCertificate.setVisibility(View.GONE);
		}

		// if (mTestResultSections.get("Section2") != null) {
		// if ((mTestResultSections.get("Section1") != null
		// && mTestResultSections.get("Section1").passed.equals("1")
		// && mTestResultSections.get("Section2") != null
		// && mTestResultSections.get("Section2").passed
		// .equals("Pass")
		// && mTestResultSections.get("Section3") != null
		// && mTestResultSections.get("Section3").passed
		// .equals("Pass") && mTestResultSections
		// .get("Section4").passed.equals("Pass"))) {
		// emailcertificateBtn.setVisibility(View.VISIBLE);
		// downloadCertificate.setVisibility(View.VISIBLE);
		// } else {
		// emailcertificateBtn.setVisibility(View.GONE);
		// downloadCertificate.setVisibility(View.GONE);
		// }
		// }

		savePageBtn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				String statusMsg = "";
				if (sdCardLocation != null && !sdCardLocation.equals("")) {
					savePageBtn.setVisibility(View.INVISIBLE);
					takeNextTestBtn.setVisibility(View.INVISIBLE);
					emailcertificateBtn.setVisibility(View.INVISIBLE);
					mtakeAnotherTestBtn.setVisibility(View.INVISIBLE);
					downloadCertificate.setVisibility(View.INVISIBLE);
					Bitmap bitmap = mCommonView.getDrawingCache();
					File file = new File(sdCardLocation + "/" + testinfo.fname
							+ "_" + testinfo.lname + "_"
							+ mMainSelectedTest.title + ".png");
					try {
						file.createNewFile();
						FileOutputStream ostream = new FileOutputStream(file);
						bitmap.compress(CompressFormat.PNG, 100, ostream);
						ostream.close();
					} catch (Exception e) {
						e.printStackTrace();
					}
					statusMsg = "Saved Successfully.";
					Toast.makeText(
							TakeATestActivity.this,
							"Flie Stored at: " + sdCardLocation + "/"
									+ testinfo.fname + "_" + testinfo.lname
									+ "_" + mMainSelectedTest.title + ".png",
							Toast.LENGTH_SHORT).show();
					savePageBtn.setVisibility(View.VISIBLE);
					mtakeAnotherTestBtn.setVisibility(View.VISIBLE);
					if (!mSelectedTest.testType.equalsIgnoreCase("D")
							&& testResult.passed.equals("0")) {
						emailcertificateBtn.setVisibility(View.GONE);
						downloadCertificate.setVisibility(View.GONE);
					} else {
						emailcertificateBtn.setVisibility(View.VISIBLE);
						downloadCertificate.setVisibility(View.VISIBLE);
					}
					if (mTestResultSections.get("Section2") != null) {
						if ((!mTestResultSections.get("Section2").passed
								.equals("Pass")
								|| !mTestResultSections.get("Section3").passed
										.equals("Pass") || !mTestResultSections
								.get("Section4").passed.equals("Pass"))) {
							emailcertificateBtn.setVisibility(View.GONE);
							downloadCertificate.setVisibility(View.GONE);
						} else {
							emailcertificateBtn.setVisibility(View.VISIBLE);
							downloadCertificate.setVisibility(View.VISIBLE);
						}
					}
					takeNextTestBtn.setVisibility(testResult.passed.equals("1")
							&& isDeficiencyTestAllowed && DefTestCount == 3
							? View.VISIBLE
							: View.GONE);
				} else {
					statusMsg = "No SD Card";

				}
				AlertDialog.Builder alert = new AlertDialog.Builder(
						TakeATestActivity.this);
				alert.setCancelable(false).setMessage(statusMsg);
				alert.setNegativeButton(getString(R.string.ok_text),
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.cancel();
							}
						});
				alert.show();
			}
		});
		emailcertificateBtn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if (AndroidUtility.isConnected(getApplicationContext())) {
					new DownloadCertificateASync(TakeATestActivity.this)
							.execute();
				} else {
					AlertDialog.Builder alertstatus = new AlertDialog.Builder(
							TakeATestActivity.this);
					alertstatus.setCancelable(false).setMessage(
							"No Internet Connectivity.");
					alertstatus.setNegativeButton(getString(R.string.ok_text),
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									dialog.cancel();
								}
							});
					alertstatus.show();
				}
			}
		});
		mtakeAnotherTestBtn.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				try {
					setTakeATestDetails();
				} catch (Exception e) {

				}
				TestSummaryActivity.testsumaryactivity.tTabWidget
						.setVisibility(View.VISIBLE);
			}
		});
		usernameTxt.setText(": " + testinfo.fname + " " + testinfo.lname);
		testTakenTxt.setText(": " + mMainSelectedTest.title);
		try {
			DateTimeTxt.setText(": " + BaseUrl.getCurrentDatetime() + " PST");
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (!mSelectedTest.testType.equalsIgnoreCase("D")) {
			mTestResult = (testResult.passed.equals("0")
					? "(Failed)"
					: "(Passed)");
		} else {

			mTestResult = testResult.passed;
		}

		scoreTxt.setText(Html.fromHtml(": " + mScoreMessage));
		diagnosisTxt.setText(": " + mDiagnosisMessage);

		diagnosisDetailsManager = new DiagnosisdetailsManager(
				TakeATestActivity.this) {
			public void handleMessage(Message msg) {
				if (msg.getData().getString("Operation")
						.equals(EOperation.ADD_DIAGNOSISDETAILS.toString())) {
					mDiagnosisId = msg.obj.toString();

				}
			};
		};
		diagnosisDetails.fName = testinfo.fname;
		diagnosisDetails.lName = testinfo.lname;
		diagnosisDetails.Testname = mMainSelectedTest.title;
		diagnosisDetails.Createddate = mTestTakenDate;
		diagnosisDetails.Diagnosismessage = mDiagnosisMessage;
		diagnosisDetails.Scoremessage = mScoreMessage;
		diagnosisDetails.Testid = mMainSelectedTest.testId;
		diagnosisDetails.testInfoId = mTestInfoId;

		try {
			diagnosisDetailsManager.addDiagnosisdetails(diagnosisDetails);
		} catch (DiagnosisdetailsException e1) {
			e1.printStackTrace();
		}
		if (!mSelectedTest.testType.equalsIgnoreCase("D")) {
			if (testResult.passed.equals("1")) {
				resultStatusTxt.setText(Html.fromHtml(resultSuccessMsg));
			} else {
				resultStatusTxt.setText(Html.fromHtml(resultFailureMsg));
			}

		} else {
			if (isUserPassed()) {
				resultStatusTxt.setText(Html.fromHtml(resultSuccessMsg));
			} else {
				resultStatusTxt.setText(Html.fromHtml(resultFailureMsg));
			}
		}
		takeNextTestBtn.setVisibility(testResult.passed.equals("1")
				&& isDeficiencyTestAllowed && DefTestCount == 3
				? View.VISIBLE
				: View.GONE);

		takeNextTestBtn.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				try {
					mGetAllTestManager = new GetalltestManager(
							TakeATestActivity.this) {
						@SuppressWarnings("unchecked")
						@Override
						public void handleMessage(Message msg) {
							if (msg.getData()
									.getString("Operation")
									.equals(EOperation.GET_ALL_GETALLTESTS_PARENT_ID
											.toString())) {
								mGetAllTest.clear();
								mGetAllTest
										.addAll((ArrayList<Getalltest>) msg.obj);
								if (mGetAllTest.size() > 0) {
									contentManager
											.setTestStarted(TestContentManager.GENERAL_TEST);
									startDeficiencyTest(mGetAllTest
											.get(mCurrentDeficiencyTest), true);
									mCurrentDeficiencyTest++;
								}
							}
						}
					};

					mGetAllTestManager.getAllGetalltest(mSelectedTest.testId);
				} catch (GetalltestException e) {
					e.printStackTrace();
				}
			}
		});

		// downloadCertificate.setOnClickListener(new View.OnClickListener() {
		// @Override
		// public void onClick(View v) {
		// AndroidUtility.downloadPDFDocument(TakeATestActivity.this,
		// mTestInfoId, null, null);
		// }
		// });
	}
	private boolean isUserPassed() {
		boolean result = false;
		if (mTestResultSections != null && mTestResultSections.size() > 0) {
			TestResult section1 = mTestResultSections.get("Section1");
			TestResult section2 = mTestResultSections.get("Section2");
			TestResult section3 = mTestResultSections.get("Section3");
			TestResult section4 = mTestResultSections.get("Section4");
			if (section1 != null) {
				if (mTestResultSections.get("Section1").passed
						.equalsIgnoreCase("1")
						|| mTestResultSections.get("Section1").passed
								.equalsIgnoreCase("Pass")) {
					result = true;
					if (section2 != null) {
						if (mTestResultSections.get("Section2").passed
								.equalsIgnoreCase("1")
								|| mTestResultSections.get("Section2").passed
										.equalsIgnoreCase("Pass")) {
							result = true;
							if (section3 != null) {
								if (mTestResultSections.get("Section3").passed
										.equalsIgnoreCase("1")
										|| mTestResultSections.get("Section3").passed
												.equalsIgnoreCase("Pass")) {
									result = true;
									if (section4 != null) {
										if (mTestResultSections.get("Section4").passed
												.equalsIgnoreCase("1")
												|| mTestResultSections
														.get("Section4").passed
														.equalsIgnoreCase("Pass")) {
											result = true;
										} else {
											result = false;
										}
									}
								} else {
									result = false;
								}
							}
						} else {
							result = false;
						}
					}
				} else {
					result = false;
				}
			}
		} else {
			result = false;
		}
		return result;
	}
	/**
	 * Returns the Score Message to Display in PDF.
	 * 
	 * @return
	 */
	public String getScoreMessage() {
		String score = " General Test    \t"
				+ mTestResultSections.get("Section1").correct_answers
				+ "/"
				+ (mTestResultSections.get("Section1").no_of_questions - mTestResultSections
						.get("Section1").total_demo_plates_cnt)
				+ "  \t"
				+ (mTestResultSections.get("Section1").passed.equals("0")
						? "(<font color='#FF0000'>Failed</font>)" + "<br/> \n"
						: "(<font color='#1E940A'>Passed</font>)" + ".<br/> \n");

		String protan = "Protan(red)";
		String deutan = "Deutan(green)";
		String tritan = "Tritan(blue)";

		ArrayList<CompressTest> list;

		boolean isGenaralPassed = checkGeneralTestResult(generalTestResult);
		if (isGenaralPassed) {
			list = compressPassTestList;
		} else {
			list = compressFailTestList;
		}

		if (mTestResultSections.get("Section2") != null) {
			String testName = "Protan(red)";
			if (list != null && list.size() >= 1) {
				CompressTest test = list.get(0);
				if (test != null) {
					if (!TextUtils.isEmpty(test.getName())) {
						if (test.getName().equals(AppConstants.PROTAN_TEST)) {
							testName = "Protan(red)";
						} else if (test.getName().equals(
								AppConstants.DEUTAN_TEST)) {
							testName = "Deutan(green)";
						} else if (test.getName().equals(
								AppConstants.TRITAN_TEST)) {
							testName = "Tritan(blue)";
						}
					}
				}
			}

			score += "\t"
					+ testName
					+ "      \t"
					+ mTestResultSections.get("Section2").correct_answers
					+ "/"
					+ (mTestResultSections.get("Section2").no_of_questions - mTestResultSections
							.get("Section2").total_demo_plates_cnt)
					+ "    \t"
					+ (mTestResultSections.get("Section2").passed
							.equals("Pass")
							? "(<font color='#1E940A'>Passed</font>)"
									+ "<br/> \n"
							: "<font color='#FF0000'>"
									+ mTestResultSections.get("Section2").passed
									+ "</font>" + "<br/> \n");
		}

		if (mTestResultSections.get("Section3") != null) {
			String testName = "Deutan(green)";
			if (list != null && list.size() >= 2) {
				CompressTest test = list.get(1);
				if (test != null) {
					if (!TextUtils.isEmpty(test.getName())) {
						if (test.getName().equals(AppConstants.PROTAN_TEST)) {
							testName = "Protan(red)";
						} else if (test.getName().equals(
								AppConstants.DEUTAN_TEST)) {
							testName = "Deutan(green)";
						} else if (test.getName().equals(
								AppConstants.TRITAN_TEST)) {
							testName = "Tritan(blue)";
						}
					}
				}
			}

			score += "\t"
					+ testName
					+ "      \t"
					+ mTestResultSections.get("Section3").correct_answers
					+ "/"
					+ (mTestResultSections.get("Section3").no_of_questions - mTestResultSections
							.get("Section3").total_demo_plates_cnt)
					+ "   \t"
					+ (mTestResultSections.get("Section3").passed
							.equals("Pass")
							? "(<font color='#1E940A'>Passed</font>)"
									+ "<br/> \n"
							: "<font color='#FF0000'>"
									+ mTestResultSections.get("Section3").passed
									+ "</font>" + "<br/> \n");
		}

		if (mTestResultSections.get("Section4") != null) {
			String testName = "Tritan(blue)";
			if (list != null && list.size() >= 3) {
				CompressTest test = list.get(2);
				if (test != null) {
					if (!TextUtils.isEmpty(test.getName())) {
						if (test.getName().equals(AppConstants.PROTAN_TEST)) {
							testName = "Protan(red)";
						} else if (test.getName().equals(
								AppConstants.DEUTAN_TEST)) {
							testName = "Deutan(green)";
						} else if (test.getName().equals(
								AppConstants.TRITAN_TEST)) {
							testName = "Tritan(blue)";
						}
					}
				}
			}

			score += "\t"
					+ testName
					+ "      \t"
					+ mTestResultSections.get("Section4").correct_answers
					+ "/"
					+ (mTestResultSections.get("Section4").no_of_questions - mTestResultSections
							.get("Section4").total_demo_plates_cnt)
					+ "    \t"
					+ (mTestResultSections.get("Section4").passed
							.equals("Pass")
							? "(<font color='#1E940A'>Passed</font>)"
									+ "<br/> \n"
							: "<font color='#FF0000'>"
									+ mTestResultSections.get("Section4").passed
									+ "</font>" + "<br/> ");
		}
		score += "";
		return score;
	}

	/**
	 * clear selection to the image options
	 */
	private void clearSelectionImages() {
		if (DevConfig.TESTING) {
			processNextButtonClick();
		}
		nxtBtn.setEnabled(true);
		iv1.setBackgroundResource(R.drawable.light_gray_bg2);
		iv2.setBackgroundResource(R.drawable.light_gray_bg2);
		iv3.setBackgroundResource(R.drawable.light_gray_bg2);
		iv4.setBackgroundResource(R.drawable.light_gray_bg2);
		iv5.setBackgroundResource(R.drawable.light_gray_bg2);
		iv6.setBackgroundResource(R.drawable.light_gray_bg2);
		iv7.setBackgroundResource(R.drawable.light_gray_bg2);
		iv8.setBackgroundResource(R.drawable.light_gray_bg2);
		iv9.setBackgroundResource(R.drawable.light_gray_bg2);
	}

	/**
	 * clear selection to the text options
	 */
	private void clearSelectionTexts() {
		nxtBtn.setEnabled(true);
		if (DevConfig.TESTING) {
			processNextButtonClick();
		}
		tv1.setBackgroundResource(R.drawable.light_gray_bg);
		tv2.setBackgroundResource(R.drawable.light_gray_bg);
		tv3.setBackgroundResource(R.drawable.light_gray_bg);
		tv4.setBackgroundResource(R.drawable.light_gray_bg);
		tv5.setBackgroundResource(R.drawable.light_gray_bg);
		tv6.setBackgroundResource(R.drawable.light_gray_bg);
		tv7.setBackgroundResource(R.drawable.light_gray_bg);
		tv8.setBackgroundResource(R.drawable.light_gray_bg);
		tv9.setBackgroundResource(R.drawable.light_gray_bg);
	}

	Handler mTimerCountHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			if (msg.what == 1) {
				timerCountSeconds = timerCountSeconds - 1;
				if (timerCountSeconds == 0) {
					isTimerStarted = false;
					isTimerNeeded = false;
					timer_root_layout.setVisibility(View.GONE);
					mTimerCountHandler.removeMessages(1);
					if (isDeficiencyTestStarted) {
						processBeginDeficiencyTest(isGeneral);
					} else {
						processBeginTestMethod();
					}
				} else {
					updateTimerContents();
					mTimerCountHandler.sendEmptyMessageDelayed(1, 1000);
				}
			}
		}

	};

	/**
	 * Creates the question answer view
	 * 
	 * @param questionNumber
	 * @return
	 */
	private View getQuestionView(int questionNumber) {
		View vw = null;
		alert = new AlertDialog.Builder(TakeATestActivity.this);
		if (mGetTestQuestion.get(questionNumber).answerType
				.equalsIgnoreCase("T")
				&& mMainSelectedTest.testType
						.equalsIgnoreCase(AppConstants.F_RECTANGULAR)
				|| mMainSelectedTest.testType
						.equalsIgnoreCase(AppConstants.E_CIRCULAR)
				|| mMainSelectedTest.testType.equalsIgnoreCase("C")) {
			mCurrentViewShown = TEST_EXCHILD_OPTION_VIEW;
			if (mOptionExChildMainLayout == null) {
				if (contentManager.isPlateVerticalRequired()) {
					vw = LayoutInflater.from(TakeATestActivity.this).inflate(
							R.layout.testtestoptionchild_vertical, null);
				} else {
					vw = LayoutInflater.from(TakeATestActivity.this).inflate(
							R.layout.testtextoptionchild, null);
				}
				setContentView(vw);
				mPlateExChildImageview = (ImageView) vw
						.findViewById(R.id.plate_imageview);
				mOptionExChildMainLayout = vw;
				initOptionExChildViews();
			} else {
				setContentView(mOptionExChildMainLayout);
				vw = mOptionExChildMainLayout;
				mPlateExChildImageview = (ImageView) vw
						.findViewById(R.id.plate_imageview);
			}

			if (mPlateExChildImageview == null) {
				mPlateExChildImageview = (ImageView) getWindow().getDecorView()
						.getRootView().findViewById(R.id.plate_imageview);
			}

			if (isTimerNeeded) {
				mPlateExChildImageview.setVisibility(View.INVISIBLE);
				timer_root_layout = vw.findViewById(R.id.new_timer_layout);
				timer_root_layout.setVisibility(View.VISIBLE);
				mNextExChildImageview.setVisibility(View.INVISIBLE);
				mOptionExChildCloseButton.setVisibility(View.INVISIBLE);
				mOptionExsExChildRootlayout.setVisibility(View.INVISIBLE);
			} else {
				mPlateExChildImageview.setVisibility(View.VISIBLE);
				setOptionsExChildValues();
				// setOptionsExChildButtonsSelections(null, true);
				mNextExChildImageview
						.setBackgroundResource(R.drawable.next_numpad);
				mNextExChildImageview.setEnabled(false);
				mNextExChildImageview.setVisibility(View.VISIBLE);
				mOptionExChildCloseButton.setVisibility(View.VISIBLE);
				mOptionExsExChildRootlayout.setVisibility(View.VISIBLE);
			}
		} else if (mGetTestQuestion.get(questionNumber).answerType
				.equalsIgnoreCase("I")) {
			mCurrentViewShown = TEST_CHILD_OPTION_VIEW;
			if (mOptionChildMainLayout == null) {
				vw = LayoutInflater.from(TakeATestActivity.this).inflate(
						R.layout.testoptionchild, null);
				setContentView(vw);
				mOptionChildMainLayout = vw;
				initOptionChildViews();
			} else {
				setContentView(mOptionChildMainLayout);
				vw = mOptionChildMainLayout;
			}

			if (isTimerNeeded) {
				mPlateChildImageview.setVisibility(View.INVISIBLE);
				timer_root_layout = vw.findViewById(R.id.new_timer_layout);
				timer_root_layout.setVisibility(View.VISIBLE);
				mNextChildImageview.setVisibility(View.INVISIBLE);
				mOptionChildCloseButton.setVisibility(View.INVISIBLE);
				mOptionsChildRootlayout.setVisibility(View.INVISIBLE);
			} else {
				mPlateChildImageview.setVisibility(View.VISIBLE);
				// setOptionsChildValues();
				// setOptionsChildButtonsSelections(null, true);
				mNextChildImageview
						.setBackgroundResource(R.drawable.next_arrow_btn);
				mNextChildImageview.setEnabled(true);
				mNextChildImageview.setVisibility(View.VISIBLE);
				mOptionChildCloseButton.setVisibility(View.VISIBLE);
				mOptionsChildRootlayout.setVisibility(View.VISIBLE);
			}
		} else {
			mCurrentViewShown = TEST_OPTION_VIEW;
			if (mOptionMainLayout == null) {
				vw = LayoutInflater.from(TakeATestActivity.this).inflate(
						R.layout.testoption, null);
				setContentView(vw);
				mOptionMainLayout = vw;
				initOptionViews();
			} else {
				setContentView(mOptionMainLayout);
				vw = mOptionMainLayout;
			}

			if (isTimerNeeded) {
				mPlateImageview.setVisibility(View.INVISIBLE);
				timer_root_layout = vw.findViewById(R.id.new_timer_layout);
				timer_root_layout.setVisibility(View.VISIBLE);
				mNextImageview.setVisibility(View.INVISIBLE);
				mOptionCloseButton.setVisibility(View.INVISIBLE);
				mOptionsRootlayout.setVisibility(View.INVISIBLE);
			} else {
				mPlateImageview.setVisibility(View.VISIBLE);
				// mGreyCircleImageView.setVisibility(View.VISIBLE);
				setOptionsValues();
				setOptionsButtonsSelections(null, true);
				mNextImageview.setBackgroundResource(R.drawable.next_numpad);
				mNextImageview.setEnabled(false);
				mOptionsRootlayout.setVisibility(View.INVISIBLE);
				mNextImageview.setVisibility(View.VISIBLE);
				mOptionCloseButton.setVisibility(View.VISIBLE);
			}
		}
		mTestOptionsScrollview = (ScrollView) vw
				.findViewById(R.id.test_options_scrollview);
		return vw;
	}

	/**
	 * Displays the question
	 */
	private void displayQuestion() {
		selectedAnswerCircle = false;
		selectedAnswerSquare = false;
		selectedAnswerStar = false;
		View vw = getQuestionView(mQuestionNumber);
		// Ajay:code for clear answer textField for next question
		EditText ans_option_edt = (EditText) vw
				.findViewById(R.id.options_answer);
		if (ans_option_edt != null) {
			ans_option_edt.setText("");
			answerString = "";
		}
		TestSummaryActivity.testsumaryactivity.tTabWidget
				.setVisibility(View.GONE);
		// Ritesh : Changes for multiple choice.
		if (vw.findViewById(R.id.option_row1_view1_imageview) != null) {
			vw.findViewById(R.id.option_row1_view1_imageview)
					.setBackgroundResource(R.drawable.circle);
			vw.findViewById(R.id.option_row1_view2_imageview)
					.setBackgroundResource(R.drawable.star);
			vw.findViewById(R.id.option_row1_view3_imageview)
					.setBackgroundResource(R.drawable.squareoptionimage);
		}
		// Ajay : Update status of test ProgresBar
		updateTestProgressBar(vw);
		if (isTimerNeeded) {
			updateTimerContents();
			mTimerCountHandler.sendEmptyMessageDelayed(1, 1000);
		} else {
			answers_given = answers_given + 1;
			// Ajay: Changes for Updating progressBar of ongoing Test
			attemptedNoOfQquestion = attemptedNoOfQquestion + 1;
			if (mCurrentViewShown == TEST_OPTION_VIEW) {
				mPlateImageview.setVisibility(View.VISIBLE);
				// mGreyCircleImageView.setVisibility(View.VISIBLE);
				sixtySecTimer = new CountDownTimer(15000, 1000) {
					@Override
					public void onTick(long millisUntilFinished) {
					}

					@Override
					public void onFinish() {
						mPlateImageview.setVisibility(View.INVISIBLE);
						mOptionsRootlayout.setVisibility(View.VISIBLE);
						mOptionCloseButton.setVisibility(View.VISIBLE);
						mNextImageview.setVisibility(View.VISIBLE);
						if (mQuestionNumber > 0) {
							if (mSelectedOption != -1) {
								insertAnswer(mSelectedOption);
								mSelectedOption = -1;
							} else {
								mWrongAnswers++;
							}
							showQuestion(mQuestionNumber - 1);
						} else {
							isTestInProgress = false;
							if (mSelectedOption != -1) {
								insertAnswer(mSelectedOption);
								mSelectedOption = -1;
							} else {
								mWrongAnswers++;
							}
							calculateResultForNextOperation();
						}
					}
				};

				System.out.println(mGetTestOptions.get(mQuestionNumber).answer);
				try {
					String[] temp = mGetTestQuestion.get(mQuestionNumber).questionImage
							.split("/");

					byte[] imag = null;

					try {
						// if (Arrays.asList(
						// getResources().getAssets().list("test_images"))
						// .contains(temp[temp.length - 1])) {
						imag = AndroidUtility.getBytesFromFile(getAssets()
								.open("test_images/" + temp[temp.length - 1]));
						// }
					} catch (Exception e1) {
						e1.printStackTrace();
						if (imag == null) {
							imag = AndroidUtility
									.getBytesFromFile(getFilesDir()
											+ "/test_images/"
											+ temp[temp.length - 1]);
						}
					}

					// Drawable image = null;
					try {
						// image = new BitmapDrawable(
						// BitmapFactory.decodeByteArray(imag, 0,
						// imag.length));
						// mPlateImageview.setImageDrawable(image);

						/*
						 * Bitmap tempBitmap2 =
						 * BitmapFactory.decodeByteArray(imag, 0, imag.length);
						 */

						Bitmap tempBitmap2 = AndroidUtility
								.decodeSampledBitmapFromResource(imag, 620, 620);

						if (spdrSDK.hasTransformFiles()) {
							spdrSDK.loadModeSRGB();
							mPlateImageview.setImageBitmap(spdrSDK
									.colorCorrectedImage(tempBitmap2));
						} else {
							// Toast.makeText(TakeATestActivity.this,
							// "Displaying non callibrated images",
							// Toast.LENGTH_LONG).show();
							mPlateImageview.setImageBitmap(tempBitmap2);
						}
						Log.e("Image at 1 ", "setimage mPlateImageview");

						initOptionTestCountDownCounter();
					} catch (Exception e) {
						// optionImage.setImageResource(R.drawable.defaultimage);
						e.printStackTrace();
						if (!TextUtils.isEmpty(mGetTestQuestion
								.get(mQuestionNumber).questionImage)
								&& AndroidUtility.isConnected(mContext)) {
							isTaskStarted = true;
							startDownloadPlateTask(mGetTestQuestion
									.get(mQuestionNumber).questionImage);
						} else {
							mPlateImageview
									.setImageResource(R.drawable.defaultimage);
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				final ImageView plateView;
				if (mCurrentViewShown == TEST_EXCHILD_OPTION_VIEW) {
					plateView = mPlateExChildImageview;
				} else {
					plateView = mPlateChildImageview;
				}
				plateView.setVisibility(View.VISIBLE);
				sixtySecTimer = new CountDownTimer(15000, 1000) {
					@Override
					public void onTick(long millisUntilFinished) {

					}

					@Override
					public void onFinish() {
						plateView.setVisibility(View.INVISIBLE);
						if (mQuestionNumber > 0) {
							if (mSelectedOption != -1) {
								insertAnswer(mSelectedOption);
								mSelectedOption = -1;
							} else {
								mWrongAnswers++;
							}
							showQuestion(mQuestionNumber - 1);
						} else {
							isTestInProgress = false;
							if (mSelectedOption != -1) {
								insertAnswer(mSelectedOption);
								mSelectedOption = -1;
							} else {
								mWrongAnswers++;
							}
							calculateResultForNextOperation();
						}
					}
				};

				// checks the Demo Plate
				// if (mGetTestQuestion.get(mQuestionNumber).status
				// .equalsIgnoreCase("A")){
				// testplateInfoTxt.setVisibility(View.VISIBLE);}

				try {
					String[] temp = mGetTestQuestion.get(mQuestionNumber).questionImage
							.split("/");
					byte[] imag = null;
					try {
						// if (Arrays.asList(
						// getResources().getAssets().list("test_images"))
						// .contains(temp[temp.length - 1])) {
						imag = AndroidUtility.getBytesFromFile(getAssets()
								.open("test_images/" + temp[temp.length - 1]));
						// }
					} catch (Exception e1) {
						e1.printStackTrace();
						if (imag == null) {
							imag = AndroidUtility
									.getBytesFromFile(getFilesDir()
											+ "/test_images/"
											+ temp[temp.length - 1]);
						}
					}

					if (imag == null) {
						if (!TextUtils.isEmpty(mGetTestQuestion
								.get(mQuestionNumber).questionImage)
								&& AndroidUtility.isConnected(mContext)) {
							isTaskStarted = true;
							startDownloadPlateTask(mGetTestQuestion
									.get(mQuestionNumber).questionImage);
						} else {
							plateView.setImageResource(R.drawable.defaultimage);
						}
					} else {
						// Drawable image = null;
						try {
							// image = new BitmapDrawable(
							// BitmapFactory.decodeByteArray(imag, 0,
							// imag.length));
							// plateView.setImageDrawable(image);
							// Calibration Code
							Bitmap tempBitmap = AndroidUtility
									.decodeSampledBitmapFromResource(imag, 620,
											620);
							if (spdrSDK.hasTransformFiles()) {
								spdrSDK.loadModeSRGB();
								plateView.setImageBitmap(spdrSDK
										.colorCorrectedImage(tempBitmap));
							} else {
								// Toast.makeText(TakeATestActivity.this,
								// "Displaying non callibrated images",
								// Toast.LENGTH_LONG).show();
								plateView.setImageBitmap(tempBitmap);
							}
							initCountDownCounter();
						} catch (Exception e) {
							// optionImage.setImageResource(R.drawable.defaultimage);
							e.printStackTrace();
							if (!TextUtils.isEmpty(mGetTestQuestion
									.get(mQuestionNumber).questionImage)
									&& AndroidUtility.isConnected(mContext)) {
								isTaskStarted = true;
								startDownloadPlateTask(mGetTestQuestion
										.get(mQuestionNumber).questionImage);
							} else {
								plateView
										.setImageResource(R.drawable.defaultimage);
							}
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}

	private View mOptionExChildCircleLayout;
	private View mOptionExChildMainLayout;
	private ImageView mOptionExChildCloseButton;
	private ImageView mNextExChildImageview;
	private ImageView mPlateExChildImageview;
	private ViewGroup mOptionExsExChildRootlayout;
	private View mOptionExChildRow1View1;
	private View mOptionExChildRow1View2;
	private View mOptionExChildRow1View3;
	private View mOptionExChildRow2View1;
	private View mOptionExChildRow2View2;
	private View mOptionExChildRow2View3;
	private View mOptionExChildRow3View1;
	private View mOptionExChildRow3View2;
	private View mOptionExChildRow3View3;

	private View mOptionExChildRow4View1;
	private View mOptionExChildRow4View2;
	private View mOptionExChildRow4View3;

	private ArrayList<View> mOptionsExChildViewList = new ArrayList<View>();
	private TextView mOptionExChildRow1Textview1;
	private TextView mOptionExChildRow1Textview2;
	private TextView mOptionExChildRow1Textview3;
	private TextView mOptionExChildRow2Textview1;
	private TextView mOptionExChildRow2Textview2;
	private TextView mOptionExChildRow2Textview3;
	private TextView mOptionExChildRow3Textview1;
	private TextView mOptionExChildRow3Textview2;
	private TextView mOptionExChildRow3Textview3;

	private TextView mOptionExChildRow4Textview1;
	private TextView mOptionExChildRow4Textview2;
	private TextView mOptionExChildRow4Textview3;
	private EditText mOptionExChildAnswer;
	private ImageView mOptionChildNothingImageView;

	private void initOptionExChildViews() {
		mOptionExChildCircleLayout = this.findViewById(R.id.circle_layout);
		mOptionExChildCloseButton = (ImageView) this
				.findViewById(R.id.close_imageview);
		mNextExChildImageview = (ImageView) this
				.findViewById(R.id.n_imageview);
		mPlateExChildImageview = (ImageView) this
				.findViewById(R.id.plate_imageview);
		mOptionExsExChildRootlayout = (ViewGroup) this
				.findViewById(R.id.options_root_layout);
		mOptionExChildAnswer = (EditText) this
				.findViewById(R.id.options_answer);
		// Ajay:changes for Font Family Edittext
		typefaceKaiti = Typeface.createFromAsset(this.getAssets(),
				"fonts/fontscore.com_k-kaiti.ttf");
		mOptionExChildAnswer.setTypeface(typefaceKaiti);

		mOptionExChildRow1View1 = this.findViewById(R.id.option_row1_view1);
		mOptionExChildRow1View2 = this.findViewById(R.id.option_row1_view2);
		mOptionExChildRow1View3 = this.findViewById(R.id.option_row1_view3);
		mOptionExChildRow2View1 = this.findViewById(R.id.option_row2_view1);
		mOptionExChildRow2View2 = this.findViewById(R.id.option_row2_view2);
		mOptionExChildRow2View3 = this.findViewById(R.id.option_row2_view3);
		mOptionExChildRow3View1 = this.findViewById(R.id.option_row3_view1);
		mOptionExChildRow3View2 = this.findViewById(R.id.option_row3_view2);
		mOptionExChildRow3View3 = this.findViewById(R.id.option_row3_view3);
		// pramod:
		mOptionExChildRow4View1 = this.findViewById(R.id.option_row4_view1);
		mOptionExChildRow4View2 = this.findViewById(R.id.option_row4_view2);
		mOptionExChildRow4View3 = this.findViewById(R.id.option_row4_view3);
		// NOTE: next arrow position is used by "nothing" button
		mOptionChildNothingView = this.findViewById(R.id.next_arrow_imageview);

		mOptionsExChildViewList.add(mOptionExChildRow1View1);
		mOptionsExChildViewList.add(mOptionExChildRow1View2);
		mOptionsExChildViewList.add(mOptionExChildRow1View3);
		mOptionsExChildViewList.add(mOptionExChildRow2View1);
		mOptionsExChildViewList.add(mOptionExChildRow2View2);
		mOptionsExChildViewList.add(mOptionExChildRow2View3);
		mOptionsExChildViewList.add(mOptionExChildRow3View1);
		mOptionsExChildViewList.add(mOptionExChildRow3View2);
		mOptionsExChildViewList.add(mOptionExChildRow3View3);

		// pramod:
		mOptionsExChildViewList.add(mOptionExChildRow4View1);
		mOptionsExChildViewList.add(mOptionExChildRow4View2);
		mOptionsExChildViewList.add(mOptionExChildRow4View3);
		mOptionsExChildViewList.add(mOptionChildNothingView);

		mOptionExChildRow1Textview1 = (TextView) this
				.findViewById(R.id.option_row1_view1_textview);

		mOptionExChildRow1View1
				.setOnClickListener(mOptionExChildTestClickListener);
		mOptionExChildRow1Textview2 = (TextView) this
				.findViewById(R.id.option_row1_view2_textview);

		mOptionExChildRow1View2
				.setOnClickListener(mOptionExChildTestClickListener);
		mOptionExChildRow1Textview3 = (TextView) this
				.findViewById(R.id.option_row1_view3_textview);

		mOptionExChildRow1View3
				.setOnClickListener(mOptionExChildTestClickListener);
		mOptionExChildRow2Textview1 = (TextView) this
				.findViewById(R.id.option_row2_view1_textview);

		mOptionExChildRow2View1
				.setOnClickListener(mOptionExChildTestClickListener);

		mOptionExChildRow2Textview2 = (TextView) this
				.findViewById(R.id.option_row2_view2_textview);

		mOptionExChildRow2View2
				.setOnClickListener(mOptionExChildTestClickListener);

		mOptionExChildRow2Textview3 = (TextView) this
				.findViewById(R.id.option_row2_view3_textview);

		mOptionExChildRow2View3
				.setOnClickListener(mOptionExChildTestClickListener);
		mOptionExChildRow3Textview1 = (TextView) this
				.findViewById(R.id.option_row3_view1_textview);
		mOptionExChildRow3View1
				.setOnClickListener(mOptionExChildTestClickListener);

		mOptionExChildRow3Textview2 = (TextView) this
				.findViewById(R.id.option_row3_view2_textview);

		mOptionExChildRow3View2
				.setOnClickListener(mOptionExChildTestClickListener);
		mOptionExChildRow3Textview3 = (TextView) this
				.findViewById(R.id.option_row3_view3_textview);

		mOptionExChildRow3View3
				.setOnClickListener(mOptionExChildTestClickListener);

		// pramod:mOptionExChildRow4Textview1
		mOptionExChildRow4Textview1 = (TextView) this
				.findViewById(R.id.option_row4_view1_textview);

		mOptionExChildRow4View1
				.setOnClickListener(mOptionExChildTestClickListener);
		mOptionExChildRow4Textview2 = (TextView) this
				.findViewById(R.id.option_row4_view2_textview);
		mOptionExChildRow4View2
				.setOnClickListener(mOptionExChildTestClickListener);
		mOptionChildNothingView
				.setOnClickListener(mOptionExChildTestClickListener);

		/*
		 * mOptionExChildRow4Textview3 = (TextView) mOptionExChildRow4View3
		 * .findViewById(R.id.option_row4_view3_textview);
		 */

		mOptionExChildCloseButton
				.setOnClickListener(mOptionExChildTestClickListener);
		mNextExChildImageview
				.setOnClickListener(mOptionExChildTestClickListener);

		/*
		 * mOptionExChildRow4View3
		 * .setOnClickListener(mOptionExChildTestClickListener);
		 */

	}

	private OnClickListener mOptionExChildTestClickListener = new OnClickListener() {

		@Override
		public void onClick(View view) {
			if (view.getId() != R.id.close_imageview
					&& view.getId() != R.id.next_arrow_imageview
					&& view.getId() != R.id.n_imageview) {
				// setOptionsExChildButtonsSelections(view, false);
				mNextExChildImageview
						.setBackgroundResource(R.drawable.next_arrow_btn);
				mNextExChildImageview.setEnabled(true);
			}

			switch (view.getId()) {
				case R.id.close_imageview :
					showCloseClickDialog();
					break;
				case R.id.n_imageview :
					onNextClicked();
					// onNClicked();
					break;
				case R.id.next_arrow_imageview :
					// onNextClicked();
					onNClicked();
					break;
				case R.id.option_row1_view1 :
					// mSelectedOption = 0;
					answerString = answerString + "1";
					mOptionExChildAnswer.setText(answerString);
					break;
				case R.id.option_row1_view2 :
					// mSelectedOption = 1;
					answerString = answerString + "2";
					mOptionExChildAnswer.setText(answerString);
					break;
				case R.id.option_row1_view3 :
					// mSelectedOption = 2;
					answerString = answerString + "3";
					mOptionExChildAnswer.setText(answerString);
					break;
				case R.id.option_row2_view1 :
					// mSelectedOption = 3;
					answerString = answerString + "4";
					mOptionExChildAnswer.setText(answerString);
					break;
				case R.id.option_row2_view2 :
					// mSelectedOption = 4;
					answerString = answerString + "5";
					mOptionExChildAnswer.setText(answerString);
					break;
				case R.id.option_row2_view3 :
					// mSelectedOption = 5;
					answerString = answerString + "6";
					mOptionExChildAnswer.setText(answerString);
					break;
				case R.id.option_row3_view1 :
					// mSelectedOption = 6;
					answerString = answerString + "7";
					mOptionExChildAnswer.setText(answerString);
					break;
				case R.id.option_row3_view2 :
					// mSelectedOption = 7;
					answerString = answerString + "8";
					mOptionExChildAnswer.setText(answerString);
					break;
				case R.id.option_row3_view3 :
					// mSelectedOption = 8;
					answerString = answerString + "9";
					mOptionExChildAnswer.setText(answerString);
					break;
				case R.id.option_row4_view1 :
					onCClicked();
					break;
				case R.id.option_row4_view2 :
					// mSelectedOption = 8;
					answerString = answerString + "0";
					mOptionExChildAnswer.setText(answerString);
					break;
			/*
			 * case R.id.option_row4_view3 : // mSelectedOption = 8;
			 * answerString=""; mOptionExChildAnswer.setText("nothing"); break;
			 */
			}
		}
	};
	
	private void onNextClicked() {
		if (mTestOptionsScrollview != null) {
			mTestOptionsScrollview.smoothScrollTo(0, 0);
		}

		for (int i = 0; i < mGetTestOptions.size(); i++) {
			if (mOptionExChildAnswer
					.getText()
					.toString()
					.equalsIgnoreCase(
							mGetTestOptions.get(i).ansOption)) {
				mSelectedOption = i;
				break;
			} else {
				if (mGetTestOptions.get(i).ansOption.toString()
						.equalsIgnoreCase("Nothing"))
					mSelectedOption = i;
			}
		}
		answerString = "";
		mOptionExChildAnswer.setText("");
		processNextButtonClick();
	}

	private void onNClicked() {
		// activate next button
		mNextExChildImageview.setBackgroundResource(R.drawable.next_arrow_btn);
		mNextExChildImageview.setEnabled(true);

		// handle N click
		answerString = "";
		mOptionExChildAnswer.setText("N");
	}

	private void onCClicked() {
		// mSelectedOption = 8;
		// answerString=answerString+mOptionExChildRow4Textview1.getText();
		mNextExChildImageview.setBackgroundResource(R.drawable.next_numpad);
		mNextExChildImageview.setEnabled(false);
		mOptionExChildAnswer.setText("");
		answerString = "";
	}

	private void setOptionsExChildValues() {
		/*
		 * setNOrValueOption(mOptionExChildRow1Textview1,
		 * mGetTestOptions.get(0).ansOption);
		 * setNOrValueOption(mOptionExChildRow1Textview2,
		 * mGetTestOptions.get(1).ansOption);
		 * setNOrValueOption(mOptionExChildRow1Textview3,
		 * mGetTestOptions.get(2).ansOption);
		 * setNOrValueOption(mOptionExChildRow2Textview1,
		 * mGetTestOptions.get(3).ansOption);
		 * setNOrValueOption(mOptionExChildRow2Textview2,
		 * mGetTestOptions.get(4).ansOption);
		 * setNOrValueOption(mOptionExChildRow2Textview3,
		 * mGetTestOptions.get(5).ansOption);
		 * setNOrValueOption(mOptionExChildRow3Textview1,
		 * mGetTestOptions.get(6).ansOption);
		 * setNOrValueOption(mOptionExChildRow3Textview2,
		 * mGetTestOptions.get(7).ansOption);
		 * setNOrValueOption(mOptionExChildRow3Textview3,
		 * mGetTestOptions.get(8).ansOption);
		 */

		/*
		 * setNOrValueOption(mOptionExChildRow1Textview1, "1");
		 * setNOrValueOption(mOptionExChildRow1Textview2, "2");
		 * setNOrValueOption(mOptionExChildRow1Textview3, "3");
		 * setNOrValueOption(mOptionExChildRow2Textview1, "4");
		 * setNOrValueOption(mOptionExChildRow2Textview2, "5");
		 * setNOrValueOption(mOptionExChildRow2Textview3, "6");
		 * setNOrValueOption(mOptionExChildRow3Textview1, "7");
		 * setNOrValueOption(mOptionExChildRow3Textview2, "8");
		 * setNOrValueOption(mOptionExChildRow3Textview3, "9");
		 * setNOrValueOption(mOptionExChildRow4Textview1, "c");
		 * setNOrValueOption(mOptionExChildRow4Textview2, "0");
		 * setNOrValueOption(mOptionExChildRow4Textview3, "n");
		 */

	}

	private void setOptionsExChildButtonsSelections(View selectedView,
			boolean reset) {
		if (mOptionsExChildViewList != null
				&& mOptionsExChildViewList.size() > 0) {
			for (View view : mOptionsExChildViewList) {
				if (!reset && selectedView != null) {
					if (view.getId() == selectedView.getId()) {
						view.setBackgroundResource(R.drawable.option_selected_button);
					} else {
						view.setBackgroundResource(R.drawable.option_normal_button);
					}
				} else {
					view.setBackgroundResource(R.drawable.option_normal_button);
				}
			}
		}
	}

	private void setOptionsChildValues() {
		if (mOptionsChildViewList != null && mOptionsChildViewList.size() > 0) {
			for (int i = 0; i < mOptionsChildViewList.size(); i++) {
				RelativeLayout view = (RelativeLayout) mOptionsChildViewList
						.get(i);
				setOptionExChildPlate((ImageView) view.getChildAt(0),
						mGetTestOptions.get(i));
			}
		}
	}

	private void setOptionExChildPlate(ImageView view, Gettestanswers answer) {
		byte[] imag = null;
		if (!TextUtils.isEmpty(answer.imagePath)) {
			String[] temp = answer.imagePath.split("/");
			try {
				// if (Arrays.asList(
				// getResources().getAssets().list("test_images"))
				// .contains(temp[temp.length - 1])) {
				imag = AndroidUtility.getBytesFromFile(getAssets().open(
						"test_images/" + temp[temp.length - 1]));
				// }
			} catch (Exception e) {
				e.printStackTrace();
				if (imag == null) {
					imag = AndroidUtility.getBytesFromFile(getFilesDir()
							+ "/test_images/" + temp[temp.length - 1]);
				}
			}
		} else {
			imag = answer.imageData;
		}
		if (imag != null) {
			Log.d("TEST", "byte image start :" + System.currentTimeMillis());

			Drawable plateDrawable = new BitmapDrawable(
					AndroidUtility.decodeSampledBitmapFromResource(imag, 620,
							620));
			/*
			 * Drawable plateDrawable = new BitmapDrawable(
			 * BitmapFactory.decodeByteArray(imag, 0, imag.length));
			 */
			Log.d("TEST", "byte image end :" + System.currentTimeMillis());
			view.setImageDrawable(plateDrawable);
		}
	}

	private void initOptionChildViews() {
		selectedAnswerCircle = false;
		selectedAnswerSquare = false;
		selectedAnswerStar = false;
		mOptionChildCircleLayout = mOptionChildMainLayout
				.findViewById(R.id.circle_layout);
		mOptionChildCloseButton = (ImageView) mOptionChildMainLayout
				.findViewById(R.id.close_imageview);
		mNextChildImageview = (ImageView) mOptionChildMainLayout
				.findViewById(R.id.next_arrow_imageview);
		mPlateChildImageview = (ImageView) mOptionChildMainLayout
				.findViewById(R.id.plate_imageview);
		if (mPlateChildImageview == null) {
			mPlateChildImageview = (ImageView) findViewById(R.id.plate_imageview);
		}
		mOptionsChildRootlayout = (RelativeLayout) mOptionChildMainLayout
				.findViewById(R.id.options_root_layout);

		mOptionChildRow1View1 = mOptionChildMainLayout
				.findViewById(R.id.option_row1_view1);
		mOptionChildRow1View2 = mOptionChildMainLayout
				.findViewById(R.id.option_row1_view2);
		mOptionChildRow1View3 = mOptionChildMainLayout
				.findViewById(R.id.option_row1_view3);
		/*
		 * mOptionChildRow2View1 = mOptionChildMainLayout
		 * .findViewById(R.id.option_row2_view1); mOptionChildRow2View2 =
		 * mOptionChildMainLayout .findViewById(R.id.option_row2_view2);
		 * mOptionChildRow2View3 = mOptionChildMainLayout
		 * .findViewById(R.id.option_row2_view3); mOptionChildRow3View1 =
		 * mOptionChildMainLayout .findViewById(R.id.option_row3_view1);
		 * mOptionChildRow3View2 = mOptionChildMainLayout
		 * .findViewById(R.id.option_row3_view2); mOptionChildRow3View3 =
		 * mOptionChildMainLayout .findViewById(R.id.option_row3_view3);
		 */

		mOptionsChildViewList.add(mOptionChildRow1View1);
		mOptionsChildViewList.add(mOptionChildRow1View2);
		mOptionsChildViewList.add(mOptionChildRow1View3);
		/*
		 * mOptionsChildViewList.add(mOptionChildRow1View2);
		 * mOptionsChildViewList.add(mOptionChildRow2View2);
		 * mOptionsChildViewList.add(mOptionChildRow2View3);
		 * mOptionsChildViewList.add(mOptionChildRow1View3);
		 * mOptionsChildViewList.add(mOptionChildRow3View2);
		 * mOptionsChildViewList.add(mOptionChildRow3View3);
		 */

		// Ajay: Changes for Multiple choice Question
		mOptionChildRow1Imageview1 = (ImageView) mOptionChildRow1View1
				.findViewById(R.id.option_row1_view1_textview);
		mOptionChildRow1Imageview2 = (ImageView) mOptionChildRow1View2
				.findViewById(R.id.option_row1_view2_textview);
		mOptionChildRow1Imageview3 = (ImageView) mOptionChildRow1View3
				.findViewById(R.id.option_row1_view3_textview);
		/*
		 * mOptionChildRow2Imageview1 = (ImageView) mOptionChildRow2View1
		 * .findViewById(R.id.option_row2_view1_textview);
		 * mOptionChildRow2Imageview2 = (ImageView) mOptionChildRow2View2
		 * .findViewById(R.id.option_row2_view2_textview);
		 * mOptionChildRow2Imageview3 = (ImageView) mOptionChildRow2View3
		 * .findViewById(R.id.option_row2_view3_textview);
		 * mOptionChildRow3Imageview1 = (ImageView) mOptionChildRow3View1
		 * .findViewById(R.id.option_row3_view1_textview);
		 * mOptionChildRow3Imageview2 = (ImageView) mOptionChildRow3View2
		 * .findViewById(R.id.option_row3_view2_textview);
		 * mOptionChildRow3Imageview3 = (ImageView) mOptionChildRow3View3
		 * .findViewById(R.id.option_row3_view3_textview);
		 */

		mOptionChildCloseButton
				.setOnClickListener(mOptionChildTestClickListener);
		mNextChildImageview.setOnClickListener(mOptionChildTestClickListener);

		mOptionChildRow1View1.setOnClickListener(mOptionChildTestClickListener);
		mOptionChildRow1View2.setOnClickListener(mOptionChildTestClickListener);
		mOptionChildRow1View3.setOnClickListener(mOptionChildTestClickListener);
		// mOptionChildRow2View1.setOnClickListener(mOptionChildTestClickListener);
		// mOptionChildRow2View2.setOnClickListener(mOptionChildTestClickListener);
		// mOptionChildRow2View3.setOnClickListener(mOptionChildTestClickListener);
		// mOptionChildRow3View1.setOnClickListener(mOptionChildTestClickListener);
		// mOptionChildRow3View2.setOnClickListener(mOptionChildTestClickListener);
		// mOptionChildRow3View3.setOnClickListener(mOptionChildTestClickListener);
	}

	private OnClickListener mOptionChildTestClickListener = new OnClickListener() {

		@Override
		public void onClick(View view) {
			if (view.getId() != R.id.close_imageview
					&& view.getId() != R.id.next_arrow_imageview) {
				// setOptionsChildButtonsSelections(view, false);
				mNextChildImageview
						.setBackgroundResource(R.drawable.next_arrow_btn);
				mNextChildImageview.setEnabled(true);
			}
			switch (view.getId()) {
				case R.id.close_imageview :
					showCloseClickDialog();
					break;
				case R.id.next_arrow_imageview :
					if (mTestOptionsScrollview != null) {
						mTestOptionsScrollview.scrollTo(0, 0);
					}
					String selectedAnswer = null;
					if (selectedAnswerCircle && !selectedAnswerSquare
							&& !selectedAnswerStar) {
						// 1
						selectedAnswer = "1";
					} else if (selectedAnswerStar && !selectedAnswerSquare
							&& !selectedAnswerCircle) {
						// 2
						selectedAnswer = "2";
					} else if (selectedAnswerSquare && !selectedAnswerCircle
							&& !selectedAnswerStar) {
						// 3
						selectedAnswer = "3";
					} else if (selectedAnswerCircle && selectedAnswerStar
							&& !selectedAnswerSquare) {
						// 1,2
						selectedAnswer = "1,2";
					} else if (selectedAnswerStar && selectedAnswerSquare
							&& !selectedAnswerCircle) {
						// 2,3
						selectedAnswer = "2,3";
					} else if (selectedAnswerCircle && selectedAnswerSquare
							&& !selectedAnswerStar) {
						// 1,3
						selectedAnswer = "1,3";
					} else if (selectedAnswerCircle && selectedAnswerStar
							&& selectedAnswerSquare) {
						// 1,2,3
						selectedAnswer = "1,2,3";
					} else {
						selectedAnswer = "";
					}
					processChildNextButtonClick(selectedAnswer);
					break;
				case R.id.option_row1_view1 :
					if (!selectedAnswerCircle) {
						mSelectedOption = 1;
						selectedAnswerCircle = true;
						view.findViewById(R.id.option_row1_view1_imageview)
								.setBackgroundResource(
										R.drawable.circleselected);
					} else {
						mSelectedOption = 0;
						selectedAnswerCircle = false;
						view.findViewById(R.id.option_row1_view1_imageview)
								.setBackgroundResource(R.drawable.circle);
					}
					break;
				case R.id.option_row1_view2 :
					if (!selectedAnswerStar) {
						mSelectedOption = 2;
						selectedAnswerStar = true;
						view.findViewById(R.id.option_row1_view2_imageview)
								.setBackgroundResource(R.drawable.starselected);
						view.setBackgroundResource(R.drawable.starselected);
					} else {
						mSelectedOption = 0;
						selectedAnswerStar = false;
						view.findViewById(R.id.option_row1_view2_imageview)
								.setBackgroundResource(R.drawable.star);
					}
					break;
				case R.id.option_row1_view3 :
					if (!selectedAnswerSquare) {
						mSelectedOption = 3;
						selectedAnswerSquare = true;
						view.findViewById(R.id.option_row1_view3_imageview)
								.setBackgroundResource(
										R.drawable.squareselected);
					} else {
						mSelectedOption = 0;
						selectedAnswerSquare = false;
						view.findViewById(R.id.option_row1_view3_imageview)
								.setBackgroundResource(
										R.drawable.squareoptionimage);
					}
					break;
			}
		}
	};

	private View mOptionChildCircleLayout;
	private ScrollView mTestOptionsScrollview;
	private View mOptionChildMainLayout;
	private ImageView mOptionChildCloseButton;
	private ImageView mNextChildImageview;
	private ImageView mPlateChildImageview;
	private RelativeLayout mOptionsChildRootlayout;
	private View mOptionChildRow1View1;
	private View mOptionChildRow1View2;
	private View mOptionChildRow1View3;
	private View mOptionChildRow2View1;
	private View mOptionChildRow2View2;
	private View mOptionChildRow2View3;
	private View mOptionChildRow3View1;
	private View mOptionChildRow3View2;
	private View mOptionChildRow3View3;
	private View mOptionChildNothingView;

	private ArrayList<View> mOptionsChildViewList = new ArrayList<View>();
	private ImageView mOptionChildRow1Imageview1;
	private ImageView mOptionChildRow1Imageview2;
	private ImageView mOptionChildRow1Imageview3;
	private ImageView mOptionChildRow2Imageview1;
	private ImageView mOptionChildRow2Imageview2;
	private ImageView mOptionChildRow2Imageview3;
	private ImageView mOptionChildRow3Imageview1;
	private ImageView mOptionChildRow3Imageview2;
	private ImageView mOptionChildRow3Imageview3;

	private int mCurrentViewShown;
	public static final int TEST_EXCHILD_OPTION_VIEW = 1;
	public static final int TEST_CHILD_OPTION_VIEW = 2;
	public static final int TEST_OPTION_VIEW = 3;

	private void initOptionTestCountDownCounter() {
		imageCountDownTimer = new CountDownTimer(
				mSelectedTest.plateDurations * 1000, 1000) {
			@Override
			public void onTick(long millisUntilFinished) {
			}

			@Override
			public void onFinish() {
				// // Based on the test type - Child / Adult / D
				// if (mMainSelectedTest.testType.equalsIgnoreCase("A")) {
				// mPlateImageview.setVisibility(View.GONE);
				// // testplateInfoTxt.setVisibility(View.GONE);
				//
				mPlateImageview.setVisibility(View.INVISIBLE);
				mOptionsRootlayout.setVisibility(View.VISIBLE);
				mOptionCloseButton.setVisibility(View.VISIBLE);
				mNextImageview.setVisibility(View.VISIBLE);

				// } else {
				// mPlateImageview.setVisibility(View.INVISIBLE);
				// testplateInfoTxt.setVisibility(View.GONE);
				// }

				// optionsTab.setVisibility(View.VISIBLE);
				// optionsInfo.setVisibility(View.VISIBLE);
				// nxtBtn.setVisibility(View.VISIBLE);
				sixtySecTimer.start();
			}
		}.start();
	}

	private View mCircleLayout;
	private View mOptionMainLayout;
	private ImageView mOptionCloseButton;
	private ImageView mNextImageview;
	private ImageView mPlateImageview;
	private RelativeLayout mOptionsRootlayout;
	private View mOptionRow1View1;
	private View mOptionRow1View2;
	private View mOptionRow1View3;
	private View mOptionRow2View1;
	private View mOptionRow2View2;
	private View mOptionRow2View3;
	private View mOptionRow3View1;
	private View mOptionRow3View2;
	private View mOptionRow3View3;

	private ArrayList<View> mOptionsViewList = new ArrayList<View>();;
	private TextView mOptionRow1TextView1;
	private TextView mOptionRow1TextView2;
	private TextView mOptionRow1TextView3;
	private TextView mOptionRow2TextView1;
	private TextView mOptionRow2TextView2;
	private TextView mOptionRow2TextView3;
	private TextView mOptionRow3TextView1;
	private TextView mOptionRow3TextView2;
	private TextView mOptionRow3TextView3;

	private void setOptionsValues() {
		setNOrValueOption(mOptionRow1TextView1,
				mGetTestOptions.get(0).ansOption);
		setNOrValueOption(mOptionRow1TextView2,
				mGetTestOptions.get(1).ansOption);
		setNOrValueOption(mOptionRow1TextView3,
				mGetTestOptions.get(2).ansOption);
		setNOrValueOption(mOptionRow2TextView1,
				mGetTestOptions.get(3).ansOption);
		setNOrValueOption(mOptionRow2TextView2,
				mGetTestOptions.get(4).ansOption);
		setNOrValueOption(mOptionRow2TextView3,
				mGetTestOptions.get(5).ansOption);
		setNOrValueOption(mOptionRow3TextView1,
				mGetTestOptions.get(6).ansOption);
		setNOrValueOption(mOptionRow3TextView2,
				mGetTestOptions.get(7).ansOption);
		setNOrValueOption(mOptionRow3TextView3,
				mGetTestOptions.get(8).ansOption);
	}

	private void setOptionsButtonsSelections(View selectedView, boolean reset) {
		if (mOptionsViewList != null && mOptionsViewList.size() > 0) {
			for (View view : mOptionsViewList) {
				if (!reset && selectedView != null) {
					if (view.getId() == selectedView.getId()) {
						view.setBackgroundResource(R.drawable.option_selected_button);
					} else {
						view.setBackgroundResource(R.drawable.option_normal_button);
					}
				} else {
					view.setBackgroundResource(R.drawable.option_normal_button);
				}
			}
		}
	}

	private void setNOrValueOption(TextView textview, String value) {
		if (textview != null && !TextUtils.isEmpty(value)) {
			if (value.equalsIgnoreCase("Nothing")) {
				textview.setText("n");
			} else {
				textview.setText(value);
			}
		}
	}

	private void initOptionViews() {
		mCircleLayout = mOptionMainLayout.findViewById(R.id.circle_layout);
		mOptionCloseButton = (ImageView) mOptionMainLayout
				.findViewById(R.id.close_imageview);
		mNextImageview = (ImageView) mOptionMainLayout
				.findViewById(R.id.next_arrow_imageview);
		mPlateImageview = (ImageView) mOptionMainLayout
				.findViewById(R.id.plate_imageview);
		// mGreyCircleImageView = (ImageView) mOptionMainLayout
		// .findViewById(R.id.grey_bg_white_circle);
		mOptionsRootlayout = (RelativeLayout) mOptionMainLayout
				.findViewById(R.id.options_root_layout);

		// int topBottomMargin = 40;
		// RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(
		// deviceHeight - topBottomMargin, deviceHeight - topBottomMargin);
		// params.topMargin = 20;
		// params.bottomMargin = 20;
		// params.addRule(RelativeLayout.CENTER_IN_PARENT);
		// mCircleLayout.setLayoutParams(params);
		mOptionRow1View1 = mOptionMainLayout
				.findViewById(R.id.option_row1_view1);
		mOptionRow1View2 = mOptionMainLayout
				.findViewById(R.id.option_row1_view2);
		mOptionRow1View3 = mOptionMainLayout
				.findViewById(R.id.option_row1_view3);
		mOptionRow2View1 = mOptionMainLayout
				.findViewById(R.id.option_row2_view1);
		mOptionRow2View2 = mOptionMainLayout
				.findViewById(R.id.option_row2_view2);
		mOptionRow2View3 = mOptionMainLayout
				.findViewById(R.id.option_row2_view3);
		mOptionRow3View1 = mOptionMainLayout
				.findViewById(R.id.option_row3_view1);
		mOptionRow3View2 = mOptionMainLayout
				.findViewById(R.id.option_row3_view2);
		mOptionRow3View3 = mOptionMainLayout
				.findViewById(R.id.option_row3_view3);

		mOptionsViewList.add(mOptionRow1View1);
		mOptionsViewList.add(mOptionRow1View2);
		mOptionsViewList.add(mOptionRow1View3);
		mOptionsViewList.add(mOptionRow2View1);
		mOptionsViewList.add(mOptionRow2View2);
		mOptionsViewList.add(mOptionRow2View3);
		mOptionsViewList.add(mOptionRow3View1);
		mOptionsViewList.add(mOptionRow3View2);
		mOptionsViewList.add(mOptionRow3View3);

		mOptionRow1TextView1 = (TextView) mOptionRow1View1
				.findViewById(R.id.option_row1_view1_textview);
		mOptionRow1TextView2 = (TextView) mOptionRow1View2
				.findViewById(R.id.option_row1_view2_textview);
		mOptionRow1TextView3 = (TextView) mOptionRow1View3
				.findViewById(R.id.option_row1_view3_textview);
		mOptionRow2TextView1 = (TextView) mOptionRow2View1
				.findViewById(R.id.option_row2_view1_textview);
		mOptionRow2TextView2 = (TextView) mOptionRow2View2
				.findViewById(R.id.option_row2_view2_textview);
		mOptionRow2TextView3 = (TextView) mOptionRow2View3
				.findViewById(R.id.option_row2_view3_textview);
		mOptionRow3TextView1 = (TextView) mOptionRow3View1
				.findViewById(R.id.option_row3_view1_textview);
		mOptionRow3TextView2 = (TextView) mOptionRow3View2
				.findViewById(R.id.option_row3_view2_textview);
		mOptionRow3TextView3 = (TextView) mOptionRow3View3
				.findViewById(R.id.option_row3_view3_textview);

		mOptionCloseButton.setOnClickListener(mOptionTestClickListener);
		mNextImageview.setOnClickListener(mOptionTestClickListener);

		mOptionRow1View1.setOnClickListener(mOptionTestClickListener);
		mOptionRow1View2.setOnClickListener(mOptionTestClickListener);
		mOptionRow1View3.setOnClickListener(mOptionTestClickListener);
		mOptionRow2View1.setOnClickListener(mOptionTestClickListener);
		mOptionRow2View2.setOnClickListener(mOptionTestClickListener);
		mOptionRow2View3.setOnClickListener(mOptionTestClickListener);
		mOptionRow3View1.setOnClickListener(mOptionTestClickListener);
		mOptionRow3View2.setOnClickListener(mOptionTestClickListener);
		mOptionRow3View3.setOnClickListener(mOptionTestClickListener);

	}

	private OnClickListener mOptionTestClickListener = new OnClickListener() {

		@Override
		public void onClick(View view) {
			if (view.getId() != R.id.close_imageview
					&& view.getId() != R.id.next_arrow_imageview) {
				setOptionsButtonsSelections(view, false);
				mNextImageview.setBackgroundResource(R.drawable.next_arrow_btn);
				mNextImageview.setEnabled(true);
			}
			switch (view.getId()) {
				case R.id.close_imageview :
					showCloseClickDialog();
					break;
				case R.id.next_arrow_imageview :
					if (mTestOptionsScrollview != null) {
						mTestOptionsScrollview.scrollTo(0, 0);
					}
					processNextButtonClick();
					break;
				case R.id.option_row1_view1 :
					mSelectedOption = 0;
					break;
				case R.id.option_row1_view2 :
					mSelectedOption = 1;
					break;
				case R.id.option_row1_view3 :
					mSelectedOption = 2;
					break;
				case R.id.option_row2_view1 :
					mSelectedOption = 3;
					break;
				case R.id.option_row2_view2 :
					mSelectedOption = 4;
					break;
				case R.id.option_row2_view3 :
					mSelectedOption = 5;
					break;
				case R.id.option_row3_view1 :
					mSelectedOption = 6;
					break;
				case R.id.option_row3_view2 :
					mSelectedOption = 7;
					break;
				case R.id.option_row3_view3 :
					mSelectedOption = 8;
					break;

			}

		}

	};

	private void showCloseClickDialog() {
		if (getUserPlan.unlimitedCredit.equalsIgnoreCase("Y")) {
			alert.setMessage("Do you really want to exit from the test?");
		} else {
			alert.setMessage("Do you really want to exit from the test? \n Available credits will be reduced.");
		}
		alert.setCancelable(false);
		alert.setPositiveButton("Yes", new DialogInterface.OnClickListener() {

			@Override
			public void onClick(DialogInterface dialog, int which) {
				dialog.dismiss();
				// Ajay:
				totalNoOfQuestion = 0;
				attemptedNoOfQquestion = 0;
				isFirstDeficiencyTest = true;
				CloseTestASync();

			}
		});
		alert.setNegativeButton("No", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				dialog.dismiss();

			}
		});
		alert.show();
	}

	/**
	 * Back pressed event for Test activity
	 */
	@Override
	public void onBackPressed() {
		if (isTimerStarted) {
			/*
			 * mTimerCountHandler.removeMessages(1);
			 * timer_root_layout.setVisibility(View.GONE);
			 * aboutus_linLay.setVisibility(View.VISIBLE);
			 */
			Toast.makeText(this, "Test starting please wait...",
					Toast.LENGTH_SHORT).show();
		} else if (flagForBackPress == 1) {
			if (!isTestInProgress) {
				try {
					TestSummaryActivity.testsumaryactivity.tTabWidget
							.setVisibility(View.VISIBLE);
					setTakeATestDetails();
				} catch (Exception e) {

				}
				flagForBackPress = 0;
			} else {
				Toast.makeText(this, "Test is in progress...",
						Toast.LENGTH_SHORT).show();
			}
		} else {
			TakeATestActivity.this.finish();
		}
	}

	/**
	 * inserts the answer into the database
	 * 
	 * @param id
	 */
	private void insertAnswer(int id) {
		// answersManager_ids = new TestAnswersManager(TakeATestActivity.this);
		testAnswers = new TestAnswers();
		testAnswers.user_id = Integer.parseInt(BaseUrl.LoginId);
		testAnswers.test_id = mSelectedTest.testId;
		testAnswers.isDeleted = "F";
		testAnswers.question_id = mGetTestOptions.get(id).questionId;
		testAnswers.is_correct = mGetTestOptions.get(id).isCorrect;
		testAnswers.answer_id = mGetTestOptions.get(id).answersId;
		testAnswers.answer_value = mGetTestOptions.get(id).ansOption;
		testAnswers.is_demo_plate = (mStatus.equalsIgnoreCase("I") ? "I" : "A");
		if (testAnswers.is_correct.equalsIgnoreCase("1")
				&& testAnswers.is_demo_plate.equalsIgnoreCase("I"))
			mCorrectAnsCount++;
		else
			mWrongAnswers++;

		mTestAnswerIds.add(Integer.parseInt(answersManager_ids
				.addUpdateTestAnswers(testAnswers,
						TestAnswersManager.EOperation.ADD_TEST_ANSWERS)
				.toString()));
	}

	/**
	 * 
	 * @return
	 */
	public String getDiagosisMessage() {
		String diagnosisMessage = "Normal Color Vision.";
		TestResult sectionOneTestResult = mTestResultSections.get("Section1");
		TestResult sectionTwoTestResult = mTestResultSections.get("Section2");
		TestResult sectionThreeTestResult = mTestResultSections.get("Section3");
		TestResult sectionFourTestResult = mTestResultSections.get("Section4");

		// Check if deficiency tests exists for this main test.
		if (sectionTwoTestResult != null && sectionThreeTestResult != null
				&& sectionFourTestResult != null) {
			// User has taken deficiency tests.
			if (sectionTwoTestResult.passed.equals("Pass")
					&& sectionThreeTestResult.passed.equals("Pass")
					&& sectionFourTestResult.passed.equals("Pass")) {
				// User have passed in all deficiency tests.
				if (sectionOneTestResult.passed.equals("0")) {
					diagnosisMessage = "Questionable - Recommend additional testing.";
				}
			} else {
				// If user fails in any deficiency test.. construct the
				// appropriate message for the same.
				diagnosisMessage = checkDeficiencyTestResult(
						sectionTwoTestResult, sectionThreeTestResult,
						sectionFourTestResult);
			}
		} else {
			if (sectionOneTestResult != null) {
				if (sectionOneTestResult.passed.equals("0")) {
					diagnosisMessage = "You have a Color Vision Deficiency.";
				}
			} else
				diagnosisMessage = "You have a Color Vision Deficiency.";
		}
		return diagnosisMessage;
	}

	public String checkDeficiencyTestResult(TestResult section2,
			TestResult section3, TestResult section4) {
		String deficiencyMessage = "";

		if (section2.correct_answers != section3.correct_answers) {
			if (section2.correct_answers < section3.correct_answers) {
				deficiencyMessage += ((section2.correct_answers >= section2.mild_score_min)
						&& (section2.correct_answers <= section2.mild_score_max)
						? "Mild Protan "
						: ((section2.correct_answers >= section2.mod_score_min)
								&& (section2.correct_answers <= section2.mod_score_max)
								? "Moderate Protan "
								: (section2.correct_answers >= section2.sev_score_min)
										&& (section2.correct_answers <= section2.sev_score_max)
										? "Severe Protan "
										: ""));
				// deficiencyMessage += ((section3.correct_answers >=
				// section3.mild_score_min) && (section3.correct_answers <=
				// section3.mild_score_max) ? "Mild Deutan " :
				// ((section3.correct_answers >= section3.mod_score_min) &&
				// (section3.correct_answers <= section3.mod_score_max) ?
				// "Moderate Deutan " : (section3.correct_answers >=
				// section3.sev_score_min) && (section3.correct_answers <=
				// section3.sev_score_max) ? "Severe Deutan " : ""));
			} else {
				deficiencyMessage += ((section3.correct_answers >= section3.mild_score_min)
						&& (section3.correct_answers <= section3.mild_score_max)
						? "Mild Deutan "
						: ((section3.correct_answers >= section3.mod_score_min)
								&& (section3.correct_answers <= section3.mod_score_max)
								? "Moderate Deutan "
								: (section3.correct_answers >= section3.sev_score_min)
										&& (section3.correct_answers <= section3.sev_score_max)
										? "Severe Deutan "
										: ""));
				// deficiencyMessage += ((section2.correct_answers >=
				// section2.mild_score_min) && (section2.correct_answers <=
				// section2.mild_score_max) ? "Mild Protan " :
				// ((section2.correct_answers >= section2.mod_score_min) &&
				// (section2.correct_answers <= section2.mod_score_max) ?
				// "Moderate Protan " : (section2.correct_answers >=
				// section2.sev_score_min) && (section2.correct_answers <=
				// section2.sev_score_max) ? "Severe Protan " : ""));
			}
		} else {
			if ((section2.correct_answers >= section2.mild_score_min)
					&& (section2.correct_answers <= section2.mild_score_max)) {
				deficiencyMessage += "Combination "
						+ ((section3.correct_answers >= section3.mild_score_min)
								&& (section3.correct_answers <= section3.mild_score_max)
								? "Mild Protan/Deutan "
								: ((section3.correct_answers >= section3.mod_score_min)
										&& (section3.correct_answers <= section3.mod_score_max)
										? "Moderate Protan/Deutan "
										: (section3.correct_answers >= section3.sev_score_min)
												&& (section3.correct_answers <= section3.sev_score_max)
												? "Severe Protan/Deutan "
												: ""));
			} else if ((section2.correct_answers >= section2.mod_score_min)
					&& (section2.correct_answers <= section2.mod_score_max)) {
				deficiencyMessage += "Combination "
						+ ((section3.correct_answers >= section3.mild_score_min)
								&& (section3.correct_answers <= section3.mild_score_max)
								? "Moderate Protan/Deutan "
								: ((section3.correct_answers >= section3.mod_score_min)
										&& (section3.correct_answers <= section3.mod_score_max)
										? "Moderate Protan/Deutan "
										: (section3.correct_answers >= section3.sev_score_min)
												&& (section3.correct_answers <= section3.sev_score_max)
												? "Severe Protan/Deutan "
												: ""));
			} else if ((section2.correct_answers >= section2.sev_score_min)
					&& (section2.correct_answers <= section2.sev_score_max)) {
				deficiencyMessage += "Combination Severe Protan/Deutan ";
			}

		}
		if (!section4.passed.equals("Pass")) {
			deficiencyMessage += " and "
					+ ((section4.correct_answers >= section4.mild_score_min)
							&& (section4.correct_answers <= section4.mild_score_max)
							? "Mild Tritan "
							: ((section4.correct_answers >= section4.mod_score_min)
									&& (section4.correct_answers <= section4.mod_score_max)
									? "Moderate Tritan "
									: (section4.correct_answers >= section4.sev_score_min)
											&& (section4.correct_answers <= section4.sev_score_max)
											? "Severe Tritan "
											: ""));
		}

		return deficiencyMessage;
	}

	/**
	 * 
	 * @param v
	 */
	public void EmailCertificate() {
		String score = null;

		try {
			score = mScoreMessage.replaceAll("\\<[^>]*>", "");
			score = score.replace("\n", "");
			if (mEmail.equalsIgnoreCase("")) {
				mEmail = BaseUrl.emailId;

			}

			// Create a new HttpClient and Post Header
			HttpClient httpclient = new DefaultHttpClient();
			String URL = BaseUrl.baseurl + "SendCertificateMail.php";
			if (!mMainResult.equalsIgnoreCase("Passed"))
				URL = BaseUrl.baseurl + "SendTestResultMail.php";
			HttpPost httppost = new HttpPost(URL);

			// Add your data
			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
			nameValuePairs.add(new BasicNameValuePair("fname", testinfo.fname));
			nameValuePairs.add(new BasicNameValuePair("lname", testinfo.lname));
			nameValuePairs.add(new BasicNameValuePair("email", mEmail));
			nameValuePairs.add(new BasicNameValuePair("test_title",
					mMainSelectedTest.title));
			nameValuePairs
					.add(new BasicNameValuePair(
							"score",
							mMainAnswersCount
									+ "/"
									+ (mTestResultSections.get("Section1").no_of_questions - mTestResultSections
											.get("Section1").total_demo_plates_cnt)));
			nameValuePairs.add(new BasicNameValuePair("user_result",
					mMainResult));
			String mtestZTakendateMail = BaseUrl.getCurrentDatetimeFormail();
			nameValuePairs.add(new BasicNameValuePair("create_date",
					mtestZTakendateMail));
			if (mMainResult.equalsIgnoreCase("Passed")
					&& mTestResultSections.get("Section2") != null) {
				nameValuePairs.add(new BasicNameValuePair("diagnosis",
						mDiagnosisMessage));
				nameValuePairs.add(new BasicNameValuePair("group_name",
						"Protan,Deutan,Tritan"));
				nameValuePairs.add(new BasicNameValuePair("color_name",
						"red,green,blue"));
				nameValuePairs.add(new BasicNameValuePair("correct_ans",
						mDefCorrectAnsCount));
				nameValuePairs.add(new BasicNameValuePair("no_of_ques",
						mDefNoOfQues));
				nameValuePairs
						.add(new BasicNameValuePair("result", mDefResult));
			}
			// if(mSelectedTest.allowDeficiency.equalsIgnoreCase("N") )
			else {
				if (mTestResultSections.get("Section2") == null) {
					nameValuePairs.add(new BasicNameValuePair("diagnosis",
							mDiagnosisMessage));
					nameValuePairs.add(new BasicNameValuePair("result_msg",
							score));
				} else {
					nameValuePairs.add(new BasicNameValuePair("diagnosis",
							mDiagnosisMessage));
					nameValuePairs.add(new BasicNameValuePair("group_name",
							"Protan,Deutan,Tritan"));
					nameValuePairs.add(new BasicNameValuePair("color_name",
							"red,green,blue"));
					nameValuePairs.add(new BasicNameValuePair("correct_ans",
							mDefCorrectAnsCount));
					nameValuePairs.add(new BasicNameValuePair("no_of_ques",
							mDefNoOfQues));
					nameValuePairs.add(new BasicNameValuePair("result",
							mDefResult));
					nameValuePairs.add(new BasicNameValuePair("result_msg",
							score));
				}
			}
			httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

			HttpResponse response = httpclient.execute(httppost);
			mresponseFromserver = EntityUtils.toString(response.getEntity());

		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	class DownloadCertificateASync extends AsyncTask<String, String, String> {
		Context mContext;
		AlertDialog.Builder alertdg;

		public DownloadCertificateASync(Context context) {
			mContext = context;
			alertdg = new AlertDialog.Builder(mContext);
		}

		@Override
		protected String doInBackground(String... params) {
			EmailCertificate();
			return null;
		}

		@Override
		protected void onPreExecute() {
			// Display payNowdisp =
			// TakeATestActivity.this.getWindowManager().getDefaultDisplay();
			WindowManager.LayoutParams params = progresDialog.getWindow()
					.getAttributes();
			params.width = WindowManager.LayoutParams.WRAP_CONTENT;
			params.height = WindowManager.LayoutParams.WRAP_CONTENT;
			params.dimAmount = 0.9f;
			progresDialog.getWindow().addFlags(
					WindowManager.LayoutParams.FLAG_DIM_BEHIND);
			progresDialog.getWindow().setAttributes(params);
			progresDialog.getWindow().setBackgroundDrawable(
					new ColorDrawable(android.graphics.Color.TRANSPARENT));
			progresDialog.getWindow().setGravity(Gravity.CENTER_VERTICAL);
			View dialogLayout2 = TakeATestActivity.this.getLayoutInflater()
					.inflate(R.layout.custom_progressbar, null);
			TextView progressTxt = (TextView) dialogLayout2
					.findViewById(R.id.progressTitle);
			progressTxt.setText("Sending Certificate.....");
			progresDialog.setContentView(dialogLayout2);
			progresDialog.show();
			progresDialog.setCancelable(false);
			super.onPreExecute();
		}

		@Override
		protected void onPostExecute(String result) {
			progresDialog.dismiss();
			if (mresponseFromserver.contains("Success")) {
				alertdg.setMessage("Certificate sent successfully.");
			} else {
				alertdg.setMessage("Certificate not sent.");
			}
			alertdg.setCancelable(false);
			alertdg.setNegativeButton(getString(R.string.ok_text),
					new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int which) {
							dialog.dismiss();
						}
					});
			alertdg.show();
			super.onPostExecute(result);
		}
	}

	@SuppressLint("NewApi")
	@Override
	protected Dialog onCreateDialog(int id) {
		Calendar c = Calendar.getInstance();
		c.set(Calendar.YEAR, 1990);
		c.set(Calendar.MONTH, 0);
		c.set(Calendar.DAY_OF_MONTH, 01);

		int cyear = c.get(Calendar.YEAR);
		int cmonth = c.get(Calendar.MONTH);
		int cday = c.get(Calendar.DAY_OF_MONTH);
		switch (id) {
			case DATE_DIALOG_ID :
				DatePickerDialog mDatePickerDialog = new DatePickerDialog(this,
						mDateSetListener, cyear, cmonth, cday);
				mDatePickerDialog.getDatePicker().setMaxDate(
						System.currentTimeMillis());
				return mDatePickerDialog;
			case progress_bar_type :
				pDialog = new ProgressDialog(this);
				pDialog.setTitle("Downloading Data Please wait...");
				// pDialog.setIcon(R.drawable.download_icon);
				pDialog.setMessage("Please wait...");
				pDialog.setIndeterminate(false);
				pDialog.setMax(100);
				pDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
				pDialog.setCancelable(false);
				pDialog.show();
				return pDialog;
		}
		return null;

	}

	private DatePickerDialog.OnDateSetListener mDateSetListener = new DatePickerDialog.OnDateSetListener() {
		// onDateSet method
		public void onDateSet(DatePicker view, int year, int monthOfYear,
				int dayOfMonth) {
			String mMonth = "";
			String mDate = "";
			if (String.valueOf(monthOfYear + 1).length() == 1)
				mMonth = "0" + String.valueOf(monthOfYear + 1);
			else
				mMonth = String.valueOf(monthOfYear + 1);

			if (String.valueOf(dayOfMonth).length() == 1)
				mDate = "0" + String.valueOf(dayOfMonth);
			else
				mDate = String.valueOf(dayOfMonth);

			String date_selected = mMonth + " /" + String.valueOf(mDate) + " /"
					+ String.valueOf(year);
			birthdayEdt.setText(date_selected);
		}

	};

	private void CloseTestASync() {
		if (mContext != null) {
			isTestInProgress = true;
			if (sixtySecTimer != null) {
				sixtySecTimer.cancel();
			}
			if (imageCountDownTimer != null) {
				imageCountDownTimer.cancel();
			}
			if (!mSelectedTest.testType.equalsIgnoreCase("D")) {
				calculateResultForNextOperation();
			} else {
				if (mCurrentDeficiencyTest - 1 == -1) {
					mCurrentDeficiencyTest = mCurrentDeficiencyTest + 1;
				}
				for (int i = (mCurrentDeficiencyTest - 1); i < 3; i++) {
					mSelectedTest = mGetAllTest.get(i);
					calculateResultForNextOperation();
				}
			}
			TestSummaryActivity.testsumaryactivity.tTabWidget
					.setVisibility(View.VISIBLE);
			isTestInProgress = false;
			setTakeATestDetails();
		}

	}

	private boolean isSyncInProgress = false;

	public class SynchronizeDataASync extends AsyncTask<String, String, String> {
		Context mContext;
		String downloadedDate = "0";
		String downloadedTime = "0";
		ContentManager contentManager;
		GetfaqsManager faqsManager;
		GetalltestgroupManager allTestGroupManager;
		GetallplanManager getallplanManager;
		GetallcountryManager getAllCountryManager;
		GetallstateManager getAllStateManager;
		ArrayList<Integer> mPlanIdsArr;
		GetuserplanManager getUserPlanManager;
		GetalltestManager getAllTestManager;
		String mPlanIds = "0", mTestIds = "0";
		ArrayList<Getalltest> mGetalltests;
		GettestanswersManager gettestanswersManager;
		GettestquestionManager gettestquestionManager;
		URL url;
		boolean success = false;

		GetAppVersionManager mGetAppVersionManager;

		public SynchronizeDataASync(Context context) {
			mContext = context;
			contentManager = new ContentManager(mContext);
			faqsManager = new GetfaqsManager(mContext);
			allTestGroupManager = new GetalltestgroupManager(mContext);
			getallplanManager = new GetallplanManager(mContext);
			getAllCountryManager = new GetallcountryManager(mContext);
			getAllStateManager = new GetallstateManager(mContext);
			getUserPlanManager = new GetuserplanManager(mContext);
			getAllTestManager = new GetalltestManager(mContext);
			gettestanswersManager = new GettestanswersManager(mContext);
			gettestquestionManager = new GettestquestionManager(mContext);
			mGetalltests = new ArrayList<Getalltest>();
			mGetAppVersionManager = new GetAppVersionManager(mContext);
		}

		public void onProgressUpdate(String... progress) {
			// setting progress percentage
			runOnUiThread(changeMessage);
			if (pDialog.getProgress() <= 100)
				pDialog.setProgress(Integer.parseInt(progress[0]));
			else
				pDialog.setProgress(0);

			// pDialog.setMessage("HI");

		}
		private Runnable changeMessage = new Runnable() {
			@Override
			public void run() {
				pDialog.setMessage("Step " + current + "/" + total);
			}
		};

		@Override
		protected String doInBackground(String... params) {
			try {
				/*
				 * if (isFirstSync) { total = 7; isFirstSync=false; } else total
				 * = 5;
				 */
				total = 5;
				current = 0;
				isSyncInProgress = true;
				ArrayList<Content> arrContents = contentManager
						.getAllContentWithOutASync();
				if (arrContents.size() > 0) {
					downloadedDate = arrContents.get(0).downloaded_date;
					downloadedTime = arrContents.get(0).downloaded_time;
				} else {
					downloadedDate = "0";
					downloadedTime = "0";
				}

				url = new URL(BaseUrl.baseurl
						+ "getContent_new_change.php?download_date="
						+ downloadedDate + "&download_time=" + downloadedTime);
				System.out.println("First Web Service Call" + url);
				ContentXMLHandler.allContent.clear();
				current++;
				contentManager.xmlAddContentInfo(url, this);
				ArrayList<Getfaqs> arrGetfaqs = faqsManager
						.getAllGetfaqsWithOutASync();
				if (arrGetfaqs.size() > 0) {
					downloadedDate = arrGetfaqs.get(0).downloaded_date;
					downloadedTime = arrGetfaqs.get(0).downloaded_time;
				} else {
					downloadedDate = "0";
					downloadedTime = "0";
				}
				URL faqUrl = new URL(BaseUrl.baseurl
						+ "getAllFaq_change.php?download_date="
						+ downloadedDate + "&download_time=" + downloadedTime);
				System.out.println("Second Web Service Call" + faqUrl);
				GetfaqsXMLHandler.allGetfaqs.clear();
				current++;
				faqsManager.xmlAddGetfaqsInfo(faqUrl, this);
				try {
					ArrayList<Getalltestgroup> arrGetTestGroup = allTestGroupManager
							.getAllGetalltestgroupWithOutAsync();
					if (arrGetTestGroup.size() > 0) {
						URL tgroupsourceUrl = new URL(BaseUrl.baseurl
								+ "getAllTestGroup_change.php?");
						System.out.println("getAllTestGroup Web Service Call"
								+ tgroupsourceUrl);
						GetalltestgroupXMLHandler.allGetalltestgroup.clear();
						current++;
						allTestGroupManager.xmlAddGetalltestgroupInfo(
								tgroupsourceUrl, this);
					}
					ArrayList<Getallplan> arrGetallplans = getallplanManager
							.getAllGetallplanWtihOutSync();
					downloadedDate = "0";
					downloadedTime = "0";
					if (arrGetallplans.size() > 0) {
						downloadedDate = arrGetallplans.get(0).downloaded_date;
						downloadedTime = arrGetallplans.get(0).downloaded_time;
					}
					GetallplanXMLHandler.allGetallplan.clear();
					GetallplanXMLHandler.allPlanIds.clear();
					GetallplanXMLHandler.allLimitedPlanIds.clear();
					String stringPlanURL = BaseUrl.baseurl
							+ "getAllPlan_change.php?download_date="
							+ downloadedDate + "&download_time="
							+ downloadedTime;
					System.out
							.println("Third Web Service Call" + stringPlanURL);
					current++;
					getallplanManager.xmlAddGetallplanInfo(new URL(
							stringPlanURL), this);
					// GetallplanXMLHandler.allGetallplan.size();
					// ArrayList<Integer> arrayListServerIds = new
					// ArrayList<Integer>();
					// for (Getallplan getallplanServer :
					// GetallplanXMLHandler.allGetallplan)
					// arrayListServerIds.add(getallplanServer.PlanId);

					for (Getallplan getallplanLocal : arrGetallplans) {
						if (!GetallplanXMLHandler.allPlanIds
								.contains(getallplanLocal.PlanId))
							getallplanManager
									.deleteGetallplan(getallplanLocal.PlanId);
					}
					try {
						int countryCount = getAllCountryManager
								.getAllGetallcountryWithOutAsync();
						int stateCount = getAllStateManager
								.getGetallstateCountWithoutSync();
						if (countryCount == 0) {
							URL sourceUrl1 = new URL(BaseUrl.baseurl
									+ "getAllCountry.php");
							GetallcountryXMLHandler.allGetallcountry.clear();
							getAllCountryManager
									.xmlAddGetallcountryInfo(sourceUrl1);
						}

						if (stateCount == 0) {
							URL sourceUrl2 = new URL(BaseUrl.baseurl
									+ "getAllState.php");
							GetallstateXMLHandler.allGetallstate.clear();
							getAllStateManager
									.xmlAddGetallstateInfo(sourceUrl2);
						}
					} catch (GetallcountryException e1) {
						e1.printStackTrace();
					} catch (GetallstateException e) {
						e.printStackTrace();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				mPlanIdsArr = new ArrayList<Integer>();
				mPlanIdsArr.addAll(getUserPlanManager
						.getAllGetuserplanwithoutAsync());

				if (mPlanIdsArr.size() != 0)
					mPlanIds = TextUtils.join(",", mPlanIdsArr);
				getUserPlan = getUserPlanManager
						.getSingleGetuserplanWithOutASync(Integer
								.parseInt(BaseUrl.LoginId));
				// ArrayList<Getalltest> arrGetalltest = getAllTestManager
				// .getAllGetalltestWithoutAsync();
				// if (arrGetalltest.size() > 0) {
				// downloadedDate = arrGetalltest.get(0).downloaddate;
				// downloadedTime = arrGetalltest.get(0).downloadtime;
				// } else {
				// downloadedDate = "0";
				// downloadedTime = "0";
				// }

				SyncStatus syncStatus = TestContentManager.getInstance()
						.getSyncStatus(TakeATestActivity.this);

				setSyncNeededVariables(mPlanIds, BaseUrl.LoginId);

				TestContentManager.getInstance().setTestSyncUpdate(false);
				TestContentManager.getInstance().setTestQuestionsSyncUpdate(
						false);
				TestContentManager.getInstance().setTestAnswerSyncUpdate(false);

				// isTestSyncNeeded = true;
				// isTestQuestionsSyncNeeded = true;
				// isTestAnswerSyncNeeded = true;
				// downloaddate = "0";
				// downloadtime = "0";

				// isTestSyncNeeded
				if (isTestSyncNeeded) {
					String downloaddate = syncStatus.getTestsDownloadDate();
					String downloadtime = syncStatus.getTestsDownloadTime();
					Log.e("STrings Needed", "dat:" + downloaddate + "/tim:"
							+ downloadtime + "/planid:" + mPlanIds);

					if (getUserPlan != null) {
						TestContentManager.getInstance()
								.setTestSyncUpdate(true);

						/*
						 * url = new URL(BaseUrl.baseurl +
						 * "getAllTest.php?download_date=" + downloaddate +
						 * "&download_time=" + downloadtime + "&plan_id=" +"16"
						 * + "&user_id=" + "6579");
						 */

						url = new URL(BaseUrl.baseurl
								+ "getAllTest_change.php?download_date="
								+ downloaddate + "&download_time="
								+ downloadtime + "&plan_id=" + mPlanIds
								+ "&user_id=" + BaseUrl.LoginId);
						Log.e("URL", "" + url.toString());

						GetalltestXMLHandler.allGetalltest.clear();
						GetalltestXMLHandler.allTestIds.clear();
						current++;
						getAllTestManager.xmlAddGetalltestInfo(url, this);

						// ArrayList<Integer> arrayListServerIds = new
						// ArrayList<Integer>();
						// for (Getalltest getalltestServer :
						// GetalltestXMLHandler.allGetalltest)
						// arrayListServerIds.add(getalltestServer.testId);

						for (Getalltest getalltestLocal : mGetalltests) {
							if (!GetalltestXMLHandler.allTestIds
									.contains(getalltestLocal.testId)
									&& getalltestLocal.Buy
											.equalsIgnoreCase("Y")) {
								if (BaseUrl.DefaultTestidsArrList
										.contains(getalltestLocal.testId)) {
									getAllTestManager
											.updateGetAllTestWhere(
													"IsActivated",
													"N",
													String.valueOf(getalltestLocal.testId));
								} else {
									getAllTestManager
											.deleteGetalltestWithoutAsync(getalltestLocal.testId);
								}

							}
						}
					} else {
						GetalltestXMLHandler.allGetalltest.clear();
						GetalltestXMLHandler.allTestIds.clear();
						current++;
						getAllTestManager
								.xmlAddGetalltestInfo(
										new URL(
												BaseUrl.baseurl
														+ "getAllDefaultTest_change.php?download_date="
														+ downloaddate
														+ "&download_time="
														+ downloadtime
														+ "&plan_id=" + 0
														+ "&user_id="
														+ BaseUrl.LoginId),
										this);
						for (Integer mtestId : BaseUrl.DefaultTestidsArrList) {
							if (!GetalltestXMLHandler.allTestIds
									.contains(mtestId)) {
								getAllTestManager.updateGetAllTestWhere(
										"IsActivated", "N",
										String.valueOf(mtestId));
							}

						}
					}

					// update local sync date time.
					if (GetalltestXMLHandler.allGetalltest != null
							&& GetalltestXMLHandler.allGetalltest.size() > 0) {
						syncStatus
								.setTestsDownloadDate(GetalltestXMLHandler.allGetalltest
										.get(0).downloaddate);
						syncStatus
								.setTestsDownloadTime(GetalltestXMLHandler.allGetalltest
										.get(0).downloadtime);
						TestContentManager.getInstance().updateSyncStatus(
								TakeATestActivity.this, syncStatus);
						syncStatus = TestContentManager.getInstance()
								.getSyncStatus(TakeATestActivity.this);
					}

					mGetalltests.clear();
					mGetalltests.addAll(getAllTestManager
							.getAllGetalltestWithoutAsync());
					BaseUrl.TestIdsArrList.clear();

					for (Getalltest getalltest : mGetalltests)
						BaseUrl.TestIdsArrList.add(getalltest.testId);
				}

				// sync test questions
				// isTestQuestionsSyncNeeded
				if (isTestQuestionsSyncNeeded) {
					isFirstSync = false;
					syncStatus = TestContentManager.getInstance()
							.getSyncStatus(TakeATestActivity.this);
					String downloaddate = syncStatus.getQuestionsdownloadDate();
					String downloadtime = syncStatus.getQuestionsdownloadTime();
					TestContentManager.getInstance()
							.setTestQuestionsSyncUpdate(true);

					// for (Getalltest getalltest : mGetalltests)
					// BaseUrl.TestIdsArrList.add(getalltest.testId);

					if (TextUtils.isEmpty(mTestIds) || mTestIds.equals("0")) {
						mGetalltests.clear();
						mGetalltests.addAll(getAllTestManager
								.getAllGetalltestWithoutAsync());
						BaseUrl.TestIdsArrList.clear();

						for (Getalltest getalltest : mGetalltests)
							BaseUrl.TestIdsArrList.add(getalltest.testId);
						mTestIds = TextUtils.join(",", BaseUrl.TestIdsArrList);
					}
					Log.e("String", "Callin to getTestQuestion.php");
					/*
					 * url = new URL(BaseUrl.baseurl +
					 * "getTestQuestion.php?download_date=" + downloaddate +
					 * "&download_time=" + downloadtime + "&test_ids=" +"134");
					 */

					url = new URL(BaseUrl.baseurl
							+ "getTestQuestion_change.php?download_date="
							+ downloaddate + "&download_time=" + downloadtime
							+ "&test_ids=" + mTestIds);
					System.out.println("8 Web Service Call" + url.toString());
					GettestquestionXMLHandler.allGettestquestion.clear();
					current++;
					gettestquestionManager.xmlAddGettestquestionInfo(url, this);

					// update local sync date time.
					if (GettestquestionXMLHandler.allGettestquestion != null
							&& GettestquestionXMLHandler.allGettestquestion
									.size() > 0) {
						syncStatus
								.setQuestionsdownloadDate(GettestquestionXMLHandler.allGettestquestion
										.get(0).downloadDate);
						syncStatus
								.setQuestionsdownloadTime(GettestquestionXMLHandler.allGettestquestion
										.get(0).downloadTime);
						TestContentManager.getInstance().updateSyncStatus(
								TakeATestActivity.this, syncStatus);
						syncStatus = TestContentManager.getInstance()
								.getSyncStatus(TakeATestActivity.this);
					}
				}

				// sync test answers
				if (isTestAnswerSyncNeeded) {
					isFirstSync = false;
					syncStatus = TestContentManager.getInstance()
							.getSyncStatus(TakeATestActivity.this);
					String downloaddate = syncStatus.getAnswersdownloadDate();
					String downloadtime = syncStatus.getAnswersdownloadTime();
					TestContentManager.getInstance().setTestAnswerSyncUpdate(
							true);
					URL optionssourceUrl = new URL(
							BaseUrl.baseurl
									+ "getTestQuestionAnswers_change.php?download_date="
									+ downloaddate + "&download_time="
									+ downloadtime + "&test_ids=" + mTestIds);
					Log.e("TestQue Url:", "" + optionssourceUrl.toString());
					System.out.println("9 Web Service Call" + url.toString());
					GettestanswersXMLHandler.allGettestanswers.clear();
					current++;
					gettestanswersManager.xmlAddGettestanswersInfo(
							optionssourceUrl, this);

					// update local sync date time.
					if (GettestanswersXMLHandler.allGettestanswers != null
							&& GettestanswersXMLHandler.allGettestanswers
									.size() > 0) {
						Gettestquestion question = TestContentManager
								.getInstance()
								.getTestQuestionWhere(
										TakeATestActivity.this,
										"questionId",
										GettestanswersXMLHandler.allGettestanswers
												.get(0).questionId + "");
						if (question != null) {
							syncStatus
									.setAnswersdownloadDate(question.downloadDate);
							syncStatus
									.setAnswersdownloadTime(question.downloadTime);
							TestContentManager.getInstance().updateSyncStatus(
									TakeATestActivity.this, syncStatus);
							syncStatus = TestContentManager.getInstance()
									.getSyncStatus(TakeATestActivity.this);
						}
					}

				}

				// Getting compress tests data
				TestContentManager.getInstance().parseCompressXml(
						TakeATestActivity.this);
				TestContentManager.getInstance().startImagesSync(
						TakeATestActivity.this);

				BaseUrl.DateString = DateFormat.format("yyyy-MM-dd kk:mm:ss",
						new java.util.Date()).toString();

				// **************Code for getting the current version
				String strAppVersionURL = BaseUrl.baseurl
						+ "getVersion_change.php";
				current++;
				mGetAppVersionManager.xmlAddGetAppVersionInfo(new URL(
						strAppVersionURL), this);
				//
				success = true;
				System.out.println("Current   " + current);
			} catch (Exception e) {
				e.printStackTrace();
				success = false;
			}
			return null;
		}

		@SuppressWarnings("deprecation")
		@Override
		protected void onPreExecute() {
			// Display syncdisp =
			// TakeATestActivity.this.getWindowManager().getDefaultDisplay();
			// progresDialog.getWindow().setLayout((syncdisp.getWidth() / 2),
			// (syncdisp.getHeight() / 4));
			/*
			 * WindowManager.LayoutParams params = progresDialog.getWindow()
			 * .getAttributes(); params.width =
			 * WindowManager.LayoutParams.WRAP_CONTENT; params.height =
			 * WindowManager.LayoutParams.WRAP_CONTENT; params.dimAmount = 0.9f;
			 * progresDialog.getWindow().addFlags(
			 * WindowManager.LayoutParams.FLAG_DIM_BEHIND);
			 * progresDialog.getWindow().setAttributes(params);
			 * progresDialog.getWindow().setBackgroundDrawable( new
			 * ColorDrawable(android.graphics.Color.TRANSPARENT));
			 * progresDialog.getWindow().setGravity(Gravity.CENTER_VERTICAL);
			 * View dialogLayout2 = TakeATestActivity.this.getLayoutInflater()
			 * .inflate(R.layout.custom_progressbar, null); TextView progressTxt
			 * = (TextView) dialogLayout2 .findViewById(R.id.progressTitle);
			 * progressTxt .setText(
			 * "Please be patient while the application synchronizes so that you get the most up-to-date tests and information. It may take a moment."
			 * ); progresDialog.setContentView(dialogLayout2);
			 * progresDialog.show(); progresDialog.setCancelable(false);
			 */
			showDialog(progress_bar_type);
			super.onPreExecute();
		}

		@Override
		protected void onPostExecute(String result) {
			// progresDialog.dismiss();
			pDialog.setProgress(0);
			pDialog.setMessage("Step " + "0/" + total);
			pDialog.dismiss();

			super.onPostExecute(result);
			isSyncInProgress = false;
			if (success) {
				setTakeATestDetails();
			} else {
				showSyncFailDialog();
			}
		}
	}

	private void showSyncFailDialog() {
		alert = new AlertDialog.Builder(TakeATestActivity.this);
		alert.setCancelable(false).setMessage(
				getString(R.string.sync_fail_dialog_message));
		alert.setPositiveButton("Try Again",
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.cancel();
						new SynchronizeDataASync(TakeATestActivity.this)
								.execute();

					}
				});
		alert.setNegativeButton("Cancel",
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.cancel();
						setTakeATestDetails();
					}
				});
		alert.show();
	}

	// Ajay: Function to update Progress bar of ongoing test
	public void updateTestProgressBar(View vw) {
		// reset progress bar status
		// totalNoOfQuestion = mSelectedTest.noOfQuestions;
		if (totalNoOfQuestion != 0) {
			int progressBarStatus = (attemptedNoOfQquestion * 100)
					/ totalNoOfQuestion;
			testProgressBar = (ProgressBar) vw.findViewById(R.id.testprogress);
			testProgressBar.setProgress(progressBarStatus);
		}

	}

	public void setSyncNeededVariables(String planId, String userId) {
		SyncStatus syncStatus = TestContentManager.getInstance().getSyncStatus(
				TakeATestActivity.this);
		if (syncStatus != null) {
			TestContentManager.getInstance().parseServerSyncItem(
					TakeATestActivity.this, syncStatus.getTestsDownloadDate(),
					syncStatus.getTestsDownloadTime(), planId, userId);
			ServerSyncItem serverSyncItem = TestContentManager.getInstance()
					.getServerSyncItem();
			if (serverSyncItem != null) {
				if (!serverSyncItem.getUpdatedTest().equals("0")) {
					isTestSyncNeeded = true;
					total++;
				}
			}
			TestContentManager.getInstance().parseServerSyncItem(
					TakeATestActivity.this,
					syncStatus.getQuestionsdownloadDate(),
					syncStatus.getQuestionsdownloadTime(), planId, userId);
			serverSyncItem = TestContentManager.getInstance()
					.getServerSyncItem();
			if (serverSyncItem != null) {
				if (!serverSyncItem.getUpdatedQuestion().equals("0")) {
					isTestQuestionsSyncNeeded = true;
					total++;
				}
			}
			TestContentManager.getInstance().parseServerSyncItem(
					TakeATestActivity.this,
					syncStatus.getAnswersdownloadDate(),
					syncStatus.getAnswersdownloadTime(), planId, userId);
			serverSyncItem = TestContentManager.getInstance()
					.getServerSyncItem();
			if (serverSyncItem != null) {
				if (!serverSyncItem.getUpdatedAnswers().equals("0")) {
					isTestAnswerSyncNeeded = true;
					total++;
				}
			}
		}
	}

	@Override
	protected void onDestroy() {
		alert = null;
		alertMustSync = null;
		if (syncReceiver != null) {
			AppUtils.unregisterActionListener(TakeATestActivity.this,
					syncReceiver);
			syncReceiver = null;
		}
		if (mTimerCountHandler != null) {
			mTimerCountHandler.removeMessages(1);
			mTimerCountHandler = null;
		}
		if (mDownloadPlateTask != null) {
			mDownloadPlateTask.cancel(true);
			mDownloadPlateTask = null;
		}
		stopVideo();
		super.onDestroy();
		System.gc();
	}
}
