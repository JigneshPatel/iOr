package com.tcv.controller;

import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.SocketException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.PendingIntent;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.ColorDrawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.TextUtils;
import android.text.style.ForegroundColorSpan;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TextView.BufferType;

import com.tcv.model.Exception.GetAppVersionException;
import com.tcv.model.Exception.GetallplanException;
import com.tcv.model.Exception.GetalltestException;
import com.tcv.model.Exception.GetuserplanException;
import com.tcv.model.Exception.UserRegistrationException;
import com.tcv.model.XMLHandler.GetallplanXMLHandler;
import com.tcv.model.XMLHandler.GetalltestXMLHandler;
import com.tcv.model.XMLHandler.GettestanswersXMLHandler;
import com.tcv.model.XMLHandler.GettestquestionXMLHandler;
import com.tcv.model.XMLHandler.GetuserplanXMLHandler;
import com.tcv.model.XMLHandler.UserRegistrationXMLHandler;
import com.tcv.model.manager.GetAppVersionManager;
import com.tcv.model.manager.GetallplanManager;
import com.tcv.model.manager.GetalltestManager;
import com.tcv.model.manager.GettestanswersManager;
import com.tcv.model.manager.GettestquestionManager;
import com.tcv.model.manager.GetuserplanManager;
import com.tcv.model.manager.TestAnswersManager;
import com.tcv.model.manager.TestResultManager;
import com.tcv.model.manager.UserRegistrationManager;
import com.tcv.model.pojo.Getallplan;
import com.tcv.model.pojo.Getalltest;
import com.tcv.model.pojo.Gettestquestion;
import com.tcv.model.pojo.ServerSyncItem;
import com.tcv.model.pojo.UserRegistration;
import com.tcv.util.AndroidUtility;
import com.tcv.util.AppUtils;
import com.tcv.util.BaseUrl;
import com.tcv.util.DevConfig;

/**
 * 
 * @author suryakumari
 * 
 */

/* For Version Updation and get the version see line no 923 */

public class RegisterUser extends Activity implements OnClickListener {
	UserRegistrationManager user_registrationManager;
	TestResultManager testResultManager;
	UserRegistration userreg;
	private final Handler handler = new Handler();
	private boolean isEdit = false;
	private Button submitBtn;
	private EditText frstNameEdit, LastNameEdit, EmailEdit, ConfirmEmailEdit,
			organisationNameEdit, websiteUrlEdit, PhoneEdit, StreetEdit,
			CityEdit, StateEdit, CountryEdit, ZipEdit;
	private TextView regTitleTxt, regInfoTxt, frstNameTxt, lastNameTxt,
			emailTxt, confirmEmailTxt, orgNameTxt, orgUrlTxt, phoneTxt,
			streetTxt, cityTxt, stateTxt, countryTxt, zipTxt;
	private AlertDialog.Builder alert;
	private Spinner demographicsSpinner;
	private Dialog successDialog, regDialog;
	private ProgressDialog pDialog;
	private Typeface typefaceHelvetica;
	private Typeface typefaceHelveticaBold;
	ArrayList<Getalltest> mGetalltests;
	ArrayList<Integer> mLocalGetAlltestsIds;
	private String mTestIds = "0", mAlreadyExit = "N", mPlanIdsStr = "0",
			ValidationStr = "";
	ArrayList<Integer> mPlanIds;
	private ProgressDialog progressDialog;

	private SyncActionReceiver syncReceiver;
	String demographicsType;
	private int currentWebService = 0;
	private int totalWebServiceToCall = 0;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		try {
			setContentView(R.layout.register);
			syncReceiver = new SyncActionReceiver();
			AppUtils.registerActionListener(getActivityContext(), syncReceiver);
			testResultManager = new TestResultManager(getActivityContext());
			regDialog = new Dialog(getActivityContext(), R.style.Theme_Levels);
			progressDialog = new ProgressDialog(getActivityContext());
			RegisterForC2DM();
			findViewById();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		if (DevConfig.REGISTER_USER_HARDCODED_ENABLED) {
			frstNameEdit.setText("alok");
			LastNameEdit.setText("desai");
			EmailEdit.setText("alokd@gmail.com");
			ConfirmEmailEdit.setText("alokd@gmail.com");
			organisationNameEdit.setText("First Eye Care");
			websiteUrlEdit.setText("www.firsteyecare.com");
		}

		edit();
	}

	public void RegisterForC2DM() {
		Intent registrationIntent = new Intent(
				"com.google.android.c2dm.intent.REGISTER");
		registrationIntent.putExtra("app", PendingIntent.getBroadcast(
				getActivityContext(), 0, new Intent(), 0));
		registrationIntent.putExtra("sender", MyBroadCastReciever.SENDER_ID);
		startService(registrationIntent);

	}

	/**
      * 
      */
	private void findViewById() {
		try {
			user_registrationManager = new UserRegistrationManager(this);
			regTitleTxt = (TextView) findViewById(R.id.regTxt);
			// regInfoTxt = (TextView) findViewById(R.id.regInfo_txt);
			frstNameTxt = (TextView) findViewById(R.id.frstNameTxt);
			lastNameTxt = (TextView) findViewById(R.id.lastNameTxt);
			emailTxt = (TextView) findViewById(R.id.emailTxt);

			// new Code
			confirmEmailTxt = (TextView) findViewById(R.id.emailConfimTxt);
			orgNameTxt = (TextView) findViewById(R.id.orgNameTxt);
			orgUrlTxt = (TextView) findViewById(R.id.orgUrlNameTxt);

			frstNameEdit = (EditText) findViewById(R.id.frstName_edit);
			LastNameEdit = (EditText) findViewById(R.id.las5tName_edit);
			EmailEdit = (EditText) findViewById(R.id.email_edit);
			ConfirmEmailEdit = (EditText) findViewById(R.id.email_confirm_edit);
			organisationNameEdit = (EditText) findViewById(R.id.org_name_edit);
			websiteUrlEdit = (EditText) findViewById(R.id.org_url_edit);

			// Ajay:Changes for Shipping Address
			phoneTxt = (TextView) findViewById(R.id.phoneNoTxt);
			streetTxt = (TextView) findViewById(R.id.streetAddressTxt);
			cityTxt = (TextView) findViewById(R.id.cityTxt);
			stateTxt = (TextView) findViewById(R.id.stateTxt);
			countryTxt = (TextView) findViewById(R.id.countryTxt);
			zipTxt = (TextView) findViewById(R.id.zipTxt);

			PhoneEdit = (EditText) findViewById(R.id.phoneNo_edit);
			StreetEdit = (EditText) findViewById(R.id.streetaddress_edit);
			CityEdit = (EditText) findViewById(R.id.city_edit);
			StateEdit = (EditText) findViewById(R.id.state_edit);
			CountryEdit = (EditText) findViewById(R.id.country_edit);
			ZipEdit = (EditText) findViewById(R.id.zip_edit);
			// demographicsSpinner = (Spinner)
			// findViewById(R.id.demographics_spinner);

			// demographicsSpinner.setAdapter(AndroidUtility.spinner_Adapter(
			// getActivityContext(), demographicsType));
			/*
			 * ArrayAdapter<CharSequence> adapter = ArrayAdapter
			 * .createFromResource(this, R.array.demographics_array,
			 * android.R.layout.simple_spinner_item);
			 * 
			 * adapter.setDropDownViewResource(android.R.layout.
			 * simple_spinner_dropdown_item);
			 * demographicsSpinner.setAdapter(adapter); demographicsSpinner
			 * .setOnItemSelectedListener(new OnItemSelectedListener() {
			 * 
			 * @Override public void onItemSelected(AdapterView<?> arg0, View
			 * arg1, int arg2, long arg3) { int index =
			 * arg0.getSelectedItemPosition();
			 * 
			 * // storing string resources into Array String[] demographicsTypes
			 * = getResources() .getStringArray(R.array.demographics_array);
			 * demographicsType = demographicsTypes[index]; }
			 * 
			 * @Override public void onNothingSelected(AdapterView<?> arg0) { //
			 * TODO Auto-generated method stub
			 * 
			 * } });
			 */

			submitBtn = (Button) findViewById(R.id.regsubmitBtn);

			typefaceHelvetica = Typeface.createFromAsset(getAssets(),
					"fonts/Helvetica.ttf");
			typefaceHelveticaBold = Typeface.createFromAsset(getAssets(),
					"fonts/Helvetica Bold.ttf");

			regTitleTxt.setTypeface(typefaceHelveticaBold);
			// regInfoTxt.setTypeface(typefaceHelvetica);

			alert = new AlertDialog.Builder(getActivityContext());
			submitBtn.setOnClickListener(this);
			successDialog = new Dialog(getActivityContext(),
					R.style.Theme_Levels);

			SpannableString fNameSpanTxt = new SpannableString("First Name *");
			SpannableString lNameSpanTxt = new SpannableString("Last Name *");
			SpannableString emailSpanTxt = new SpannableString("Email *");
			// new
			SpannableString confirmSpanTxt = new SpannableString(
					"Confirm Email *");

			// Ajay:Changes for Shipping Address
			SpannableString phoneNoSpanTxt = new SpannableString("Phone *");
			SpannableString streetSpantxt = new SpannableString(
					"Street Address *");
			SpannableString citySpanTxt = new SpannableString("City *");
			// new
			SpannableString stateSpanTxt = new SpannableString(
					"State/Province *");
			SpannableString countrySpanTxt = new SpannableString("Country *");
			SpannableString zipSpanTxt = new SpannableString(
					"Zip/Postal Code *");

			// Ajay:Changes for Shipping Address
			phoneNoSpanTxt.setSpan(
					new ForegroundColorSpan(Color.parseColor("#FF0000")), 6, 7,
					Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
			streetSpantxt.setSpan(
					new ForegroundColorSpan(Color.parseColor("#FF0000")), 15,
					16, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
			citySpanTxt.setSpan(
					new ForegroundColorSpan(Color.parseColor("#FF0000")), 5, 6,
					Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
			stateSpanTxt.setSpan(
					new ForegroundColorSpan(Color.parseColor("#FF0000")), 15,
					16, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
			countrySpanTxt.setSpan(
					new ForegroundColorSpan(Color.parseColor("#FF0000")), 8, 9,
					Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
			zipSpanTxt.setSpan(
					new ForegroundColorSpan(Color.parseColor("#FF0000")), 16,
					17, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

			fNameSpanTxt.setSpan(
					new ForegroundColorSpan(Color.parseColor("#FF0000")), 11,
					12, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
			lNameSpanTxt.setSpan(
					new ForegroundColorSpan(Color.parseColor("#FF0000")), 10,
					11, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
			emailSpanTxt.setSpan(
					new ForegroundColorSpan(Color.parseColor("#FF0000")), 6, 7,
					Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
			confirmSpanTxt.setSpan(
					new ForegroundColorSpan(Color.parseColor("#FF0000")), 14,
					15, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

			frstNameTxt.setText(fNameSpanTxt, BufferType.SPANNABLE);
			lastNameTxt.setText(lNameSpanTxt, BufferType.SPANNABLE);
			emailTxt.setText(emailSpanTxt, BufferType.SPANNABLE);
			confirmEmailTxt.setText(confirmSpanTxt, BufferType.SPANNABLE);
			frstNameEdit.requestFocus();

			// Ajay:Changes for Shipping Address
			phoneTxt.setText(phoneNoSpanTxt, BufferType.SPANNABLE);
			streetTxt.setText(streetSpantxt, BufferType.SPANNABLE);
			cityTxt.setText(citySpanTxt, BufferType.SPANNABLE);
			stateTxt.setText(stateSpanTxt, BufferType.SPANNABLE);
			countryTxt.setText(countrySpanTxt, BufferType.SPANNABLE);
			zipTxt.setText(zipSpanTxt, BufferType.SPANNABLE);
			InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
			imm.showSoftInput(frstNameEdit, InputMethodManager.SHOW_IMPLICIT);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Handles click events.
	 */
	@Override
	public void onClick(View v) {
		switch (v.getId()) {
			case R.id.regsubmitBtn :
				try {
					progressDialog.show();
					Thread th = new Thread() {
						public void run() {
							try {
								userRegisterValidation();
							} catch (Exception ex) {
								ex.printStackTrace();
							}
						}
					};
					th.start();
					th.join();

					if (!isEdit && progressDialog != null && progressDialog.isShowing()) {
						progressDialog.dismiss();
					}

					Log.d("Result ===", "Result ==="
							+ UserRegistrationXMLHandler.regresult);
					if (UserRegistrationXMLHandler.regresult != null
							&& UserRegistrationXMLHandler.regresult
									.equalsIgnoreCase("Success")) {
						if (isEdit) {
							// udpate user profile
							userreg = UserRegistrationXMLHandler.user_registration;
							user_registrationManager
									.updateUserRegistration(userreg);

							alert.setCancelable(false).setMessage(
									"Your profile has been updated successfully");
							alert.setNegativeButton(
									getString(R.string.ok_text), null);
							alert.show();
						} else {
							// only sync data if this is new registration
							new InitializeDataSync(getActivityContext())
									.execute();
						}
					} else {
						alert.setCancelable(false).setMessage(
								"Registration Fail.");
						alert.setNegativeButton(getString(R.string.ok_text),
								new DialogInterface.OnClickListener() {
									@Override
									public void onClick(DialogInterface dialog,
											int which) {
										dialog.dismiss();
									}
								});
						alert.show();
					}
				} catch (Exception e) {
					e.printStackTrace();
				} finally {
					if (progressDialog != null && progressDialog.isShowing()) {
						progressDialog.dismiss();
					}
				}
				break;
		}
	}

	/**
	 * 
	 */
	private void userRegisterValidation() {
		try {
			String firstName = frstNameEdit.getText().toString().trim();
			String lastName = LastNameEdit.getText().toString().trim();
			String emailEdit = EmailEdit.getText().toString().trim();
			String emailConfirmEdit = ConfirmEmailEdit.getText().toString()
					.trim();
			String orgNameEdit = organisationNameEdit.getText().toString()
					.trim();
			String webUrlEdit = websiteUrlEdit.getText().toString().trim();
			String phoneNo = PhoneEdit.getText().toString();
			String streetAddress = StreetEdit.getText().toString();
			String cityString = CityEdit.getText().toString().trim();
			String stateString = StateEdit.getText().toString().trim();
			String countryString = CountryEdit.getText().toString().trim();
			String zipCode = ZipEdit.getText().toString().trim();

			String netStatusMsg = "";
			if (!AndroidUtility.isConnected(getActivityContext())) {
				netStatusMsg = "No internet connectivity.";
				alert.setCancelable(false).setMessage(netStatusMsg);
				alert.setNegativeButton(getString(R.string.ok_text),
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.dismiss();
							}
						});
				handler.post(new Runnable() {
					public void run() {
						alert.show();;
					}
				});
				alert.setCancelable(false).setMessage(ValidationStr);
				alert.setNegativeButton(getString(R.string.ok_text),
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.dismiss();
							}
						});
				handler.post(new Runnable() {
					public void run() {
						alert.show();;
					}
				});
			} else {
				if (!firstName.equals("") && !lastName.equals("")
						&& !emailEdit.equals("")
						&& !emailConfirmEdit.equals("") && !phoneNo.equals("")
						&& !streetAddress.equals("") && !cityString.equals("")
						&& !stateString.equals("") && !countryString.equals("")
						&& !zipCode.equals("")) {
					if (AndroidUtility.isEmailValid(emailEdit)
							&& AndroidUtility.isConnected(getActivityContext())
							&& AndroidUtility.isEmailValid(emailConfirmEdit)) {
						if (emailEdit.equals(emailConfirmEdit)) {
							checkRegistrationStatus(firstName, lastName,
									emailEdit, orgNameEdit, webUrlEdit,
									phoneNo, streetAddress, cityString,
									stateString, countryString, zipCode);
						} else {
							String messg = "Enter same email address";
							alert.setCancelable(false).setMessage(messg);
							alert.setNegativeButton(
									getString(R.string.ok_text),
									new DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {
											dialog.dismiss();
										}
									});
							handler.post(new Runnable() {
								public void run() {
									alert.show();;
								}
							});
						}
					} else {
						if (!AndroidUtility.isConnected(getActivityContext())) {
							netStatusMsg = "No internet connectivity.";
						} else {
							if (!AndroidUtility.isEmailValid(emailEdit)) {
								netStatusMsg = "Please enter valid Email-id.";
							} else {
								if (!AndroidUtility
										.isEmailValid(emailConfirmEdit)) {
									netStatusMsg = "Please enter same email id";
								}
							}
						}

						alert.setCancelable(false).setMessage(netStatusMsg);
						alert.setNegativeButton(getString(R.string.ok_text),
								new DialogInterface.OnClickListener() {
									@Override
									public void onClick(DialogInterface dialog,
											int which) {
										dialog.dismiss();
									}
								});
						handler.post(new Runnable() {
							public void run() {
								alert.show();;
							}
						});
					}
				} else {
					if (firstName.equals(""))
						ValidationStr = "First name missing.";
					else if (lastName.equals(""))
						ValidationStr = "Last name missing.";
					else if (emailEdit.equals(""))
						ValidationStr = "Email Address missing.";
					else if (emailConfirmEdit.equals(""))
						ValidationStr = "Please confirm email id.";
					else if (phoneNo.equals(""))
						ValidationStr = "Phone Number missing.";
					else if (streetAddress.equals(""))
						ValidationStr = "Street Address missing.";
					else if (cityString.equals(""))
						ValidationStr = "City missing.";
					else if (stateString.equals(""))
						ValidationStr = "State missing.";
					else if (countryString.equals(""))
						ValidationStr = "Country missing.";
					else if (zipCode.equals(""))
						ValidationStr = "Zip Code Missing.";

					alert.setCancelable(false).setMessage(ValidationStr);
					alert.setNegativeButton(getString(R.string.ok_text),
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									dialog.dismiss();
								}
							});
					handler.post(new Runnable() {
						public void run() {
							alert.show();;
						}
					});
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * @param firstName
	 * @param lastName
	 * @param emailedit
	 * @param zipCode
	 * @param countryString
	 * @param stateString
	 * @param cityString
	 * @param streetAddress
	 * @param phoneNo
	 */
	private void checkRegistrationStatus(String firstName, String lastName,
			String emailedit, String orgName, String webUrl, String phoneNo,
			String streetAddress, String cityString, String stateString,
			String countryString, String zipCode) {
		try {
			// String deviceId = Settings.System.getString(getContentResolver(),
			// Settings.System.ANDROID_ID);
			// BaseUrl.deviceId=deviceId;
			/*
			 * URL sourceUrl = new URL(BaseUrl.baseurl +
			 * "insertUserInfo_change.php?fname=" + firstName + "&lname=" +
			 * lastName + "&email=" + emailedit + "&phoneNo=" + phoneNo +
			 * "&streetAddress=" + URLEncoder.encode(streetAddress, "UTF-8") +
			 * "&city=" + URLEncoder.encode(cityString, "UTF-8") + "&ZipCode=" +
			 * URLEncoder.encode(zipCode, "UTF-8") + "&state=" +
			 * URLEncoder.encode(stateString, "UTF-8") + "&country=" +
			 * URLEncoder.encode(countryString, "UTF-8") + "&device_id=" +
			 * BaseUrl.deviceId + "&device_registration_id=" +
			 * BaseUrl.RegistrationId + "&org_name=" +
			 * URLEncoder.encode(orgName, "UTF-8") + "&org_url=" +
			 * URLEncoder.encode(webUrl, "UTF-8") );
			 */

			URL sourceUrl = new URL(BaseUrl.baseurl
					+ "insertUserInfo_change.php?fname="
					+ URLEncoder.encode(firstName, "UTF-8") + "&lname="
					+ URLEncoder.encode(lastName, "UTF-8") + "&email="
					+ URLEncoder.encode(emailedit, "UTF-8") + "&phoneNo="
					+ URLEncoder.encode(phoneNo, "UTF-8") + "&streetAddress="
					+ URLEncoder.encode(streetAddress, "UTF-8") + "&city="
					+ URLEncoder.encode(cityString, "UTF-8") + "&ZipCode="
					+ URLEncoder.encode(zipCode, "UTF-8") + "&state="
					+ URLEncoder.encode(stateString, "UTF-8") + "&country="
					+ URLEncoder.encode(countryString, "UTF-8") + "&device_id="
					+ BaseUrl.deviceId + "&device_registration_id="
					+ BaseUrl.RegistrationId + "&org_name="
					+ URLEncoder.encode(orgName, "UTF-8") + "&org_url="
					+ URLEncoder.encode(webUrl, "UTF-8") /*
														 * +
														 * "&org_demographics="
														 * URLEncoder
														 * .encode(demographicsType
														 * , "UTF-8")
														 */);

			Log.d("sourceUrl ====", "sourceUrl ===" + sourceUrl);

			user_registrationManager.xmlAddUserRegistrationInfo(sourceUrl,
					getActivityContext());

		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (UserRegistrationException e) {
			e.printStackTrace();
		} catch (SocketException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
	}
	private void displaySuccessfullRegistration() {
		WindowManager.LayoutParams params = successDialog.getWindow()
				.getAttributes();
		params.width = WindowManager.LayoutParams.WRAP_CONTENT;
		params.height = WindowManager.LayoutParams.WRAP_CONTENT;
		params.dimAmount = 0.9f;
		successDialog.getWindow().addFlags(
				WindowManager.LayoutParams.FLAG_DIM_BEHIND);
		successDialog.getWindow().setAttributes(params);
		// successDialog.getWindow().setLayout((disp.getWidth() / 2) +
		// 40,
		// (disp.getHeight() / 4) + 20);
		successDialog.getWindow().setBackgroundDrawable(
				new ColorDrawable(android.graphics.Color.TRANSPARENT));
		successDialog.getWindow().setGravity(Gravity.CENTER_VERTICAL);
		View dialogLayout = getLayoutInflater().inflate(
				R.layout.success_custom_dialog, null);
		successDialog.setContentView(dialogLayout);

		TextView statusTxt1 = (TextView) dialogLayout
				.findViewById(R.id.regstatusTxt);
		TextView statusTxt2 = (TextView) dialogLayout
				.findViewById(R.id.regstatusTxt1);
		statusTxt1.setTypeface(typefaceHelvetica);
		statusTxt2.setTypeface(typefaceHelvetica);
		Button startBtn = (Button) dialogLayout.findViewById(R.id.start_Btn);
		startBtn.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				successDialog.dismiss();
				startActivity(new Intent(getActivityContext(),
						TestSummaryActivity.class));
				finish();
			}
		});
		successDialog.show();
	}

	/**
	 * 
	 * @author suryakumari
	 * 
	 */
	public class GetQuesDetailsAsync extends AsyncTask<String, String, String> {
		GettestquestionManager mGetTestQuestionManager;
		GettestanswersManager mGetOptionsManager;
		GetalltestManager getAllTestManager;
		Context mContext;
		URL sourceUrl;

		public GetQuesDetailsAsync(Context context) {
			mContext = context;
			getAllTestManager = new GetalltestManager(mContext);
		}

		// Ajay:Changes for progressbar
		public void onProgressUpdate(String... progress) {
			// setting progress percentage
			runOnUiThread(changeMessage);
			if (pDialog.getProgress() <= 100)
				pDialog.setProgress(Integer.parseInt(progress[0]));
			else
				pDialog.setProgress(0);

			// pDialog.setMessage("HI");

		}
		private Runnable changeMessage = new Runnable() {
			@Override
			public void run() {
				pDialog.setMessage("Step " + currentWebService + "/"
						+ totalWebServiceToCall);
			}
		};
		@Override
		protected String doInBackground(String... params) {
			try {
				if (mPlanIds.size() != 0) {
					mTestIds = TextUtils.join(",", BaseUrl.TestIdsArrList);
					if (TextUtils.isEmpty(mTestIds) || mTestIds.equals("0")) {
						mGetalltests.clear();
						mGetalltests.addAll(getAllTestManager
								.getAllGetalltestWithoutAsync());
						BaseUrl.TestIdsArrList.clear();

						for (Getalltest getalltest : mGetalltests)
							BaseUrl.TestIdsArrList.add(getalltest.testId);
						mTestIds = TextUtils.join(",", BaseUrl.TestIdsArrList);
					}
					// sync test questions
					if (isTestQuestionsSyncNeeded) {
						SyncStatus syncStatus = TestContentManager
								.getInstance().getSyncStatus(
										getActivityContext());
						String downloaddate = syncStatus
								.getQuestionsdownloadDate();
						String downloadtime = syncStatus
								.getQuestionsdownloadTime();
						TestContentManager.getInstance()
								.setTestQuestionsSyncUpdate(true);
						// Gets all the questions from the server
						sourceUrl = new URL(BaseUrl.baseurl
								+ "getTestQuestion_change.php?download_date="
								+ downloaddate + "&download_time="
								+ downloadtime + "&test_ids=" + mTestIds);
						GettestquestionXMLHandler.allGettestquestion.clear();
						// Ajay
						currentWebService++;
						System.out.println("current web Service called"
								+ currentWebService);
						mGetTestQuestionManager.xmlAddGettestquestionInfo(
								sourceUrl, this);

						// update local sync date time.
						if (GettestquestionXMLHandler.allGettestquestion != null
								&& GettestquestionXMLHandler.allGettestquestion
										.size() > 0) {
							syncStatus
									.setQuestionsdownloadDate(GettestquestionXMLHandler.allGettestquestion
											.get(0).downloadDate);
							syncStatus
									.setQuestionsdownloadTime(GettestquestionXMLHandler.allGettestquestion
											.get(0).downloadTime);
							TestContentManager.getInstance().updateSyncStatus(
									getActivityContext(), syncStatus);
							syncStatus = TestContentManager.getInstance()
									.getSyncStatus(getActivityContext());
						}

					}

					// sync test answers
					if (isTestAnswerSyncNeeded) {
						SyncStatus syncStatus = TestContentManager
								.getInstance().getSyncStatus(
										getActivityContext());
						String downloaddate = syncStatus
								.getAnswersdownloadDate();
						String downloadtime = syncStatus
								.getAnswersdownloadTime();
						TestContentManager.getInstance()
								.setTestAnswerSyncUpdate(true);
						// Gets all the answers from the server
						URL optionssourceUrl = new URL(
								BaseUrl.baseurl
										+ "getTestQuestionAnswers_change.php?download_date="
										+ downloaddate + "&download_time="
										+ downloadtime + "&test_ids="
										+ mTestIds);
						// Ajay
						currentWebService++;
						System.out.println("current web Service called"
								+ currentWebService);
						GettestanswersXMLHandler.allGettestanswers.clear();
						mGetOptionsManager
								.xmlAddGettestanswersInfo(optionssourceUrl);
						// update local sync date time.
						if (GettestanswersXMLHandler.allGettestanswers != null
								&& GettestanswersXMLHandler.allGettestanswers
										.size() > 0) {
							Gettestquestion question = TestContentManager
									.getInstance()
									.getTestQuestionWhere(
											getActivityContext(),
											"questionId",
											GettestanswersXMLHandler.allGettestanswers
													.get(0).questionId + "");
							if (question != null) {
								syncStatus
										.setAnswersdownloadDate(question.downloadDate);
								syncStatus
										.setAnswersdownloadTime(question.downloadTime);
								TestContentManager.getInstance()
										.updateSyncStatus(getActivityContext(),
												syncStatus);
								syncStatus = TestContentManager.getInstance()
										.getSyncStatus(getActivityContext());
							}
						}

					}
				}
				// Getting compress tests data
				TestContentManager.getInstance().parseCompressXml(
						getActivityContext());
				TestContentManager.getInstance().startImagesSync(
						getActivityContext());

				isGetQuesAnsSuccess = true;
			} catch (Exception e) {
				e.printStackTrace();
				isGetQuesAnsSuccess = false;
			}
			return null;
		}

		@Override
		protected void onPostExecute(String result) {
			super.onPostExecute(result);
			// regDialog.dismiss();
			pDialog.dismiss();
			if (isGetQuesAnsSuccess && isGetTestSuccess && isGetQuesAnsSuccess) {
				displaySuccessfullRegistration();
			} else {
				showSyncFailDialog();
			}
		}

		@Override
		protected void onPreExecute() {
			mGetTestQuestionManager = new GettestquestionManager(mContext);
			mGetOptionsManager = new GettestanswersManager(mContext);
			// if (mPlanIds.size() != 0) {
			// try {
			// mGetTestQuestionManager
			// .deletAllGettestquestionwithoutAsync();
			// mGetOptionsManager.deletAllGettestanswerswithoutAsync();
			// } catch (GettestquestionException e) {
			// e.printStackTrace();
			// } catch (GettestanswersException e) {
			// e.printStackTrace();
			// }
			//
			// }
			super.onPreExecute();
		}
	}

	/**
	 * 
	 * @author suryakumari
	 * 
	 */
	public class GetTestDetailsAsync extends AsyncTask<String, String, String> {
		GetalltestManager getAllTestManager;
		GetuserplanManager mGetuserplanManager;

		// Ajay:Changes for progressbar
		public void onProgressUpdate(String... progress) {
			// setting progress percentage
			runOnUiThread(changeMessage);
			if (pDialog.getProgress() <= 100)
				pDialog.setProgress(Integer.parseInt(progress[0]));
			else
				pDialog.setProgress(0);

			// pDialog.setMessage("HI");

		}
		private Runnable changeMessage = new Runnable() {
			@Override
			public void run() {
				pDialog.setMessage("Step " + currentWebService + "/"
						+ totalWebServiceToCall);
			}
		};
		@Override
		protected String doInBackground(String... params) {
			try {

				SyncStatus syncStatus = TestContentManager.getInstance()
						.getSyncStatus(getActivityContext());

				// Get All Tests from the server
				if (mPlanIds.size() != 0) {
					setSyncNeededVariables(mPlanIdsStr, BaseUrl.LoginId);
					TestContentManager.getInstance().setTestSyncUpdate(false);
					TestContentManager.getInstance()
							.setTestQuestionsSyncUpdate(false);
					TestContentManager.getInstance().setTestAnswerSyncUpdate(
							false);

					// GetalltestXMLHandler.allGetalltest.clear();
					GetalltestXMLHandler.allTestIds.clear();
					mLocalGetAlltestsIds = new ArrayList<Integer>();
					mLocalGetAlltestsIds.addAll(getAllTestManager
							.getAllGetalltestidsWithoutAsync());
					// getAllTestManager.xmlAddGetalltestInfo(new URL(
					// BaseUrl.baseurl
					// + "getAllDefaultTest.php?download_date="
					// + 0 + "&download_time=" + 0 + "&plan_id="
					// + 0 + "&user_id=" + BaseUrl.LoginId));

					// Ajay
					currentWebService++;
					System.out.println("current web Service called"
							+ currentWebService);
					getAllTestManager.xmlAddGetalltestInfo(new URL(
							BaseUrl.baseurl
									+ "getAllTest_change.php?download_date="
									+ 0 + "&download_time=" + 0 + "&plan_id="
									+ mPlanIdsStr + "&user_id="
									+ BaseUrl.LoginId), this);

					mGetalltests.clear();
					mGetalltests.addAll(getAllTestManager
							.getAllGetalltestWithoutAsync());
					for (Getalltest getalltestLocal : mGetalltests) {
						if (!mLocalGetAlltestsIds
								.contains(getalltestLocal.testId)
								&& getalltestLocal.Buy.equalsIgnoreCase("Y")
								&& BaseUrl.DefaultTestidsArrList
										.contains(getalltestLocal.testId)) {
							getAllTestManager.updateGetAllTestWhere(
									"IsActivated", "N",
									String.valueOf(getalltestLocal.testId));
						}
					}
					BaseUrl.TestIdsArrList.clear();
					for (Getalltest getalltest : mGetalltests)
						BaseUrl.TestIdsArrList.add(getalltest.testId);
				} else {
					GetalltestXMLHandler.allGetalltest.clear();
					GetalltestXMLHandler.allTestIds.clear();
					// Ajay
					currentWebService++;
					System.out.println("current web Service called"
							+ currentWebService);
					getAllTestManager
							.xmlAddGetalltestInfo(new URL(
									BaseUrl.baseurl
											+ "getAllDefaultTest_change.php?download_date="
											+ 0 + "&download_time=" + 0
											+ "&plan_id=" + 0 + "&user_id="
											+ BaseUrl.LoginId));

					for (Integer mtestId : BaseUrl.DefaultTestidsArrList) {
						if (!GetalltestXMLHandler.allTestIds.contains(mtestId))
							getAllTestManager
									.updateGetAllTestWhere("IsActivated", "N",
											String.valueOf(mtestId));

					}
					mGetalltests.clear();
					try {
						mGetalltests.addAll(getAllTestManager
								.getAllGetalltestWithoutAsync());
					} catch (GetalltestException e) {
						e.printStackTrace();
					}
					BaseUrl.TestIdsArrList.clear();
					for (Getalltest getalltest : mGetalltests)
						BaseUrl.TestIdsArrList.add(getalltest.testId);
				}

				// update local sync date time.
				if (GetalltestXMLHandler.allGetalltest != null
						&& GetalltestXMLHandler.allGetalltest.size() > 0) {
					syncStatus
							.setTestsDownloadDate(GetalltestXMLHandler.allGetalltest
									.get(0).downloaddate);
					syncStatus
							.setTestsDownloadTime(GetalltestXMLHandler.allGetalltest
									.get(0).downloadtime);
					TestContentManager.getInstance().updateSyncStatus(
							getActivityContext(), syncStatus);
					syncStatus = TestContentManager.getInstance()
							.getSyncStatus(getActivityContext());
				}

				isGetTestSuccess = true;
			} catch (Exception e) {
				e.printStackTrace();
				isGetTestSuccess = false;
			}

			return null;
		}

		@Override
		protected void onPreExecute() {
			getAllTestManager = new GetalltestManager(getActivityContext());
			mGetuserplanManager = new GetuserplanManager(getActivityContext());
			mPlanIds = new ArrayList<Integer>();

			try {
				mPlanIds.addAll(mGetuserplanManager
						.getAllGetuserplanwithoutAsync());
				if (mPlanIds.size() != 0)
					mPlanIdsStr = TextUtils.join(",", mPlanIds);

			} catch (NumberFormatException e) {
				e.printStackTrace();
			} catch (GetuserplanException e) {
				e.printStackTrace();
			}

			super.onPreExecute();
		}

		@Override
		protected void onPostExecute(String result) {
			new GetQuesDetailsAsync(getActivityContext()).execute();
			super.onPostExecute(result);
		}
	}

	private boolean isGetPlanSuccess = false;
	private boolean isGetTestSuccess = false;
	private boolean isGetQuesAnsSuccess = false;
	private boolean isGetVersionSuccess = false;

	private void showSyncFailDialog() {
		alert = new AlertDialog.Builder(getActivityContext());
		alert.setCancelable(false).setMessage(
				getString(R.string.sync_fail_dialog_message));
		alert.setPositiveButton("Try Again",
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.cancel();
						new InitializeDataSync(getActivityContext()).execute();

					}
				});
		alert.setNegativeButton("Cancel",
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.cancel();
						Intent intent = new Intent(getActivityContext(),
								TestSummaryActivity.class);
						intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
						startActivity(intent);
						finish();
					}
				});
		alert.show();
	}

	/**
	 * Fetches Test Data from server
	 * 
	 * @author suryakumari
	 * 
	 */
	public class InitializeDataSync extends AsyncTask<String, String, String> {
		GetuserplanManager userPlanManager;
		TestResultManager mtestResultManager;
		TestAnswersManager mtestAnswerManager;
		GetallplanManager mAllGetallplanManager;
		Context mContext;
		GetAppVersionManager mGetAppVersionManager;

		public InitializeDataSync(Context context) {
			mContext = context;
			mGetalltests = new ArrayList<Getalltest>();
			userPlanManager = new GetuserplanManager(context);
			mtestResultManager = new TestResultManager(getActivityContext());
			mtestAnswerManager = new TestAnswersManager(getActivityContext());
			mAllGetallplanManager = new GetallplanManager(getActivityContext());
			mGetAppVersionManager = new GetAppVersionManager(
					getActivityContext());
			user_registrationManager = new UserRegistrationManager(
					getActivityContext()) {
				@Override
				public void handleMessage(Message msg) {
					super.handleMessage(msg);
					if (msg.getData()
							.getString("Operation")
							.equals(EOperation.GET_SINGLE_USER_REGISTRATION
									.toString())) {
						userreg = (UserRegistration) msg.obj;
						if (userreg != null) {
							BaseUrl.LoginId = userreg.user_id;
							BaseUrl.emailId = userreg.email_id;
						}

					}
				}
			};
			try {
				user_registrationManager.getSingleUserRegistration();
			} catch (UserRegistrationException e) {
				e.printStackTrace();
			}
		}

		// Ajay:Changes for progressbar
		public void onProgressUpdate(String... progress) {
			// setting progress percentage
			runOnUiThread(changeMessage);
			if (pDialog.getProgress() <= 100)
				pDialog.setProgress(Integer.parseInt(progress[0]));
			else
				pDialog.setProgress(0);

			// pDialog.setMessage("HI");

		}
		private Runnable changeMessage = new Runnable() {
			@Override
			public void run() {
				pDialog.setMessage("Step " + currentWebService + "/"
						+ totalWebServiceToCall);
			}
		};

		@Override
		protected void onPreExecute() {
			// Display payNowdisp =
			// getActivityContext().getWindowManager().getDefaultDisplay();
			/*
			 * WindowManager.LayoutParams params = regDialog.getWindow()
			 * .getAttributes(); params.width =
			 * WindowManager.LayoutParams.WRAP_CONTENT; params.height =
			 * WindowManager.LayoutParams.WRAP_CONTENT; params.dimAmount = 0.9f;
			 * regDialog.getWindow().addFlags(
			 * WindowManager.LayoutParams.FLAG_DIM_BEHIND);
			 * regDialog.getWindow().setAttributes(params); //
			 * regDialog.getWindow().setLayout((payNowdisp.getWidth() / 2) + 80,
			 * // (payNowdisp.getHeight() / 3) - 40);
			 * regDialog.getWindow().setBackgroundDrawable( new
			 * ColorDrawable(android.graphics.Color.TRANSPARENT));
			 * regDialog.getWindow().setGravity(Gravity.CENTER_VERTICAL); View
			 * dialogLayout2 = getActivityContext().getLayoutInflater().inflate(
			 * R.layout.custom_progressbar, null);
			 * regDialog.setContentView(dialogLayout2); regDialog.show();
			 * regDialog.setCancelable(false);
			 */

			// Ajay:changes for showing progressbar sync data
			pDialog = new ProgressDialog(getActivityContext());
			pDialog.setTitle("Downloading Data Please wait...");
			// pDialog.setIcon(R.drawable.download_icon);
			pDialog.setMessage("Please wait...");
			pDialog.setIndeterminate(false);
			pDialog.setMax(100);
			pDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
			pDialog.setCancelable(false);
			pDialog.show();
			super.onPreExecute();
		}

		@Override
		protected String doInBackground(String... params) {
			try {
				UserRegistration userregistration = user_registrationManager
						.getSingleUserRegistrationWithOutAsync();
				if (userregistration != null)
					mAlreadyExit = userregistration.alreadyExist;
				totalWebServiceToCall = 3;
				// Synchronize Test ResultsDetails
				if (mAlreadyExit.equalsIgnoreCase("Y")
						&& AndroidUtility.isConnected(getActivityContext())) {
					// Gets all the plans related to the user
					totalWebServiceToCall = 4;
					URL sourceUrl = new URL(BaseUrl.baseurl
							+ "getUserPlan_change.php?user_id="
							+ BaseUrl.LoginId);
					GetuserplanXMLHandler.allGetuserplan.clear();
					// Ajay
					currentWebService++;
					System.out.println("current web Service called"
							+ currentWebService);
					userPlanManager.xmlAddGetuserplanInfo(sourceUrl, this);

					BaseUrl.IS_SYNC_ALLOWED = false;
					// try {
					// testResultManager.synchronizeAllTestsWithServer();
					// testResultManager
					// .getAllTestDataFromServerNInsertIntoLocalDB();
					// } catch (TestResultException e2) {
					// e2.printStackTrace();
					// }
				}
				String downloadedDate = "0";
				String downloadedTime = "0";
				ArrayList<Getallplan> arrGetallplans = mAllGetallplanManager
						.getAllGetallplanWtihOutSync();
				if (arrGetallplans.size() > 0) {
					downloadedDate = arrGetallplans.get(0).downloaded_date;
					downloadedTime = arrGetallplans.get(0).downloaded_time;
				}
				GetallplanXMLHandler.allGetallplan.clear();
				GetallplanXMLHandler.allPlanIds.clear();
				GetallplanXMLHandler.allLimitedPlanIds.clear();
				String stringPlanURL = BaseUrl.baseurl
						+ "getAllPlan_change.php?download_date="
						+ downloadedDate + "&download_time=" + downloadedTime;
				// Ajay
				currentWebService++;
				System.out.println("Current web Service called"
						+ currentWebService);
				mAllGetallplanManager.xmlAddGetallplanInfo(new URL(
						stringPlanURL), this);
				GetallplanXMLHandler.allGetallplan.size();
				// ArrayList<Integer> arrayListServerIds = new
				// ArrayList<Integer>();
				// for (Getallplan getallplanServer :
				// GetallplanXMLHandler.allGetallplan)
				// arrayListServerIds.add(getallplanServer.PlanId);

				for (Getallplan getallplanLocal : arrGetallplans) {
					if (!GetallplanXMLHandler.allPlanIds
							.contains(getallplanLocal.PlanId))
						mAllGetallplanManager
								.deleteGetallplan(getallplanLocal.PlanId);
				}

				// **************Code for getting the current version
				// Ajay
				currentWebService++;
				System.out.println("current web Service called"
						+ currentWebService);
				String strAppVersionURL = "http://www.testingcolorvision.com/webservices/getVersion_change.php";
				mGetAppVersionManager.xmlAddGetAppVersionInfo(new URL(
						strAppVersionURL), this);

				isGetVersionSuccess = true;
				//
				isGetPlanSuccess = true;

			} catch (MalformedURLException e) {
				e.printStackTrace();
				isGetPlanSuccess = false;
			} catch (GetuserplanException e) {
				e.printStackTrace();
				isGetPlanSuccess = false;
			} catch (SocketException e) {
				e.printStackTrace();
				isGetPlanSuccess = false;
			} catch (UserRegistrationException e) {
				e.printStackTrace();
				isGetPlanSuccess = false;
			} catch (GetallplanException e) {
				e.printStackTrace();
				isGetPlanSuccess = false;
			} catch (GetAppVersionException e) {
				e.printStackTrace();
				isGetVersionSuccess = false;
			}
			return null;
		}

		@Override
		protected void onPostExecute(String result) {
			new GetTestDetailsAsync().execute();

			super.onPostExecute(result);
		}
	}

	boolean isTestSyncNeeded = false;
	boolean isTestQuestionsSyncNeeded = false;
	boolean isTestAnswerSyncNeeded = false;

	public void setSyncNeededVariables(String planId, String userId) {
		SyncStatus syncStatus = TestContentManager.getInstance().getSyncStatus(
				getActivityContext());
		if (syncStatus != null) {
			TestContentManager.getInstance().parseServerSyncItem(
					getActivityContext(), syncStatus.getTestsDownloadDate(),
					syncStatus.getTestsDownloadTime(), planId, userId);
			ServerSyncItem serverSyncItem = TestContentManager.getInstance()
					.getServerSyncItem();
			if (serverSyncItem != null) {
				if (!serverSyncItem.getUpdatedTest().equals("0")) {
					isTestSyncNeeded = true;
					totalWebServiceToCall++;
				}
			}
			TestContentManager.getInstance().parseServerSyncItem(
					getActivityContext(),
					syncStatus.getQuestionsdownloadDate(),
					syncStatus.getQuestionsdownloadTime(), planId, userId);
			serverSyncItem = TestContentManager.getInstance()
					.getServerSyncItem();
			if (serverSyncItem != null) {
				if (!serverSyncItem.getUpdatedQuestion().equals("0")) {
					isTestQuestionsSyncNeeded = true;
					totalWebServiceToCall++;
				}
			}
			TestContentManager.getInstance().parseServerSyncItem(
					getActivityContext(), syncStatus.getAnswersdownloadDate(),
					syncStatus.getAnswersdownloadTime(), planId, userId);
			serverSyncItem = TestContentManager.getInstance()
					.getServerSyncItem();
			if (serverSyncItem != null) {
				if (!serverSyncItem.getUpdatedAnswers().equals("0")) {
					isTestAnswerSyncNeeded = true;
					totalWebServiceToCall++;
				}
			}
		}
	}

	private boolean isSyncStarted = false;
	class SyncActionReceiver extends ActionUpdateListener {
		@Override
		public void onImagesSyncComplete() {
			// Intent regIntent = new Intent(getActivityContext(),
			// TestSummaryActivity.class);
			// startActivity(regIntent);
			// getActivityContext().finish();
			if (!TestContentManager.getInstance().isSyncRunning()
					&& isSyncStarted) {
				isSyncStarted = false;
				regDialog.dismiss();
				displaySuccessfullRegistration();
			}
		}
	}

	@Override
	protected void onDestroy() {
		if (syncReceiver != null) {
			AppUtils.unregisterActionListener(getActivityContext(),
					syncReceiver);
			syncReceiver = null;
		}
		super.onDestroy();
		System.gc();
	}

	private void edit() {
		if (user_registrationManager == null) {
			user_registrationManager = new UserRegistrationManager(this);
		}

		user_registrationManager = new UserRegistrationManager(
				getActivityContext()) {
			@Override
			public void handleMessage(Message msg) {
				super.handleMessage(msg);
				if (msg.getData()
						.getString("Operation")
						.equals(EOperation.GET_SINGLE_USER_REGISTRATION
								.toString())) {
					userreg = (UserRegistration) msg.obj;
					if (userreg != null) {
						BaseUrl.LoginId = userreg.user_id;
						BaseUrl.emailId = userreg.email_id;
					}

					displayUserInfo(userreg);
				}
			}

		};
		try {
			user_registrationManager.getSingleUserRegistration();
		} catch (UserRegistrationException e) {
			e.printStackTrace();
		}
	}

	private void displayUserInfo(UserRegistration user) {
		isEdit = (user != null);
		
		if(user == null) 
			return;

		frstNameEdit.setText(user.fname);
		LastNameEdit.setText(user.lname);
		EmailEdit.setText(user.email_id);
		ConfirmEmailEdit.setText(user.email_id);
		organisationNameEdit.setText(user.organizationName);
		websiteUrlEdit.setText(user.organizationUrl);
		PhoneEdit.setText(user.phoneNo);
		StreetEdit.setText(user.streetAddress);
		CityEdit.setText(user.cityString);
		StateEdit.setText(user.stateString);
		CountryEdit.setText(user.countryString);
		ZipEdit.setText(user.zipCode);
	}

	public Context getActivityContext() {
		if (getParent() != null)
			return getParent();

		return this;
	}
}
